/*
SQLyog Ultimate v11.33 (64 bit)
MySQL - 5.1.49-community : Database - db_blogs
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`db_blogs` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `db_blogs`;

/*Table structure for table `t_arctype` */

DROP TABLE IF EXISTS `t_arctype`;

CREATE TABLE `t_arctype` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(50) DEFAULT NULL,
  `sortNo` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `t_arctype` */

insert  into `t_arctype`(`id`,`typeName`,`sortNo`) values (0,'暂无分类',4);
insert  into `t_arctype`(`id`,`typeName`,`sortNo`) values (1,'java技术',1);
insert  into `t_arctype`(`id`,`typeName`,`sortNo`) values (2,'网页技术',2);
insert  into `t_arctype`(`id`,`typeName`,`sortNo`) values (4,'数据库技术',3);

/*Table structure for table `t_article` */

DROP TABLE IF EXISTS `t_article`;

CREATE TABLE `t_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `content` longtext,
  `summary` varchar(400) DEFAULT NULL,
  `crawlerDate` datetime DEFAULT NULL,
  `clickHit` int(11) DEFAULT NULL,
  `typeId` int(11) DEFAULT NULL,
  `tags` varchar(200) DEFAULT NULL,
  `orUrl` varchar(2000) DEFAULT NULL,
  `state` int(11) DEFAULT NULL,
  `releaseDate` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `typeId` (`typeId`),
  CONSTRAINT `t_article_ibfk_1` FOREIGN KEY (`typeId`) REFERENCES `t_arctype` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8;

/*Data for the table `t_article` */

insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (41,'JavaScript中的数据结构及实战系列（1）：队列','<h2 id=\"开题\">开题</h2> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode html\"><code class=\"sourceCode html\">    张三丰教无忌太极剑法:\n        还记得吗?\n        全都记得.\n        现在呢?\n        已经忘却了一小半.\n        啊,已经忘了一大半.\n        不坏不坏,忘得真快,那么现在呢?\n        已经全都忘了,忘得干干净净.\n        好了,你上吧.</code></pre>\n</div> \n<p>长时间写前端代码，将自己以前的积累都忘得一干二净，所以开了一个关于JS的数据结构系列，在业务型程序员的基础上，也要实时的优化自己的代码，让自己的代码有思想是每个程序员最自豪的事情。</p> \n<p>本文目录</p> \n<p>本文目录</p> \n<ul> \n <li><a href=\"#1\">队列介绍：</a></li> \n <li><a href=\"#2\">JavaScript实现队列：</a></li> \n <li><a href=\"#3\">队列的实践：</a></li> \n</ul> \n<h2 id=\"1\">队列介绍：</h2> \n<p>相信任何有些编程基础的人都对队列不算陌生，队列是一种先进先出的接口，也就是FIFO（First Input First Output），它也是一种表结构。在队列的队尾插入数据，在队首删除数据，可以想象成我们每天早晨买豆浆时队伍。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/71c2268a-5496-4a7a-acfe-39d7772cce4a.jpeg\"></p> \n<p>队列只要有两个主要的功能：出队（push）和入队（pop）。入队操作在队尾插入新的元素，出队操作返回并删除队首的元素。有时候我们只需要获取队首和队尾但并不一定非要执行队列的出队和入队行为，所以我们又需要一个获取队首（getFirst）和队尾（getLast）的行为。有时我们也有全部清空本队列的动作，所以还要有clear方法。除了以上提到的我们还需要知道队列中有多少个元素，可以用length去获取。</p> \n<h2 id=\"2\">JavaScript实现： </h2> \n<p>使用数组的push方法和shift方法可以基本完成队列的出队和入队操作，但是我们为了不让其他无关的数组属性去破坏队列结构还需要对其封装一下，所以就有了我们现在的代码：</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><span class=\"kw\">function</span> <span class=\"at\">Queue</span>()<span class=\"op\">{</span>\n    <span class=\"kw\">var</span> items <span class=\"op\">=</span> []<span class=\"op\">;</span>\n    <span class=\"co\">//入队</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">push</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>(obj)<span class=\"op\">{</span>\n        <span class=\"va\">items</span>.<span class=\"at\">push</span>(obj)<span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//出队</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">pop</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> <span class=\"va\">items</span>.<span class=\"at\">shift</span>()<span class=\"op\">;</span> \n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//获取队首</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">getFirst</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> items[<span class=\"dv\">0</span>]<span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//获取队尾</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">getLast</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> items[<span class=\"va\">items</span>.<span class=\"at\">length</span>]<span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//清空本队列</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">clear</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        items <span class=\"op\">=</span> []<span class=\"op\">;</span>\n    <span class=\"op\">}</span>\n\n    <span class=\"co\">//获取队列指定位置</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">get</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>(k)<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> items[k]<span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//获取队列长度</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">length</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> <span class=\"va\">items</span>.<span class=\"at\">length</span><span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//队列是否为空</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">empty</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> <span class=\"va\">items</span>.<span class=\"at\">length</span> <span class=\"op\">===</span> <span class=\"dv\">0</span><span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n<span class=\"op\">}</span>\n\n<span class=\"kw\">var</span> lazyQueue <span class=\"op\">=</span> <span class=\"kw\">new</span> <span class=\"at\">Queue</span>()<span class=\"op\">;</span>\n\n<span class=\"va\">lazyQueue</span>.<span class=\"at\">push</span>(<span class=\"op\">{</span>\n    <span class=\"dt\">a</span><span class=\"op\">:</span> <span class=\"dv\">1</span><span class=\"op\">,</span> \n    <span class=\"dt\">b</span><span class=\"op\">:</span> <span class=\"dv\">2</span>\n<span class=\"op\">}</span>)<span class=\"op\">;</span>\n\n<span class=\"va\">lazyQueue</span>.<span class=\"at\">push</span>(<span class=\"op\">{</span>\n    <span class=\"dt\">c</span><span class=\"op\">:</span> <span class=\"dv\">3</span><span class=\"op\">,</span> \n    <span class=\"dt\">d</span><span class=\"op\">:</span> <span class=\"dv\">4</span>\n<span class=\"op\">}</span>)<span class=\"op\">;</span>\n\n<span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"va\">lazyQueue</span>.<span class=\"at\">pop</span>())<span class=\"op\">;</span>\n<span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"va\">lazyQueue</span>.<span class=\"at\">length</span>())<span class=\"op\">;</span>\n<span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"va\">lazyQueue</span>.<span class=\"at\">clear</span>())<span class=\"op\">;</span>\n<span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"va\">lazyQueue</span>.<span class=\"at\">pop</span>())<span class=\"op\">;</span>\n<span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"va\">lazyQueue</span>.<span class=\"at\">length</span>())<span class=\"op\">;</span></code></pre>\n</div> \n<p>输出结果为:</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><span class=\"op\">{</span><span class=\"dt\">a</span><span class=\"op\">:</span> <span class=\"dv\">1</span><span class=\"op\">,</span> <span class=\"dt\">b</span><span class=\"op\">:</span> <span class=\"dv\">2</span><span class=\"op\">}</span>\n<span class=\"dv\">1</span>\n<span class=\"kw\">undefined</span>\n<span class=\"kw\">undefined</span>\n<span class=\"dv\">0</span></code></pre>\n</div> \n<h2 id=\"3\">队列的实践： </h2> \n<p>在我们的开发遇到很多队列的使用，且队列的应用也比较简单，只要在执行完上次任务后再执行本任务，直到队列为空为止。</p> \n<p>之前分享了<a href=\"http://www.cnblogs.com/jingh/p/5659857.html\">PHP以及JavaScript的八大排序方式</a>，但是对于基数排序的JavaScript实现方法没有搞清楚,现在可以补上了。</p> \n<p>首先将“基数排序”的概念理解一下： 基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。(取自百度百科)</p> \n<p>我们同样以百度百科中的列子：假如有数字： 73, 22, 93, 43, 55, 14, 28, 65, 39, 81</p> \n<p>经过基数排序第一次扫描之后按照个位数的大小排序，数字被分配大如下的盒子中:</p> \n<pre><code>  第0个盒子：\n  第1个盒子：81\n  第2个盒子：22\n  第3个盒子：73, 93, 43\n  第4个盒子：14\n  第5个盒子：55, 65\n  第6个盒子：\n  第7个盒子：\n  第8个盒子：28\n  第9个盒子：39</code></pre> \n<p>根据盒子的顺序，对数字经行第一次排序的结果如下：</p> \n<p>81, 22, 73, 93, 43, 14, 55, 65, 28, 39</p> \n<p>然后根据十位上的数值再将上次排序结果分配到不同的盒子里</p> \n<pre><code>  第0个盒子：\n  第1个盒子：14 \n  第2个盒子：22, 28\n  第3个盒子：39\n  第4个盒子：43\n  第5个盒子：55\n  第6个盒子：65\n  第7个盒子：73\n  第8个盒子：81\n  第9个盒子：93</code></pre> \n<p>最后将盒子里的数字取出，组成一个新的列表，该列表即为排好顺序的数字：<br> 14, 22, 28, 39 ,43, 55, 65, 73, 81, 93</p> \n<p>使用队列代表盒子，可以实现这个算法，我们需要9个队列，每个对应一个数字。将所有队列保存在一个数组中，使用取余和出发操作决定各位和十位。算法的剩余部分将数字加入对应的队列，根据个位数值重新排序，然后再根据十位数值经行排序，结果即为排好顺序的数字。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><span class=\"kw\">function</span> <span class=\"at\">Queue</span>()<span class=\"op\">{</span>\n    <span class=\"kw\">var</span> items <span class=\"op\">=</span> []<span class=\"op\">;</span>\n    <span class=\"co\">//入队</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">push</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>(obj)<span class=\"op\">{</span>\n        <span class=\"va\">items</span>.<span class=\"at\">push</span>(obj)<span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//出队</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">pop</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> <span class=\"va\">items</span>.<span class=\"at\">shift</span>()<span class=\"op\">;</span> \n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//获取队首</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">getFirst</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> items[<span class=\"dv\">0</span>]<span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//获取队尾</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">getLast</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> items[<span class=\"va\">items</span>.<span class=\"at\">length</span>]<span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//清空本队列</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">clear</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        items <span class=\"op\">=</span> []<span class=\"op\">;</span>\n    <span class=\"op\">}</span>\n\n    <span class=\"co\">//获取队列指定位置</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">get</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>(k)<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> items[k]<span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//获取队列长度</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">length</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> <span class=\"va\">items</span>.<span class=\"at\">length</span><span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n\n    <span class=\"co\">//队列是否为空</span>\n    <span class=\"kw\">this</span>.<span class=\"at\">empty</span> <span class=\"op\">=</span> <span class=\"kw\">function</span>()<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> <span class=\"va\">items</span>.<span class=\"at\">length</span> <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">;</span>\n    <span class=\"op\">};</span>\n<span class=\"op\">}</span>\n\n<span class=\"co\">/********基数排序**********/</span>\n\n<span class=\"co\">//初始化队列</span>\n<span class=\"kw\">var</span> queues <span class=\"op\">=</span> []<span class=\"op\">;</span>\n<span class=\"cf\">for</span> (<span class=\"kw\">var</span> i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span><span class=\"dv\">10</span><span class=\"op\">;</span> i<span class=\"op\">++</span>)<span class=\"op\">{</span>\n    queues[i] <span class=\"op\">=</span> <span class=\"kw\">new</span> <span class=\"at\">Queue</span>()<span class=\"op\">;</span>\n<span class=\"op\">}</span>\n\n<span class=\"co\">//随机产生10个二位的整数</span>\n<span class=\"kw\">var</span> nums <span class=\"op\">=</span> []<span class=\"op\">;</span>\n<span class=\"cf\">for</span> (<span class=\"kw\">var</span> i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> <span class=\"dv\">10</span><span class=\"op\">;</span> i<span class=\"op\">++</span>) <span class=\"op\">{</span>\n    nums[i] <span class=\"op\">=</span> <span class=\"va\">Math</span>.<span class=\"at\">floor</span>(<span class=\"va\">Math</span>.<span class=\"at\">random</span>()<span class=\"op\">*</span><span class=\"dv\">100</span>)<span class=\"op\">;</span>\n<span class=\"op\">}</span>\n\n<span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"st\">\'初始化数组：\'</span><span class=\"op\">,</span> nums)<span class=\"op\">;</span>\n\n<span class=\"co\">//按照个位数字入相应的队列</span>\n<span class=\"cf\">for</span> (<span class=\"kw\">var</span> i<span class=\"op\">=</span><span class=\"dv\">0</span><span class=\"op\">;</span> i<span class=\"op\">&lt;</span><span class=\"dv\">10</span><span class=\"op\">;</span> i<span class=\"op\">++</span>) <span class=\"op\">{</span>\n    queues[nums[i]<span class=\"op\">%</span><span class=\"dv\">10</span>].<span class=\"at\">push</span>(nums[i])<span class=\"op\">;</span>\n<span class=\"op\">}</span>\n\n<span class=\"co\">//收集队列中的数字放在数组nums中</span>\n<span class=\"kw\">var</span> j<span class=\"op\">=</span><span class=\"dv\">0</span><span class=\"op\">;</span>\n<span class=\"kw\">var</span> nums2 <span class=\"op\">=</span> []<span class=\"op\">;</span>\n<span class=\"cf\">for</span> (<span class=\"kw\">var</span> i<span class=\"op\">=</span><span class=\"dv\">0</span><span class=\"op\">;</span> i<span class=\"op\">&lt;</span><span class=\"dv\">10</span><span class=\"op\">;</span> i<span class=\"op\">++</span>) <span class=\"op\">{</span>\n    <span class=\"cf\">while</span> (<span class=\"op\">!</span>queues[i].<span class=\"at\">empty</span>())<span class=\"op\">{</span>\n        nums2[j<span class=\"op\">++</span>] <span class=\"op\">=</span> queues[i].<span class=\"at\">pop</span>()<span class=\"op\">;</span>\n    <span class=\"op\">}</span>\n<span class=\"op\">}</span>\n\n<span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"st\">\'个位数字入队排序后的数组：\'</span><span class=\"op\">,</span> nums2)<span class=\"op\">;</span>\n\n<span class=\"co\">//由于上面已经全部出队了，所以可以使用已经初始化的queue队列数组</span>\n\n<span class=\"co\">//按照十位数字入相应的队列</span>\n<span class=\"cf\">for</span> (<span class=\"kw\">var</span> i <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span> i <span class=\"op\">&lt;</span> <span class=\"dv\">10</span><span class=\"op\">;</span> i<span class=\"op\">++</span>) <span class=\"op\">{</span>\n    <span class=\"op\">!</span><span class=\"at\">isNaN</span>(<span class=\"va\">Math</span>.<span class=\"at\">floor</span>(nums2[i] / <span class=\"dv\">10</span>)) <span class=\"op\">&amp;&amp;</span> queues[<span class=\"va\">Math</span>.<span class=\"at\">floor</span>(nums2[i] / <span class=\"dv\">10</span>)].<span class=\"at\">push</span>(nums2[i])<span class=\"op\">;</span>\n<span class=\"op\">}</span>\n\n<span class=\"co\">//收集队列中的数字放在数组nums中</span>\nj<span class=\"op\">=</span><span class=\"dv\">0</span><span class=\"op\">;</span>\n<span class=\"kw\">var</span> nums3 <span class=\"op\">=</span> []\n<span class=\"cf\">for</span> (<span class=\"kw\">var</span> i<span class=\"op\">=</span><span class=\"dv\">0</span><span class=\"op\">;</span> i<span class=\"op\">&lt;</span><span class=\"dv\">10</span><span class=\"op\">;</span> i<span class=\"op\">++</span>) <span class=\"op\">{</span>\n    <span class=\"cf\">while</span> (<span class=\"op\">!</span>queues[i].<span class=\"at\">empty</span>())<span class=\"op\">{</span>\n        nums3[j<span class=\"op\">++</span>] <span class=\"op\">=</span> queues[i].<span class=\"at\">pop</span>()<span class=\"op\">;</span>\n    <span class=\"op\">}</span>\n<span class=\"op\">}</span>\n\n<span class=\"va\">console</span>.<span class=\"at\">log</span>(<span class=\"st\">\'十位数字入队排序后的数组：\'</span><span class=\"op\">,</span> nums3)<span class=\"op\">;</span></code></pre>\n</div> \n<p>结果如下：</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\">初始化数组： [<span class=\"dv\">15</span><span class=\"op\">,</span> <span class=\"dv\">48</span><span class=\"op\">,</span> <span class=\"dv\">46</span><span class=\"op\">,</span> <span class=\"dv\">77</span><span class=\"op\">,</span> <span class=\"dv\">23</span><span class=\"op\">,</span> <span class=\"dv\">72</span><span class=\"op\">,</span> <span class=\"dv\">93</span><span class=\"op\">,</span> <span class=\"dv\">25</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">75</span>]\n\n个位数字入队排序后的数组： [<span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">72</span><span class=\"op\">,</span> <span class=\"dv\">23</span><span class=\"op\">,</span> <span class=\"dv\">93</span><span class=\"op\">,</span> <span class=\"dv\">15</span><span class=\"op\">,</span> <span class=\"dv\">25</span><span class=\"op\">,</span> <span class=\"dv\">75</span><span class=\"op\">,</span> <span class=\"dv\">46</span><span class=\"op\">,</span> <span class=\"dv\">77</span><span class=\"op\">,</span> <span class=\"dv\">48</span>]\n\n十位数字入队排序后的数组： [<span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">15</span><span class=\"op\">,</span> <span class=\"dv\">23</span><span class=\"op\">,</span> <span class=\"dv\">25</span><span class=\"op\">,</span> <span class=\"dv\">46</span><span class=\"op\">,</span> <span class=\"dv\">48</span><span class=\"op\">,</span> <span class=\"dv\">72</span><span class=\"op\">,</span> <span class=\"dv\">75</span><span class=\"op\">,</span> <span class=\"dv\">77</span><span class=\"op\">,</span> <span class=\"dv\">93</span>]</code></pre>\n</div>',NULL,'2017-04-24 15:59:58',0,0,NULL,'http://www.cnblogs.com/jingh/p/6756945.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (42,'Spring事务执行过程','<p>　　先说一下启动过程中的几个点：&nbsp;</p> \n<p>　　加载配置文件：<img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/f4c529f3-7848-4429-b22e-1b9b47710cbd.png\" alt=\"\"></p> \n<p>&nbsp;<img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/e1c228ef-4137-4355-b52b-ba53b0afabe9.png\" alt=\"\"></p> \n<p>　　AbstractAutowireCapableBeanFactory.doCreateBean --&gt; initializeBean --&gt; applyBeanPostProcessorsAfterInitialization --&gt; beanProcessor.postProcessAfterInitialization --&gt; AbstractAutoProxyCreator.postProcessAfterInitialization --&gt; wrapIfNecessary(bean, beanName, cacheKey) --&gt; getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)Advisor是Pointcut和Advice的配置器，它包括Pointcut和Advice，是将Advice注入程序中Pointcut位置的代码;AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary：调用txAdvice上图的事务通知设置数据源&nbsp;DataSourceTransactionManager，ChooseDataSource是项目中配置的自定义的继承至AbstractRoutingDataSource的默认数据源，命名什么的：</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/96c967cf-6920-4b6b-851a-7758ccb1a045.png\" alt=\"\"></p> \n<p>　　启动结束后，发起事务调用，首先拦截方法起CglibAopProxy.intercept --&gt; ReflectiveMethodInvocation.proceed --&gt; ExposeInvocationInterceptor.invoke --&gt; TransactionInterceptor.invoke：</p> \n<div class=\"cnblogs_code\"> \n <pre>    <span style=\"color: #0000ff\">public</span> Object invoke(<span style=\"color: #0000ff\">final</span> MethodInvocation invocation) <span style=\"color: #0000ff\">throws</span><span style=\"color: #000000\"> Throwable {\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Work out the target class: may be {@code null}.\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> The TransactionAttributeSource should be passed the target class\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> as well as the method, which may be from an interface.</span>\n        Class&lt;?&gt; targetClass = (invocation.getThis() != <span style=\"color: #0000ff\">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">);\n\n        </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Adapt to TransactionAspectSupport\'s invokeWithinTransaction...</span>\n        <span style=\"color: #0000ff\">return</span> invokeWithinTransaction(invocation.getMethod(), targetClass, <span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> InvocationCallback() {\n            @Override\n            </span><span style=\"color: #0000ff\">public</span> Object proceedWithInvocation() <span style=\"color: #0000ff\">throws</span><span style=\"color: #000000\"> Throwable {\n                </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> invocation.proceed();\n            }\n        });\n    }</span></pre> \n</div> \n<p>　　TransactionAspectSupport.invokeWithinTransaction :</p> \n<p>&nbsp;<img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/16e63e6c-e695-41a0-b114-287f592d49e4.png\" alt=\"\"></p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/f4f59944-358a-450e-aa88-15eb3721d3ce.png\" alt=\"\"></p> \n<p>&nbsp;　　determineTransactionManager方法先判断当前事务有无配置特定事务管理器，如果没有判断是否设置过默认的事务管理器，都没有的情况下：</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/a7d5de4e-139e-41be-9d07-21dffa53ddae.png\" alt=\"\"></p> \n<div class=\"cnblogs_code\"> \n <pre>    <span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> PlatformTransactionManager getTransactionManager() {\n        </span><span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY);\n    }</span></pre> \n</div> \n<p>　　接下来判断加载的事务属性是否存在或者当前事务管理器是否不是CallbackPreferringPlatformTransactionManager，符合条件会执行到createTransactionIfNecessary，先是：</p> \n<div class=\"cnblogs_code\"> \n <pre>        <span style=\"color: #0000ff\">if</span> (txAttr != <span style=\"color: #0000ff\">null</span> &amp;&amp; txAttr.getName() == <span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">) {\n            txAttr </span>= <span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> DelegatingTransactionAttribute(txAttr) {\n                @Override\n                </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> String getName() {\n                    </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> joinpointIdentification;\n                }\n            };\n        }</span></pre> \n</div> \n<p>　　DelegatingTransactionAttribute本身除了被实现后使用没有其他作用。然后从事务管理器中取出事务，doGetTransaction从之前set的数据源取出连接set给DataSourceTransactionObject：</p> \n<div class=\"cnblogs_code\"> \n <pre>    <span style=\"color: #0000ff\">protected</span><span style=\"color: #000000\"> Object doGetTransaction() {\n        DataSourceTransactionObject txObject </span>= <span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> DataSourceTransactionObject();\n        txObject.setSavepointAllowed(isNestedTransactionAllowed());\n        ConnectionHolder conHolder </span>=<span style=\"color: #000000\">\n                (ConnectionHolder) TransactionSynchronizationManager.getResource(</span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">.dataSource);\n        txObject.setConnectionHolder(conHolder, </span><span style=\"color: #0000ff\">false</span><span style=\"color: #000000\">);\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> txObject;\n    }</span></pre> \n</div> \n<p>　　然后判断事务是否已存在，如果存在例如嵌套事务，会根据定义的传播方式进行处理，具体处理后面会说，这里是还不存在。然后验证了一下事务是否超时。由于从事务定义(TransactionDefinition持有隔离级别等事务属性的对象)中取出的事务传播方式我这里是默认的&nbsp;PROPAGATION_REQUIRED，第一句用于挂起事务的什么也没做，然后或许事务同步为激活同步，接着就到启动事务了DataSourceTransactionManager&nbsp;doBegin:</p> \n<div class=\"cnblogs_code\"> \n <pre>            <span style=\"color: #0000ff\">if</span> (txObject.getConnectionHolder() == <span style=\"color: #0000ff\">null</span> ||<span style=\"color: #000000\">\n                    txObject.getConnectionHolder().isSynchronizedWithTransaction()) {\n                Connection newCon </span>= <span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">.dataSource.getConnection();\n                </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (logger.isDebugEnabled()) {\n                    logger.debug(</span>\"Acquired Connection [\" + newCon + \"] for JDBC transaction\"<span style=\"color: #000000\">);\n                }\n                txObject.setConnectionHolder(</span><span style=\"color: #0000ff\">new</span> ConnectionHolder(newCon), <span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">);\n            }</span></pre> \n</div> \n<p>　　先从数据源中getConnection，set给DataSourceTransactionObject，设置为同步事务，prepareConnectionForTransaction根据配置确定事务是否只读，被嵌套的事务中前一个的隔离级别txObject.setPreviousIsolationLevel(previousIsolationLevel)：</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/9e5b1678-db62-4688-ab5c-973a31490b30.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p>　　判断是否已设置为自动提交，如果是设置则设置事务对象为自动还原为自动提交，有点拗口，意思大概是当事务复用数据库连接时第一个事务提交后，同一个连接的下一个事务还是设置为自动提交，否则当前事务如果被设为手痛提交，因为连接池中的连接会被复用，在同一个连接上的后续事务可能需要手动调用conn.commit才能提交下一个事务，设置connection holder代表的连接的事务是活动的；检查超时；判断当前事务的连接是否是新创建的，是则注册给TransactionSynchronizationManager，通过ThreadLocal将线程和事务绑定；prepareSynchronization设置这个事务同步管理器是否包含实际执行的事务，当前线程事务隔离级别、是否只读以及事务定义名，初始化同步事务（private static final ThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt; synchronizations = new NamedThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt;(\"Transaction synchronizations\")）：&nbsp;</p> \n<div class=\"cnblogs_code\"> \n <pre>    public static void initSynchronization() throws<span> IllegalStateException {\n        if<span> (isSynchronizationActive()) { throw new IllegalStateException(\"Cannot activate transaction synchronization - already active\"<span>); } logger.trace(\"Initializing transaction synchronization\"<span>); synchronizations.set(new LinkedHashSet&lt;TransactionSynchronization&gt;<span>()); }</span></span></span></span></span></pre> \n</div> \n<p>&nbsp;　　回到TransactionAspectSupport，prepareTransactionInfo方法创建事务信息，并通过ThreadLocal绑定给当前线程：</p> \n<div class=\"cnblogs_code\"> \n <pre>        TransactionInfo txInfo = <span style=\"color: #0000ff\">new</span> TransactionInfo(tm, txAttr, joinpointIdentification);</pre> \n</div> \n<div class=\"cnblogs_code\"> \n <pre>        <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> bindToThread() {\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Expose current TransactionStatus, preserving any existing TransactionStatus\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> for restoration after this transaction is complete.</span>\n            <span style=\"color: #0000ff\">this</span>.oldTransactionInfo =<span style=\"color: #000000\"> transactionInfoHolder.get();\n            transactionInfoHolder.set(</span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">);\n        }</span></pre> \n</div> \n<p>&nbsp;<img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/583e8079-6f7a-44da-8a8f-6cecdc5f4be1.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p>&nbsp;<img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/b206172f-1874-4bda-a9d8-8de982ab5ed5.png\" alt=\"\"></p> \n<p>　　绑定中保留了当前事务状态，应该用来在嵌套事务中内层事务完成后恢复外层事务的现场。</p> \n<p>　　createTransactionIfNecessary结束，回到TransactionAspectSupport的invokeWithinTransaction方法，接下来是invocation.proceedWithInvocation，这个方法上面贴了，new&nbsp;InvocationCallback时实现了这个方法，代码只有一句调用了MethodInvocation的proceed，也就是环绕通知调用被切方法的方法（也有可能调用其他Interceptor的切面方法），我这直接调用了被切的方法，然而并没有直接走到后面的completeTransactionAfterThrowing或commitTransactionAfterReturning，也没有到清理事务信息的方法，因为有嵌套事务，于是被嵌套的切了，与上面过程相同之处就不说了，说说不同的。</p> \n<p>　　getTransaction这次因为已经存在事务，使用同一个连接，JdbcTransactionObjectSupport实例保存了connectionHolder，所以这次走进了这个判断分支：</p> \n<div class=\"cnblogs_code\"> \n <pre>        <span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (isExistingTransaction(transaction)) {\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Existing transaction found -&gt; check propagation behavior to find out how to behave.</span>\n            <span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> handleExistingTransaction(definition, transaction, debugEnabled);\n        }</span></pre> \n</div> \n<p>　　handleExistingTransaction方法内根据不同的事务传播方式走不同的代码分支，我这就是默认REQUIRED使用现有事务，所以这个方法基本和没走也差不多。嵌套的都完了就走到cleanupTransactionInfo方法了，这方法实际调用了TransactionInfo.restoreThreadLocalStatus，实际上还原了之前的事务信息：</p> \n<div class=\"cnblogs_code\"> \n <pre>        <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> restoreThreadLocalStatus() {\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Use stack to restore old transaction TransactionInfo.\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Will be null if none was set.</span>\n            transactionInfoHolder.set(<span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">.oldTransactionInfo);\n        }</span></pre> \n</div> \n<p>　　然后是commitTransactionAfterReturning：</p> \n<div class=\"cnblogs_code\"> \n <pre>    <span style=\"color: #008000\">/**</span><span style=\"color: #008000\">\n     * Execute after successful completion of call, but not after an exception was handled.\n     * Do nothing if we didn\'t create a transaction.\n     * </span><span style=\"color: #808080\">@param</span><span style=\"color: #008000\"> txInfo information about the current transaction\n     </span><span style=\"color: #008000\">*/</span>\n    <span style=\"color: #0000ff\">protected</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> commitTransactionAfterReturning(TransactionInfo txInfo) {\n        </span><span style=\"color: #0000ff\">if</span> (txInfo != <span style=\"color: #0000ff\">null</span> &amp;&amp;<span style=\"color: #000000\"> txInfo.hasTransaction()) {\n            </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (logger.isTraceEnabled()) {\n                logger.trace(</span>\"Completing transaction for [\" + txInfo.getJoinpointIdentification() + \"]\"<span style=\"color: #000000\">);\n            }\n            txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());\n        }\n    }</span></pre> \n</div> \n<p>　　commit方法在AbstractPlatformTransactionManager中，先提交的是内层的事务，这里需要提的，嵌套事务的子事务报错但没有抛给外层事务，可能会出现rollback-only的问题，defStatus.isLocalRollbackOnly()就是判断是否有内层事务出错设置rollbackOnly为true了，另外，关于全局事务，似乎说的是用的两段式XA？，不过目前用不上，只是一个连接对数据库，这里可以考虑下。该到具体处理提交的方法processCommit了。同样在AbstractPlatformTransactionManager中。prepareForCommit方法是空的，protected应该是准备给子类重写的，或者这就是我要找的。savepoint没有，由于是内层事务，triggerBeforeCommit、triggerBeforeCompletion、triggerAfterCommit和triggerAfterCommit方法没有执行，设置事务状态后，这个内层事务就提交完了。</p> \n<p>　　ExposeInvocationInterceptor(可以暴露出拦截器链，一般用不到它，用到时应该在链首)还原外层被拦截方法的执行：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #000000\">    @Override\n    </span><span style=\"color: #0000ff\">public</span> Object invoke(MethodInvocation mi) <span style=\"color: #0000ff\">throws</span><span style=\"color: #000000\"> Throwable {\n        MethodInvocation oldInvocation </span>=<span style=\"color: #000000\"> invocation.get();\n        invocation.set(mi);\n        </span><span style=\"color: #0000ff\">try</span><span style=\"color: #000000\"> {\n            </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> mi.proceed();\n        }\n        </span><span style=\"color: #0000ff\">finally</span><span style=\"color: #000000\"> {\n            invocation.set(oldInvocation);\n        }\n    }</span></pre> \n</div> \n<p>　　这个外层就是实际被拦截的方法，会通过CglibAopProxy执行。</p> \n<p>　　再来就是提交外层事务了，cleanupTransactionInfo的old这次是null了，一样的流程就不说了，由于外层事务是创建了同步对象所以triggerBeforeCommit执行了：</p> \n<div class=\"cnblogs_code\"> \n <pre>TransactionSynchronizationUtils.triggerBeforeCommit(status.isReadOnly());</pre> \n</div> \n<div class=\"cnblogs_code\"> \n <pre>    <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span> triggerBeforeCommit(<span style=\"color: #0000ff\">boolean</span><span style=\"color: #000000\"> readOnly) {\n        </span><span style=\"color: #0000ff\">for</span><span style=\"color: #000000\"> (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) {\n            synchronization.beforeCommit(readOnly);\n        }\n    }</span></pre> \n</div> \n<p>　　这里的beforeCommit由于我用的是mybatis，所以如果执行的话，会执行到SqlSessionUtils.beforeCommit，然而由于SqlSessionUtils是不能被继承的，所以这里不太好动手脚，只能在这个类的外层想办法。triggerBeforeCompletion是类似的。外层事务会有获取status.isGlobalRollbackOnly()用于doCommit(status)之后是否报错，注意，就是说其实并不会打断提交的执行。doCommit(status)：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #000000\">    @Override\n    </span><span style=\"color: #0000ff\">protected</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> doCommit(DefaultTransactionStatus status) {\n        DataSourceTransactionObject txObject </span>=<span style=\"color: #000000\"> (DataSourceTransactionObject) status.getTransaction();\n        Connection con </span>=<span style=\"color: #000000\"> txObject.getConnectionHolder().getConnection();\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (status.isDebug()) {\n            logger.debug(</span>\"Committing JDBC transaction on Connection [\" + con + \"]\"<span style=\"color: #000000\">);\n        }\n        </span><span style=\"color: #0000ff\">try</span><span style=\"color: #000000\"> {\n            con.commit();\n        }\n        </span><span style=\"color: #0000ff\">catch</span><span style=\"color: #000000\"> (SQLException ex) {\n            </span><span style=\"color: #0000ff\">throw</span> <span style=\"color: #0000ff\">new</span> TransactionSystemException(\"Could not commit JDBC transaction\"<span style=\"color: #000000\">, ex);\n        }\n    }</span></pre> \n</div> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/574dad81-0516-4d48-885a-ea9e9948c9d3.png\" alt=\"\"></p> \n<p>　　没错，我们用的是druid，这里不需要解释了。之后就是一些完成回调，各种解绑、clear、reset了，之前设置的必须还原为自动提交会在doCleanupAfterCompletion还原，最后关闭连接。</p> \n<p>　　过程就是这样了，其实我想实验个想法，于是看了这些代码。以上。</p> \n<div id=\"cnblogs_post_body\"> \n <p>==========================================================</p> \n <p>咱最近用的github：https://github.com/saaavsaaa</p> \n <p>微信公众号：</p> \n <p>　　　　　　　　　　　　　　　　　　　　　　<img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/46225b3d-73e6-4398-a428-e4131a989f33.png\" alt=\"\"></p> \n</div> \n<div id=\"MySignature\">\n 转载请注明出处\n</div>',NULL,'2017-04-24 16:00:11',0,0,NULL,'http://www.cnblogs.com/saaav/p/6705166.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (43,'SELECT中(非常)常用的子查询操作','<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18pt; color: #0000ff\">MySQL中的子查询</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　是在MySQL中经常使用到的一个操作，不仅仅是<span style=\"color: #ff0000\">用在DQL语句中，在DDL语句、DML语句中</span>也都会常用到子查询。</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; color: #ff0000; background-color: #ffff99\">子查询的定义：</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　子查询是将一个查询语句嵌套在另一个查询语句中；</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　在特定情况下，一个查询语句的条件需要另一个查询语句来获取，内层查询（<span style=\"color: #ff0000\">inner query</span>）语句的查询结果，可以为外层查询（<span style=\"color: #ff0000\">outer query</span>）语句<span style=\"color: #ff0000\">提供查询条件</span>。</span></p> \n<p align=\"left\">&nbsp;</p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; color: #ffffff; background-color: #000000\">特点（规范）：</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　①子查询必须放在<span style=\"color: #ff0000\">小括号</span>中</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　②子查询一般放在比较操作符的右边，以增强代码可读性</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　③子查询(小括号里的内容)可出现在几乎所有的SELECT子句中(如：<span style=\"color: #ff6600\">SELECT子句、FROM子句、WHERE子句、ORDER BY子句、HAVING子句……</span>)</span></p> \n<p align=\"left\">&nbsp;</p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">(<span style=\"color: #0000ff; font-size: 14pt\">相关、不相关</span>)<span style=\"color: #ff0000; background-color: #ffff99\">子查询分类：</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　①标量子查询(scalar subquery)：返回1行1列一个值</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　②行子查询(row subquery)：返回的结果集是 1 行 N 列</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　③列子查询(column subquery)：返回的结果集是 N 行 1列</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　④表子查询(table subquery)：返回的结果集是 N 行 N 列</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">可以使用的操作符：<span style=\"color: #ff0000\">= &gt; &lt; &gt;= &lt;= &lt;&gt; ANY IN SOME ALL EXISTS</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; color: #ffffff; background-color: #000000\">注意：</span><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">一个<span style=\"color: #ff0000; background-color: #ccffff\">子查询会返回</span>一个标量（就一个值）、一个行、一个列或一个表，这些子查询称之为<span style=\"color: #ff0000\">标量、行、列和表</span><span style=\"color: #0000ff\">子查询</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　1、如果子查询返回一个标量值（就一个值），那么外部查询就可以使用：=、&gt;、&lt;、&gt;=、&lt;=和&lt;&gt;符号进行比较判断；</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　2、如果子查询<span style=\"color: #ff0000\">返回的不是一个标量值</span>，而外部查询<span style=\"color: #ff0000\">使用了比较符</span>和子查询的结果进行了比较，那么就会<span style=\"color: #ff0000; background-color: #ffff99\">抛出异常</span>。</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">&nbsp;</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; color: #ff6600\">环境搭建：employee雇员表、department部门表、TENNIS数据库</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department; </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+-----------+--------------+---------------------+</span>\n<span style=\"color: #808080\">|</span> d_id <span style=\"color: #808080\">|</span> d_name    <span style=\"color: #808080\">|</span> <span style=\"color: #0000ff\">function</span>     <span style=\"color: #808080\">|</span> address             <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+-----------+--------------+---------------------+</span>\n<span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span> 科技部     <span style=\"color: #808080\">|</span> 研发产品       <span style=\"color: #808080\">|</span> 3号楼5层             <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1002</span> <span style=\"color: #808080\">|</span> 生产部     <span style=\"color: #808080\">|</span> 生产产品       <span style=\"color: #808080\">|</span> 5号楼1层             <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1003</span> <span style=\"color: #808080\">|</span> 销售部     <span style=\"color: #808080\">|</span> 策划销售       <span style=\"color: #808080\">|</span> 1号楼销售大厅         <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+-----------+--------------+---------------------+</span>\n<span style=\"color: #800000; font-weight: bold\">3</span> rows <span style=\"color: #808080\">in</span> <span style=\"color: #0000ff\">set</span> (<span style=\"color: #800000; font-weight: bold\">0.02</span><span style=\"color: #000000\"> sec) mysql</span><span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee; </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #808080\">|</span> num  <span style=\"color: #808080\">|</span> d_id <span style=\"color: #808080\">|</span> name   <span style=\"color: #808080\">|</span> age  <span style=\"color: #808080\">|</span> sex  <span style=\"color: #808080\">|</span> homeaddr           <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">1</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span> 张三    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">26</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> 北京市海淀区          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">2</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span> 李四    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">24</span> <span style=\"color: #808080\">|</span> 女   <span style=\"color: #808080\">|</span> 上海市黄浦区          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">3</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1002</span> <span style=\"color: #808080\">|</span> 王五    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">25</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> 江西省赣州市          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">4</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1004</span> <span style=\"color: #808080\">|</span> Aric   <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">15</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> England             <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #800000; font-weight: bold\">4</span> rows <span style=\"color: #808080\">in</span> <span style=\"color: #0000ff\">set</span> (<span style=\"color: #800000; font-weight: bold\">0.00</span> sec)</span></pre> \n</div> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">use</span><span style=\"color: #000000\"> TENNIS Reading </span><span style=\"color: #0000ff\">table</span> information <span style=\"color: #0000ff\">for</span> completion <span style=\"color: #0000ff\">of</span> <span style=\"color: #0000ff\">table</span> <span style=\"color: #808080\">and</span> <span style=\"color: #0000ff\">column</span><span style=\"color: #000000\"> names You can turn </span><span style=\"color: #0000ff\">off</span> this feature <span style=\"color: #0000ff\">to</span> get a quicker startup <span style=\"color: #0000ff\">with</span> <span style=\"color: #808080\">-</span><span style=\"color: #000000\">A </span><span style=\"color: #0000ff\">Database</span><span style=\"color: #000000\"> changed mysql</span><span style=\"color: #808080\">&gt;</span><span style=\"color: #000000\"> show tables; </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">-----------------+</span>\n<span style=\"color: #808080\">|</span> Tables_in_TENNIS  <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">-----------------+</span>\n<span style=\"color: #808080\">|</span> COMMITTEE_MEMBERS <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span> MATCHES           <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span> PENALTIES         <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span> PLAYERS           <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span> TEAMS             <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">-----------------+</span>\n5 rows <span style=\"color: #808080\">in</span> <span style=\"color: #0000ff\">set</span> (<span style=\"color: #800000; font-weight: bold\">0.00</span> sec)<span style=\"font-family: verdana, Arial, Helvetica, sans-serif; line-height: 1.5; background-color: #ffffff\"><br></span></span></pre> \n</div> \n<p align=\"left\">&nbsp;</p> \n<p align=\"left\">&nbsp;</p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt; color: #0000ff\">一、不相关子查询：</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　不相关，主查询和子查询是不相关的关系。也就是意味着在<span style=\"color: #ff0000\">子查询中没有使用到外部查询的表中的任何列。</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　<span style=\"color: #ff0000\">先执行子查询，然后执行外部查询</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/488eddc3-7845-40b2-90a2-0dfed741ff89.png\" alt=\"\"></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><span style=\"color: #0000ff\">1、标量子查询(scalar subquery)：</span>返回1行1列一个值</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　因为是标量子查询，结果是一个值，所以可用来进行算数运算。</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　可以使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 操作符对子查询的结果进行比较：</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span><span style=\"color: #000000\"> num,name </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> d_id<span style=\"color: #808080\">=</span><span style=\"color: #000000\">( </span><span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">select</span><span style=\"color: #000000\"> d_id </span><span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department </span><span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">where</span> d_name<span style=\"color: #808080\">=</span><span style=\"color: #ff0000\">\'</span><span style=\"color: #ff0000; font-family: &quot;Microsoft YaHei&quot;\">科技部</span><span style=\"color: #ff0000\">\'</span><span style=\"color: #000000\">); </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+--------+</span>\n<span style=\"color: #808080\">|</span> num  <span style=\"color: #808080\">|</span> name   <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+--------+</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">1</span> <span style=\"color: #808080\">|</span> 张三    <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">2</span> <span style=\"color: #808080\">|</span> 李四    <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+--------+</span></span></pre> \n</div> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span><span style=\"color: #000000\"> num,name </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> d_id<span style=\"color: #808080\">=</span><span style=\"color: #000000\">( </span><span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">select</span><span style=\"color: #000000\"> d_id </span><span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department </span><span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">where</span> d_name<span style=\"color: #808080\">=</span><span style=\"color: #ff0000\">\'</span><span style=\"color: #ff0000; font-family: &quot;Microsoft YaHei&quot;\">财务部</span><span style=\"color: #ff0000\">\'</span><span style=\"color: #000000\">); Empty </span><span style=\"color: #0000ff\">set</span> (<span style=\"color: #800000; font-weight: bold\">0.00</span><span style=\"color: #000000\"> sec)</span></span></pre> \n</div> \n<pre><span style=\"font-size: 18px; font-family: &quot;Microsoft YaHei&quot;\"><span style=\"color: #ffffff; background-color: #000000\">注意：</span>如果子查询返回空值，可能导致外部查询的where条件也为空，从而外部查询的结果集为空。</span></pre> \n<p align=\"left\">&nbsp;</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">SELECT</span><span style=\"color: #000000\"> playerno,town,sex </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">FROM</span><span style=\"color: #000000\"> PLAYERS </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">WHERE</span> (town,sex) <span style=\"color: #808080\">=</span> ((<span style=\"color: #0000ff\">SELECT</span> town <span style=\"color: #0000ff\">FROM</span> PLAYERS <span style=\"color: #0000ff\">WHERE</span> playerno<span style=\"color: #808080\">=</span><span style=\"color: #800000; font-weight: bold\">7</span><span style=\"color: #000000\">), </span><span style=\"color: #808080\">-&gt;</span>                     (<span style=\"color: #0000ff\">SELECT</span> sex <span style=\"color: #0000ff\">FROM</span> PLAYERS <span style=\"color: #0000ff\">WHERE</span> playerno<span style=\"color: #808080\">=</span><span style=\"color: #800000; font-weight: bold\">44</span><span style=\"color: #000000\">)); </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">--------+-----------+-----+</span>\n<span style=\"color: #808080\">|</span> playerno <span style=\"color: #808080\">|</span> town      <span style=\"color: #808080\">|</span> sex <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">--------+-----------+-----+</span>\n<span style=\"color: #808080\">|</span>        <span style=\"color: #800000; font-weight: bold\">2</span> <span style=\"color: #808080\">|</span> Stratford <span style=\"color: #808080\">|</span> M   <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>        <span style=\"color: #800000; font-weight: bold\">6</span> <span style=\"color: #808080\">|</span> Stratford <span style=\"color: #808080\">|</span> M   <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>        <span style=\"color: #800000; font-weight: bold\">7</span> <span style=\"color: #808080\">|</span> Stratford <span style=\"color: #808080\">|</span> M   <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>       <span style=\"color: #800000; font-weight: bold\">39</span> <span style=\"color: #808080\">|</span> Stratford <span style=\"color: #808080\">|</span> M   <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>       <span style=\"color: #800000; font-weight: bold\">57</span> <span style=\"color: #808080\">|</span> Stratford <span style=\"color: #808080\">|</span> M   <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>       <span style=\"color: #800000; font-weight: bold\">83</span> <span style=\"color: #808080\">|</span> Stratford <span style=\"color: #808080\">|</span> M   <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>      <span style=\"color: #800000; font-weight: bold\">100</span> <span style=\"color: #808080\">|</span> Stratford <span style=\"color: #808080\">|</span> M   <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">--------+-----------+-----+</span>\n<span style=\"color: #800000; font-weight: bold\">7</span> rows <span style=\"color: #808080\">in</span> <span style=\"color: #0000ff\">set</span> (<span style=\"color: #800000; font-weight: bold\">0.01</span> sec)</span></pre> \n</div> \n<pre><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><span style=\"font-size: 18px\"><span style=\"color: #ffffff; background-color: #000000\">注意：</span> (列,列,…)叫做行表达式，比较时是比较列的组合。</span></span></pre> \n<p align=\"left\">&nbsp;</p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><span style=\"color: #0000ff\">2、行子查询(row subquery)：</span>返回的结果集是 1 行 N 列</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　使用行表达式进行比较，可以使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; in操作符</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> d_id <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department; </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+</span>\n<span style=\"color: #808080\">|</span> d_id <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+</span>\n<span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1002</span> <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1003</span> <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+</span>\n<span style=\"color: #000000\"> mysql</span><span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> d_id <span style=\"color: #808080\">in</span>\n    <span style=\"color: #808080\">-&gt;</span> 　　(<span style=\"color: #0000ff\">select</span> d_id <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department); </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #808080\">|</span> num  <span style=\"color: #808080\">|</span> d_id <span style=\"color: #808080\">|</span> name   <span style=\"color: #808080\">|</span> age  <span style=\"color: #808080\">|</span> sex  <span style=\"color: #808080\">|</span> homeaddr           <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">1</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span> 张三    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">26</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> 北京市海淀区          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">2</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span> 李四    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">24</span> <span style=\"color: #808080\">|</span> 女   <span style=\"color: #808080\">|</span> 上海市黄浦区          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">3</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1002</span> <span style=\"color: #808080\">|</span> 王五    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">25</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> 江西省赣州市          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span></span></pre> \n</div> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">解析：此处首先查询出department表中所有d_id字段的信息，并将结果作为条件，接着查询employee表中以d_id为条件的所有字段信息；NOT IN的效果与上面刚好相反。</span></p> \n<p align=\"left\">&nbsp;</p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><span style=\"color: #0000ff\">3、列子查询(column subquery)：</span>返回的结果集是 N 行 1列</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　<span style=\"color: #ff0000\">必须使用</span> IN、ANY 和 ALL 操作符对子查询返回的结果进行比较</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><span style=\"color: #ffffff; background-color: #000000\">注意：</span><span style=\"color: #ff0000\">ANY 和 ALL 操作符<span style=\"background-color: #ffff99\">不能单独使用</span></span>，其<span style=\"color: #ff0000\"><span style=\"background-color: #ffff99\">前面必须加上</span>单行比较操作符= &gt; &lt; &gt;= &lt;= &lt;&gt;</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">1）<span style=\"color: #0000ff\">带ANY关键字的子查询：</span>ANY关键字表示满足其中任一条件</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> d_id <span style=\"color: #808080\">!=any</span>\n    <span style=\"color: #808080\">-&gt;</span> 　　(<span style=\"color: #0000ff\">select</span> d_id <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department); </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #808080\">|</span> num  <span style=\"color: #808080\">|</span> d_id <span style=\"color: #808080\">|</span> name   <span style=\"color: #808080\">|</span> age  <span style=\"color: #808080\">|</span> sex  <span style=\"color: #808080\">|</span> homeaddr           <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">1</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span> 张三    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">26</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> 北京市海淀区          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">2</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span> 李四    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">24</span> <span style=\"color: #808080\">|</span> 女   <span style=\"color: #808080\">|</span> 上海市黄浦区          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">3</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1002</span> <span style=\"color: #808080\">|</span> 王五    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">25</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> 江西省赣州市          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">4</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1004</span> <span style=\"color: #808080\">|</span> Aric   <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">15</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> England             <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span></span></pre> \n</div> \n<p align=\"left\">&nbsp;</p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">2）<span style=\"color: #0000ff\">带ALL关键字的子查询：</span>ALL关键字表示满足其中所有条件</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> d_id <span style=\"color: #808080\">&gt;=all</span>\n    <span style=\"color: #808080\">-&gt;</span> 　　(<span style=\"color: #0000ff\">select</span> d_id <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department); </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+------+------+------+----------+</span>\n<span style=\"color: #808080\">|</span> num  <span style=\"color: #808080\">|</span> d_id <span style=\"color: #808080\">|</span> name <span style=\"color: #808080\">|</span> age  <span style=\"color: #808080\">|</span> sex  <span style=\"color: #808080\">|</span> homeaddr <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+------+------+------+----------+</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">4</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1004</span> <span style=\"color: #808080\">|</span> Aric <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">15</span> <span style=\"color: #808080\">|</span> 男    <span style=\"color: #808080\">|</span> England  <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+------+------+------+----------+</span></span></pre> \n</div> \n<p align=\"left\">&nbsp;</p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><span style=\"color: #ffffff; background-color: #000000\">注意：</span>如果子查询的结果集中有null值，使用&gt;ALL 和not in操作符时，必须去掉子查询结果集中的null值，否则查询结果错误</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> d_id <span style=\"color: #808080\">&gt;all</span>    <span style=\"font-family: &quot;Microsoft YaHei&quot;; color: #ff0000\">#&gt;all背后执行and操作 </span><span style=\"color: #808080\">-&gt;</span> 　　(<span style=\"color: #0000ff\">select</span> d_id <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee); Empty </span><span style=\"color: #0000ff\">set</span> (<span style=\"color: #800000; font-weight: bold\">0.01</span><span style=\"color: #000000\"> sec)</span></span></pre> \n</div> \n<pre><span style=\"font-size: 18px; font-family: &quot;Microsoft YaHei&quot;\">结果为空：子查询的结果集中包含null值(子查询结果集中没有主查询里的1004行，则为空)。</span></pre> \n<p>&nbsp;</p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><span style=\"color: #0000ff\">4、表子查询(table subquery)：</span>返回的结果集是 N 行 N 列</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　必须使用 IN、ANY 和 ALL 操作符对子查询返回的结果进行比较</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">示例：在committee_members表中，得到任职日期和卸任日期与具有Secretary职位的一行相同的所有行</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span>\n    <span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> COMMITTEE_MEMBERS </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> (begin_date,end_date) <span style=\"color: #808080\">in</span>\n    <span style=\"color: #808080\">-&gt;</span><span style=\"color: #000000\"> ( </span><span style=\"color: #808080\">-&gt;</span>   <span style=\"color: #0000ff\">select</span><span style=\"color: #000000\"> begin_date,end_date </span><span style=\"color: #808080\">-&gt;</span>   <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> COMMITTEE_MEMBERS </span><span style=\"color: #808080\">-&gt;</span>   <span style=\"color: #0000ff\">where</span> position<span style=\"color: #808080\">=</span><span style=\"color: #ff0000\">\'</span><span style=\"color: #ff0000\">Secretary</span><span style=\"color: #ff0000\">\'</span>\n    <span style=\"color: #808080\">-&gt;</span><span style=\"color: #000000\"> ); </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">--------+------------+------------+-----------+</span>\n<span style=\"color: #808080\">|</span> PLAYERNO <span style=\"color: #808080\">|</span> BEGIN_DATE <span style=\"color: #808080\">|</span> END_DATE   <span style=\"color: #808080\">|</span> POSITION  <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">--------+------------+------------+-----------+</span>\n<span style=\"color: #808080\">|</span>        <span style=\"color: #800000; font-weight: bold\">6</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1990</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1990</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">12</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">31</span> <span style=\"color: #808080\">|</span> Secretary <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>        <span style=\"color: #800000; font-weight: bold\">8</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1990</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1990</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">12</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">31</span> <span style=\"color: #808080\">|</span> Treasurer <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>        <span style=\"color: #800000; font-weight: bold\">8</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1991</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1991</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">12</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">31</span> <span style=\"color: #808080\">|</span> Secretary <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>       <span style=\"color: #800000; font-weight: bold\">27</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1990</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1990</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">12</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">31</span> <span style=\"color: #808080\">|</span> Member    <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>       <span style=\"color: #800000; font-weight: bold\">27</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1991</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1991</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">12</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">31</span> <span style=\"color: #808080\">|</span> Treasurer <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>       <span style=\"color: #800000; font-weight: bold\">57</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1992</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1992</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">12</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">31</span> <span style=\"color: #808080\">|</span> Secretary <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>      <span style=\"color: #800000; font-weight: bold\">112</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1992</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">01</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1992</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">12</span><span style=\"color: #808080\">-</span><span style=\"color: #800000; font-weight: bold\">31</span> <span style=\"color: #808080\">|</span> Member    <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">--------+------------+------------+-----------+</span>\n<span style=\"color: #800000; font-weight: bold\">7</span> rows <span style=\"color: #808080\">in</span> <span style=\"color: #0000ff\">set</span> (<span style=\"color: #800000; font-weight: bold\">0.05</span> sec)</span></pre> \n</div> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">&nbsp;</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">&nbsp;</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 14pt; color: #0000ff\">二、相关子查询(correlated subquery)：</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　在子查询中使用到了外部查询的表中的任何列。</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　<span style=\"color: #ff0000\">先执行外部查询，然后执行子查询</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/bd21c624-18ed-4b82-8947-6c7791093f71.png\" alt=\"\"></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">相关子查询的<span style=\"color: #ffffff; background-color: #000000\">执行步骤：</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　①<span style=\"color: #ff0000\">先执行外部查询</span>，得到的行叫做<span style=\"color: #ff0000; background-color: #ffff99\">候选行</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　②使用<span style=\"color: #ff6600\">某个候选行来执行子查询</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　③使用子查询的返回值来决定该候选行是出现在最终的结果集中还是被丢弃</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　④重复以上步骤2和3，将所有的候选行处理完毕，得到最终的结果</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">&nbsp;<img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/2880b3fb-e5bf-4cac-8dbe-f94889f08007.png\" alt=\"\"></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\"><span style=\"color: #0000ff\">示例：</span>得到项目是‘研发产品’的雇员的编号</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span><span style=\"color: #000000\"> num </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> <span style=\"color: #ff0000\">\'</span><span style=\"color: #ff0000; font-family: &quot;Microsoft YaHei&quot;\">研发产品</span><span style=\"color: #ff0000\">\'</span><span style=\"color: #808080\">=</span><span style=\"color: #000000\">( </span><span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">select</span> <span style=\"color: #0000ff\">function</span>\n    <span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> department </span><span style=\"color: #808080\">-&gt;</span> 　　<span style=\"color: #0000ff\">where</span> d_id<span style=\"color: #808080\">=</span><span style=\"color: #000000\">employee.d_id); </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+</span>\n<span style=\"color: #808080\">|</span> num  <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">1</span> <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">2</span> <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+</span></span></pre> \n</div> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; color: #ff0000; background-color: #ffff99\">解析：</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　1）主查询得到候选行，一行一行的拿去执行子查询；</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　2）主查询表employee的候选行的d_id和子查询的d_id匹配，返回值进行where过滤；</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　3）符合，加入最终结果集；</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">　　4）不符合，将候选行丢弃，接着进行处理下一个候选行。</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">&nbsp;</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; color: #0000ff\">带EXISTS关键字的相关子查询(EXISTS存在)</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">专门判断子查询的结果集是否不为空：</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; color: #ff0000\">　　非空空返回true</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; color: #ff0000\">　　空返回false</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">当<span style=\"color: #ff6600\">返回的值为true时</span>，<span style=\"color: #008000\">外层查询语句将进行查询</span>，否则不进行查询</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> <span style=\"color: #808080\">exists</span>\n    <span style=\"color: #808080\">-&gt;</span> (<span style=\"color: #0000ff\">select</span> d_name <span style=\"color: #0000ff\">from</span> department <span style=\"color: #0000ff\">where</span> d_id<span style=\"color: #808080\">=</span><span style=\"color: #800000; font-weight: bold\">1004</span><span style=\"color: #000000\">); Empty </span><span style=\"color: #0000ff\">set</span> (<span style=\"color: #800000; font-weight: bold\">0.00</span> sec)</span></pre> \n</div> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">此处内层循环并没有查询到满足条件的结果，因此<span style=\"color: #ff0000\">返回false，外层查询不执行</span></span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">&nbsp;</span></p> \n<p align=\"left\"><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px\">EXISTS关键字可以与其他的查询条件一起使用，条件表达式与EXISTS关键字之间用AND或者OR来连接</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"font-size: 16px\">mysql<span style=\"color: #808080\">&gt;</span> <span style=\"color: #0000ff\">select</span> <span style=\"color: #808080\">*</span> <span style=\"color: #0000ff\">from</span><span style=\"color: #000000\"> employee </span><span style=\"color: #808080\">-&gt;</span> <span style=\"color: #0000ff\">where</span> age<span style=\"color: #808080\">&gt;</span><span style=\"color: #800000; font-weight: bold\">24</span> <span style=\"color: #808080\">and</span> <span style=\"color: #808080\">exists</span>\n    <span style=\"color: #808080\">-&gt;</span> (<span style=\"color: #0000ff\">select</span> d_name <span style=\"color: #0000ff\">from</span> department <span style=\"color: #0000ff\">where</span> d_id<span style=\"color: #808080\">=</span><span style=\"color: #800000; font-weight: bold\">1003</span><span style=\"color: #000000\">); </span><span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #808080\">|</span> num  <span style=\"color: #808080\">|</span> d_id <span style=\"color: #808080\">|</span> name   <span style=\"color: #808080\">|</span> age  <span style=\"color: #808080\">|</span> sex  <span style=\"color: #808080\">|</span> homeaddr           <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">1</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1001</span> <span style=\"color: #808080\">|</span> 张三    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">26</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> 北京市海淀区          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">|</span>    <span style=\"color: #800000; font-weight: bold\">3</span> <span style=\"color: #808080\">|</span> <span style=\"color: #800000; font-weight: bold\">1002</span> <span style=\"color: #808080\">|</span> 王五    <span style=\"color: #808080\">|</span>   <span style=\"color: #800000; font-weight: bold\">25</span> <span style=\"color: #808080\">|</span> 男   <span style=\"color: #808080\">|</span> 江西省赣州市          <span style=\"color: #808080\">|</span>\n<span style=\"color: #808080\">+</span><span style=\"color: #008080\">--</span><span style=\"color: #008080\">----+------+--------+------+------+--------------------+</span></span><span style=\"font-family: &quot;Microsoft YaHei&quot;; font-size: 18px; line-height: 1.5; background-color: #ffffff\"><br></span></pre> \n</div>',NULL,'2017-04-24 16:00:15',0,0,NULL,'http://www.cnblogs.com/geaozhang/p/6756825.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (44,'uiautomator+cucumber实现移动app自动化测试','<h1 id=\"前提\">前提</h1> \n<p>由于公司业务要求，所以自动化测试要达到以下几点：</p> \n<ul> \n <li>跨应用的测试</li> \n <li>测试用例可读性强</li> \n <li>测试报告可读性强</li> \n <li>对失败的用例有截图保存并在报告中体现</li> \n</ul> \n<p>基于以上几点，在对自动化测试框架选型的时候就选择了uiautomator，这个是谷歌官方推荐的一个界面自动化测试工具，能跨应用测试<br> 对于测试用例的可读性就选择了cucumber-android。可以通过中文来描述用例，并且能够生成html的测试报告。</p> \n<h1 id=\"准备\">准备</h1> \n<h2 id=\"软件安装\">软件安装</h2> \n<ul> \n <li>JDK1.8</li> \n <li>anddoidStudio</li> \n <li>androidSDK</li> \n</ul> \n<h2 id=\"涉及工具和框架\">涉及工具和框架</h2> \n<ul> \n <li>uiautomator</li> \n <li>cucumber-andorid</li> \n <li>cucumber-html</li> \n</ul> \n<h1 id=\"用例设计\">用例设计</h1> \n<p>用一个简单的计算器来作为例子<br> 涉及到用例包括加减乘除</p> \n<pre><code>场景: 验证基本的减功能\n          当 输入数字30\n          当 输入运算符-\n          当 输入数字20\n          当 输入运算符=\n          那么 验证运算结果15\n 场景: 验证基本的加功能\n          当 输入数字30\n          当 输入运算符+\n          当 输入数字25\n          当 输入运算符=\n          那么 验证运算结果55</code></pre> \n<h1 id=\"测试代码设计\">测试代码设计</h1> \n<h2 id=\"测试工程创建\">测试工程创建</h2> \n<ol> \n <li>通过androidStudio新建一个Empty Activity工程，工程中的src目录下会包含androidTest，测试用例代码会在这个目录下来编写</li> \n <li><p>目录结构如下</p> \n  <blockquote> \n   <p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/0c6791e9-10b7-42a4-be6a-bfefad9d0954.png\"></p> \n   <blockquote> \n    <p>assets/features: 放置的是测试用例文件(中文描述的用例文件)<br> com.cucumber.demo.test: 目录下放置的是测试代码<br> elements: 界面上的元素获取方法类（后期UI属性发生变化，可修改这个包下面的类即可）<br> hooks: 放置测试执行的钩子（用例前处理，后处理操作）<br> runner: 测试用例执行类<br> steps: 封装的测试步骤脚本</p> \n   </blockquote> \n  </blockquote></li> \n</ol> \n<h2 id=\"工程配置\">工程配置</h2> \n<p>由于采用的是cucumber-android框架，并且报告的格式期望是html格式，所以在app/build.gradle中要引入这两个相关依赖。</p> \n<pre class=\"groovy\"><code>        androidTestCompile \'info.cukes:cucumber-android:1.2.5\'\n\n        androidTestCompile \'info.cukes:cucumber-picocontainer:1.2.5\'\n\n        androidTestCompile \'info.cukes:cucumber-html:0.2.3\'\n\n        androidTestCompile \'com.android.support.test.uiautomator:uiautomator-v18:2.1.2\'</code></pre> \n<p>在app/build.gradle所有的配置</p> \n<pre class=\"groovy\"><code>    apply plugin: \'com.android.application\'\n\n\n    android {\n\n        compileSdkVersion 23\n\n        buildToolsVersion \"25.0.2\"\n\n\n        dexOptions {\n\n            incremental true\n\n            javaMaxHeapSize \"4g\"\n\n        }\n\n\n        defaultConfig {\n\n            applicationId \"com.cucumber.demo\"\n\n            minSdkVersion 18\n\n            targetSdkVersion 23\n\n            versionCode 1\n\n            versionName \"1.0\"\n\n\n            jackOptions {\n\n                enabled true\n\n            }\n\n            testApplicationId \"com.cucumber.demo.test\"\n\n           testInstrumentationRunner \"com.cucumber.demo.test.runner.Instrumentation\"\n\n        }\n\n\n        packagingOptions {\n\n            exclude \'LICENSE.txt\'\n\n            exclude \'META-INF/maven/com.google.guava/guava/pom.properties\'\n\n            exclude \'META-INF/maven/com.google.guava/guava/pom.xml\'\n\n        }\n\n\n        sourceSets {\n\n            androidTest {\n\n                assets.srcDirs = [\'src/androidTest/assets\']\n\n            }\n\n        }\n\n\n\n        buildTypes {\n\n            release {\n\n                minifyEnabled false\n\n                proguardFiles getDefaultProguardFile(\'proguard-android.txt\'), \'proguard-rules.pro\'\n\n            }\n\n        }\n\n    }\n\n\n    dependencies {\n\n        compile fileTree(dir: \'libs\', include: [\'*.jar\'])\n\n        testCompile \'junit:junit:4.12\'\n\n        compile \'com.android.support:appcompat-v7:23.1.1\'\n\n\n        androidTestCompile \'com.android.support.test:runner:0.5\'\n\n        androidTestCompile \'info.cukes:cucumber-android:1.2.5\'\n\n        androidTestCompile \'info.cukes:cucumber-picocontainer:1.2.5\'\n\n        androidTestCompile \'info.cukes:cucumber-html:0.2.3\'\n\n        androidTestCompile \'com.android.support.test.uiautomator:uiautomator-v18:2.1.2\'\n\n        androidTestCompile \'com.android.support.test:rules:0.5\'\n\n\n    }</code></pre> \n<p>如果在编译的时候出现OutOfMemoryError,就在gradle.properties文件中加入下面配置<br> gradle.properties</p> \n<pre class=\"groovy\"><code>    org.gradle.jvmargs=-Xmx4096m -XX:MaxPermSize=4096m -XX:+HeapDumpOnOutOfMemoryError</code></pre> \n<h2 id=\"测试脚本编写\">测试脚本编写</h2> \n<p>为了便于维护，将元素获取功能放在一个单独的类中，后期界面有变化的话，可以维护这一份文件即可。<br> elements/CalculatorActivity.java</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">    <span class=\"kw\">package com.cucumber.demo.test.elements;</span>\n\n\n    <span class=\"kw\">import android.support.test.InstrumentationRegistry;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiDevice;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiObject;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiObjectNotFoundException;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiSelector;</span>\n\n\n    <span class=\"co\">/**</span>\n\n<span class=\"co\"> * Created by ogq on 4/19/17.</span>\n\n<span class=\"co\"> */</span>\n\n    <span class=\"kw\">public</span> <span class=\"kw\">class</span> CalculatorActivity {\n\n\n        <span class=\"kw\">private</span> <span class=\"dt\">static</span> <span class=\"dt\">final</span> UiDevice uiDevice = UiDevice.<span class=\"fu\">getInstance</span>(InstrumentationRegistry.<span class=\"fu\">getInstrumentation</span>());\n\n\n        <span class=\"co\">/**</span>\n\n<span class=\"co\"> * 获取数字按键</span>\n\n<span class=\"co\"> * </span><span class=\"kw\">@param num</span>\n\n<span class=\"co\"> * @return</span>\n\n<span class=\"co\"> */</span>\n\n        <span class=\"kw\">public</span> <span class=\"dt\">static</span> UiObject <span class=\"fu\">getNumBtn</span>(String num){\n\n            <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/digit\"</span> + num));\n\n        }\n\n\n        <span class=\"co\">/**</span>\n\n<span class=\"co\"> * 获取运算符和非数字字符</span>\n\n<span class=\"co\"> * </span><span class=\"kw\">@param op</span>\n\n<span class=\"co\"> * @return</span>\n\n<span class=\"co\"> * </span><span class=\"kw\">@throws UiObjectNotFoundException</span>\n\n<span class=\"co\"> */</span>\n\n        <span class=\"kw\">public</span> <span class=\"dt\">static</span> UiObject <span class=\"fu\">getCharBtn</span>(String op) <span class=\"kw\">throws</span> UiObjectNotFoundException {\n\n            <span class=\"kw\">switch</span> (op) {\n\n                <span class=\"kw\">case</span> <span class=\"st\">\"+\"</span>:\n\n                    <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/plus\"</span>));\n\n                <span class=\"kw\">case</span> <span class=\"st\">\"-\"</span>:\n\n                    <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/minus\"</span>));\n\n                <span class=\"kw\">case</span> <span class=\"st\">\"x\"</span>:\n\n                    <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/mul\"</span>));\n\n                <span class=\"kw\">case</span> <span class=\"st\">\"/\"</span>:\n\n                    <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/div\"</span>));\n\n                <span class=\"kw\">case</span> <span class=\"st\">\"%\"</span>:\n\n                    <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/pct\"</span>));\n\n                <span class=\"kw\">case</span> <span class=\"st\">\"=\"</span>:\n\n                    <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/equal\"</span>));\n\n                <span class=\"kw\">case</span> <span class=\"st\">\".\"</span>:\n\n                    <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/dot\"</span>));\n\n                <span class=\"kw\">default</span>:\n\n                    <span class=\"kw\">throw</span> <span class=\"kw\">new</span> <span class=\"fu\">UiObjectNotFoundException</span>(<span class=\"st\">\"运算符不正确\"</span>);\n\n            }\n\n        }\n\n\n        <span class=\"co\">/**</span>\n\n<span class=\"co\"> * 获取清除按钮</span>\n\n<span class=\"co\"> * @return</span>\n\n<span class=\"co\"> */</span>\n\n        <span class=\"kw\">public</span> <span class=\"dt\">static</span> UiObject <span class=\"fu\">getClsBtn</span>(){\n\n            <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">resourceId</span>(<span class=\"st\">\"com.android.calculator2:id/clear\"</span>));\n\n        }\n\n\n        <span class=\"co\">/**</span>\n\n<span class=\"co\"> * 获取计算结果</span>\n\n<span class=\"co\"> * @return</span>\n\n<span class=\"co\"> */</span>\n\n        <span class=\"kw\">public</span> <span class=\"dt\">static</span> UiObject <span class=\"fu\">getResultView</span>(){\n\n            <span class=\"kw\">return</span> uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">className</span>(<span class=\"st\">\"android.widget.EditText\"</span>));\n\n        }\n\n    }</code></pre>\n</div> \n<p>用例都是由步骤来组成，所以步骤实现放在一个类中，进行元素的操作动作。<br> 在类开始指定用例文件路径和胶水代码路径，格式为html</p> \n<p>steps/AppTestSteps.java</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">    <span class=\"kw\">package com.cucumber.demo.test.steps;</span>\n\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiObject;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiObjectNotFoundException;</span>\n\n    <span class=\"kw\">import android.test.ActivityInstrumentationTestCase2;</span>\n\n    <span class=\"kw\">import android.util.Log;</span>\n\n\n    <span class=\"kw\">import com.cucumber.demo.MainActivity;</span>\n\n    <span class=\"kw\">import com.cucumber.demo.test.elements.CalculatorActivity;</span>\n\n    <span class=\"kw\">import com.cucumber.demo.test.runner.SomeDependency;</span>\n\n\n    <span class=\"kw\">import cucumber.api.CucumberOptions;</span>\n\n    <span class=\"kw\">import cucumber.api.java.zh_cn.假如;</span>\n\n    <span class=\"kw\">import cucumber.api.java.zh_cn.那么;</span>\n\n\n    <span class=\"co\">/**</span>\n\n<span class=\"er\"> * &lt;a href=\"http://d.android.com/tools/testing/testing_android.html\"&gt;Testing Fundamentals&lt;/a&gt;</span>\n\n<span class=\"co\"> */</span>\n\n    <span class=\"fu\">@CucumberOptions</span>(features=<span class=\"st\">\"features\"</span>, glue = <span class=\"st\">\"com.cucumber.demo.test\"</span>, format={<span class=\"st\">\"pretty\"</span>,<span class=\"st\">\"html:/data/data/com.cucumber.demo/reports\"</span>})\n\n    <span class=\"kw\">public</span> <span class=\"kw\">class</span> AppTestStep <span class=\"kw\">extends</span> ActivityInstrumentationTestCase2&lt;MainActivity&gt;{\n\n\n        <span class=\"dt\">final</span> String TAG = <span class=\"st\">\"AUTOTEST\"</span>;\n\n\n        <span class=\"kw\">public</span> <span class=\"fu\">AppTestStep</span>(SomeDependency dependency) {\n\n\n            <span class=\"kw\">super</span>(MainActivity.<span class=\"fu\">class</span>);\n\n            <span class=\"fu\">assertNotNull</span>(dependency);\n\n        }\n\n\n\n        @假如(<span class=\"st\">\"^输入数字(</span><span class=\"ch\">\\\\</span><span class=\"st\">S+)$\"</span>)\n\n        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">input_number</span>(String number) <span class=\"kw\">throws</span> UiObjectNotFoundException {\n\n            Log.<span class=\"fu\">v</span>(TAG, <span class=\"st\">\"输入数字为：\"</span> + number);\n\n            <span class=\"dt\">char</span>[] chars = number.<span class=\"fu\">toCharArray</span>();\n\n\n            <span class=\"kw\">for</span>(<span class=\"dt\">int</span> i = <span class=\"dv\">0</span>; i &lt; chars.<span class=\"fu\">length</span>; i++){\n\n                <span class=\"kw\">if</span> (chars[i] == \'.\'){\n\n                    CalculatorActivity.<span class=\"fu\">getCharBtn</span>(String.<span class=\"fu\">valueOf</span>(chars[i])).<span class=\"fu\">click</span>();\n\n                }\n\n                <span class=\"kw\">else</span> {\n\n                    CalculatorActivity.<span class=\"fu\">getNumBtn</span>(String.<span class=\"fu\">valueOf</span>(chars[i])).<span class=\"fu\">click</span>();\n\n                }\n\n            }\n\n        }\n\n\n        @假如(<span class=\"st\">\"^输入运算符([+-x</span><span class=\"ch\">\\\\</span><span class=\"st\">/=])$\"</span>)\n\n        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">input_op</span>(String op) <span class=\"kw\">throws</span> UiObjectNotFoundException {\n\n            Log.<span class=\"fu\">v</span>(TAG, <span class=\"st\">\"输入运算符为：\"</span> + op);\n\n            CalculatorActivity.<span class=\"fu\">getCharBtn</span>(op).<span class=\"fu\">click</span>();\n\n        }\n\n\n        @假如(<span class=\"st\">\"^计算器归零$\"</span>)\n\n        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">reset_calc</span>() <span class=\"kw\">throws</span> UiObjectNotFoundException {\n\n            Log.<span class=\"fu\">v</span>(TAG, <span class=\"st\">\"计算器归零\"</span>);\n\n            UiObject clear_obj = CalculatorActivity.<span class=\"fu\">getClsBtn</span>();\n\n            <span class=\"kw\">if</span> (clear_obj.<span class=\"fu\">waitForExists</span>(<span class=\"dv\">3000</span>)){\n\n                clear_obj.<span class=\"fu\">click</span>();\n\n            }\n\n        }\n\n\n        @那么(<span class=\"st\">\"^验证运算结果(</span><span class=\"ch\">\\\\</span><span class=\"st\">S+)$\"</span>)\n\n        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">chk_result</span>(String result) <span class=\"kw\">throws</span> UiObjectNotFoundException {\n\n            Log.<span class=\"fu\">v</span>(TAG, <span class=\"st\">\"期望运算结果为：\"</span> + result);\n\n            UiObject result_obj = CalculatorActivity.<span class=\"fu\">getResultView</span>();\n\n            <span class=\"kw\">if</span> (result_obj.<span class=\"fu\">waitForExists</span>(<span class=\"dv\">5000</span>)){\n\n                String act_result = result_obj.<span class=\"fu\">getText</span>();\n\n                Log.<span class=\"fu\">v</span>(TAG, <span class=\"st\">\"实际运算结果为：\"</span> + act_result);\n\n               <span class=\"kw\">if</span> (!result.<span class=\"fu\">equals</span>(act_result)) {\n\n                   <span class=\"kw\">throw</span> <span class=\"kw\">new</span> <span class=\"fu\">UiObjectNotFoundException</span>(<span class=\"st\">\"结果比对异常，期望值是:\"</span> + result + <span class=\"st\">\",实际值是:\"</span> +   act_result);\n\n               }\n\n            }<span class=\"kw\">else</span>{\n\n                <span class=\"kw\">throw</span> <span class=\"kw\">new</span> <span class=\"fu\">UiObjectNotFoundException</span>(<span class=\"st\">\"结果控件不存在\"</span>);\n\n            }\n\n        }\n\n    }</code></pre>\n</div> \n<p>执行用例时会涉及到一些环境初始化或者数据清理的操作，此时需要用到用例前处理和后处理，在cucumber-android框架中用hooks来实现这块的功能，Before和After钩子是针对每个用例的前处理和后处理操作。</p> \n<blockquote> \n <p>前处理: 判断当前是否计算器界面，如果不是的话打开计算器应用，如果是就计算器归零操作。<br> 后处理:判断用例状态，如果用例失败，截图并把截图嵌入到测试报告中。</p> \n</blockquote> \n<p>hooks/TestHooks.java</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">    <span class=\"kw\">package com.cucumber.demo.test.hooks;</span>\n\n\n    <span class=\"kw\">import android.support.test.InstrumentationRegistry;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.By;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiDevice;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiObject;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiObject2;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiObjectNotFoundException;</span>\n\n    <span class=\"kw\">import android.support.test.uiautomator.UiSelector;</span>\n\n    <span class=\"kw\">import android.util.Log;</span>\n\n\n    <span class=\"kw\">import com.cucumber.demo.test.elements.CalculatorActivity;</span>\n\n\n    <span class=\"kw\">import java.util.List;</span>\n\n\n    <span class=\"kw\">import cucumber.api.Scenario;</span>\n\n    <span class=\"kw\">import cucumber.api.java.Before;</span>\n\n    <span class=\"kw\">import cucumber.api.java.After;</span>\n\n    <span class=\"kw\">import cucumber.api.Scenario.*;</span>\n\n    <span class=\"co\">/**</span>\n\n<span class=\"co\"> * Created by ogq on 4/18/17.</span>\n\n<span class=\"co\"> */</span>\n\n    <span class=\"kw\">public</span> <span class=\"kw\">class</span> TestHooks {\n\n        <span class=\"dt\">final</span> UiDevice uiDevice = UiDevice.<span class=\"fu\">getInstance</span>(InstrumentationRegistry.<span class=\"fu\">getInstrumentation</span>());\n\n        <span class=\"dt\">final</span> String TAG = <span class=\"st\">\"AUTOTEST-HOOKS\"</span>;\n\n        <span class=\"fu\">@Before</span>\n\n        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">befor_features</span>() <span class=\"kw\">throws</span> UiObjectNotFoundException {\n\n            <span class=\"co\">//判断当前是否打开被测应用</span>\n\n            String curPkgName = uiDevice.<span class=\"fu\">getCurrentPackageName</span>();\n\n            Log.<span class=\"fu\">v</span>(TAG,<span class=\"st\">\"当前的包名为\"</span>);\n\n            Log.<span class=\"fu\">v</span>(TAG, curPkgName);\n\n            <span class=\"kw\">if</span> (curPkgName.<span class=\"fu\">equals</span>(<span class=\"st\">\"com.android.calculator2\"</span>)){\n\n                <span class=\"co\">// 计算器归零</span>\n\n                CalculatorActivity.<span class=\"fu\">getClsBtn</span>().<span class=\"fu\">click</span>();\n\n                <span class=\"kw\">return</span>;\n\n            }\n\n            <span class=\"co\">// 打开应用</span>\n\n            uiDevice.<span class=\"fu\">pressHome</span>();\n\n            List&lt;UiObject2&gt; bottom_btns = uiDevice.<span class=\"fu\">findObjects</span>(By.<span class=\"fu\">clazz</span>(<span class=\"st\">\"android.widget.TextView\"</span>));\n\n            <span class=\"kw\">for</span> (<span class=\"dt\">int</span> i =<span class=\"dv\">0</span>;i &lt; bottom_btns.<span class=\"fu\">size</span>();i++){\n\n                <span class=\"kw\">if</span> (i==<span class=\"dv\">2</span>){\n\n                    ((UiObject2)bottom_btns.<span class=\"fu\">toArray</span>()[i]).<span class=\"fu\">click</span>();\n\n                }\n\n            }\n\n            UiObject calc = uiDevice.<span class=\"fu\">findObject</span>(<span class=\"kw\">new</span> <span class=\"fu\">UiSelector</span>().<span class=\"fu\">text</span>(<span class=\"st\">\"Calculator\"</span>).<span class=\"fu\">packageName</span>(<span class=\"st\">\"com.android.launcher\"</span>));\n\n            <span class=\"kw\">if</span> (calc.<span class=\"fu\">waitForExists</span>(<span class=\"dv\">3000</span>)){\n\n                calc.<span class=\"fu\">clickAndWaitForNewWindow</span>();\n\n            }<span class=\"kw\">else</span>{\n\n                <span class=\"kw\">throw</span> <span class=\"kw\">new</span> <span class=\"fu\">UiObjectNotFoundException</span>(<span class=\"st\">\"计算器应用没有找到\"</span>);\n\n            }\n\n\n        }\n\n        <span class=\"fu\">@After</span>\n\n        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">after_features</span>(Scenario scenario){\n\n\n            Log.<span class=\"fu\">v</span>(TAG,<span class=\"st\">\"当前的用例名称：\"</span> + scenario.<span class=\"fu\">getName</span>());\n\n            Log.<span class=\"fu\">v</span>(TAG,<span class=\"st\">\"当前的用例状态：\"</span> + scenario.<span class=\"fu\">getStatus</span>());\n\n          \n\n           <span class=\"kw\">if</span> (status.<span class=\"fu\">equals</span>(<span class=\"st\">\"passed\"</span>)){\n\n                <span class=\"kw\">return</span>;\n\n            }\n\n            String cur_path =  <span class=\"st\">\"/data/data/com.cucumber.demo\"</span>;\n\n    <span class=\"co\">// String png_name = (new SimpleDateFormat(\"yyyyMMddHHmmssSSS\").format(new Date())) + \".png\";</span>\n\n            String png_name = <span class=\"st\">\"error.png\"</span>;\n\n            String png_path =  cur_path + \'/\' + png_name;\n\n            uiDevice.<span class=\"fu\">takeScreenshot</span>(<span class=\"kw\">new</span> File(png_path));\n\n            <span class=\"dt\">byte</span>[] imageAsByte = HelpTools.<span class=\"fu\">image2Bytes</span>(png_path);\n\n            scenario.<span class=\"fu\">embed</span>(imageAsByte, <span class=\"st\">\"image/png\"</span>);\n\n            Log.<span class=\"fu\">v</span>(TAG, <span class=\"st\">\"用例《\"</span> + name + <span class=\"st\">\"》失败截图成功!\"</span>);\n\n        }\n\n    }</code></pre>\n</div> \n<p>重新定义用例执行器，采用的是cucumber-android框架，所以要采用cucumber的执行方式。</p> \n<p>runner/Instrumentation.java</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">    <span class=\"kw\">package com.cucumber.demo.test.runner;</span>\n\n\n    <span class=\"kw\">import android.os.Bundle;</span>\n\n    <span class=\"kw\">import android.support.test.runner.MonitoringInstrumentation;</span>\n\n\n    <span class=\"kw\">import cucumber.api.android.CucumberInstrumentationCore;</span>\n\n\n    <span class=\"kw\">public</span> <span class=\"kw\">class</span> Instrumentation <span class=\"kw\">extends</span> MonitoringInstrumentation {\n\n\n        <span class=\"kw\">private</span> <span class=\"dt\">final</span> CucumberInstrumentationCore instrumentationCore = <span class=\"kw\">new</span> <span class=\"fu\">CucumberInstrumentationCore</span>(<span class=\"kw\">this</span>);\n\n\n        <span class=\"fu\">@Override</span>\n\n        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">onCreate</span>(<span class=\"dt\">final</span> Bundle bundle) {\n\n            <span class=\"kw\">super</span>.<span class=\"fu\">onCreate</span>(bundle);\n\n            instrumentationCore.<span class=\"fu\">create</span>(bundle);\n\n            <span class=\"fu\">start</span>();\n\n        }\n\n\n        <span class=\"fu\">@Override</span>\n\n        <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">onStart</span>() {\n\n            <span class=\"fu\">waitForIdleSync</span>();\n\n            instrumentationCore.<span class=\"fu\">start</span>();\n\n        }\n\n    }</code></pre>\n</div> \n<p>runner/SomeDependency.java</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">    <span class=\"kw\">package com.cucumber.demo.test.runner;</span>\n\n\n    <span class=\"co\">// Dummy class to demonstrate dependency injection</span>\n\n    <span class=\"kw\">public</span> <span class=\"kw\">class</span> SomeDependency {\n\n    }</code></pre>\n</div> \n<p>此时需要修改build.gradle文件，指定测试执行类。</p> \n<pre class=\"groovy\"><code>    testApplicationId \"com.cucumber.demo.test\"\n\n    testInstrumentationRunner \"com.cucumber.demo.test.runner.Instrumentation\"</code></pre> \n<h2 id=\"测试用例编写\">测试用例编写</h2> \n<p>测试框架采用的是cucumber-android,用例的语法采用的是Gherkin，如果不了解的同学可以网上搜索一下相关内容，还是很容易搜索到的。个人觉得还是值得学习的。</p> \n<p>用例文件的编写采用中文描述（下面分别用两种方式编写的用例，场景和场景大纲模式）<br> 其中，场景大纲适合操作相同，输入输出不同的场景。</p> \n<pre class=\"gherkin\"><code>    # language: zh-CN\n\n    功能: 验证计算器的加减乘除功能\n\n        场景大纲: 验证基本的加减乘除功能\n          当 输入数字&lt;num&gt;\n          当 输入运算符&lt;op&gt;\n          当 输入数字&lt;num1&gt;\n          当 输入运算符&lt;op1&gt;\n          那么 验证运算结果&lt;result&gt;\n\n          例子:\n            | num | op | num1 | op1 | result |\n            | 20  |  + | 10  | =   | 30    |\n            |  30 | -  | 15  |  =  |  15   |\n            | 30  | x  |  5  |   = |  150  |\n            | 30  | /  | 5   |   = |  5    |</code></pre> \n<p>features/calcute_demo_01.feature</p> \n<pre class=\"gherkin\"><code>    # language: zh-CN\n    功能: 验证计算器的加减乘除功能\n\n        场景: 验证基本的减功能\n          当 输入数字30\n          当 输入运算符-\n          当 输入数字20\n          当 输入运算符=\n          那么 验证运算结果15\n        场景: 验证基本的加功能\n          当 输入数字30\n          当 输入运算符+\n          当 输入数字25\n          当 输入运算符=\n          那么 验证运算结果55</code></pre> \n<h1 id=\"运行用例\">运行用例</h1> \n<p>通过androidStudio的build和assembleAndroidTest任务会在app/build/output/apk目录下生成app-debug.apk和app-debug-androidTest-unaligned.apk</p> \n<h6 id=\"安装apk\">安装apk</h6> \n<pre><code>    adb install -r app-debug.apk\n    adb install -r app-debug-androidTest-unaligned.apk</code></pre> \n<h6 id=\"验证安装\">验证安装</h6> \n<pre><code>    adb shell pm list instrumentation </code></pre> \n<p>查看测试用例信息(最下面的一条）<br> <img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/afdd8cb4-d117-4ad0-90ae-83009f78aedd.png\"></p> \n<h6 id=\"运行用例-1\">运行用例</h6> \n<pre><code>adb shell am instrument -w -r com.cucumber.demo.test/.runner.Instrumentation</code></pre> \n<h1 id=\"报告查看\">报告查看</h1> \n<p>因为故意在用例中写了个失败的用例场景，所以在结果中会有失败的场景。</p> \n<h6 id=\"html报告\">HTML报告</h6> \n<p>在步骤类中指定的/data/data/com.cucumber.demo/reports/目录下也会有相应的html报告，可以通过以下命令下载下来查看报告：</p> \n<pre><code>adb pull /data/data/com.cucumber.demo/reports/ ./</code></pre> \n<p>通过浏览器打开reports/index.html<br> <img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/3b545b6d-164f-45e2-874c-9f55c1409c20.png\"></p> \n<h6 id=\"文本报告\">文本报告</h6> \n<pre><code>    INSTRUMENTATION_STATUS: numtests=4\n\n    INSTRUMENTATION_STATUS: test=场景大纲 验证基本的加减乘除功能\n\n    INSTRUMENTATION_STATUS: class=功能 验证计算器的加减乘除功能\n\n    INSTRUMENTATION_STATUS_CODE: 1\n\n    INSTRUMENTATION_STATUS: numtests=4\n\n    INSTRUMENTATION_STATUS: test=场景大纲 验证基本的加减乘除功能\n\n    INSTRUMENTATION_STATUS: class=功能 验证计算器的加减乘除功能\n\n    INSTRUMENTATION_STATUS_CODE: 0\n\n    INSTRUMENTATION_STATUS: numtests=4\n\n    INSTRUMENTATION_STATUS: test=场景大纲 验证基本的加减乘除功能\n\n    INSTRUMENTATION_STATUS: class=功能 验证计算器的加减乘除功能\n\n    INSTRUMENTATION_STATUS_CODE: 1\n\n    INSTRUMENTATION_STATUS: numtests=4\n\n    INSTRUMENTATION_STATUS: test=场景大纲 验证基本的加减乘除功能\n\n    INSTRUMENTATION_STATUS: class=功能 验证计算器的加减乘除功能\n\n    INSTRUMENTATION_STATUS_CODE: 0\n\n    INSTRUMENTATION_STATUS: numtests=4\n\n    INSTRUMENTATION_STATUS: test=场景大纲 验证基本的加减乘除功能\n\n    INSTRUMENTATION_STATUS: class=功能 验证计算器的加减乘除功能\n\n    INSTRUMENTATION_STATUS_CODE: 1\n\n    INSTRUMENTATION_STATUS: numtests=4\n\n    INSTRUMENTATION_STATUS: test=场景大纲 验证基本的加减乘除功能\n\n    INSTRUMENTATION_STATUS: class=功能 验证计算器的加减乘除功能\n\n    INSTRUMENTATION_STATUS_CODE: 0\n\n    INSTRUMENTATION_STATUS: numtests=4\n\n    INSTRUMENTATION_STATUS: test=场景大纲 验证基本的加减乘除功能\n\n    INSTRUMENTATION_STATUS: class=功能 验证计算器的加减乘除功能\n\n    INSTRUMENTATION_STATUS_CODE: 1\n\n    INSTRUMENTATION_STATUS: numtests=4\n\n    INSTRUMENTATION_STATUS: test=场景大纲 验证基本的加减乘除功能\n\n    INSTRUMENTATION_STATUS: class=功能 验证计算器的加减乘除功能\n\n    INSTRUMENTATION_STATUS: stack=android.support.test.uiautomator.UiObjectNotFoundException: 结果比对异常，期望值是:5,实际值是:6\n\n        at com.cucumber.demo.test.steps.AppTestStep.chk_result(AppTestStep.java:73)\n\n        at ✽.那么验证运算结果5(features/calcute_demo.feature:13)\n\n\n    INSTRUMENTATION_STATUS_CODE: -1\n\n    INSTRUMENTATION_CODE: -1</code></pre> \n<h1 id=\"源码地址\">源码地址</h1> \n<p>源码git地址：<a href=\"https://github.com/ouguangqian/uiautomator-cucumber-demo\" class=\"uri\">https://github.com/ouguangqian/uiautomator-cucumber-demo</a></p> \n<p>由于水平有限，还请大神多指点！谢谢！</p>',NULL,'2017-04-24 16:00:20',0,0,NULL,'http://www.cnblogs.com/ouguangqian/p/uiautomator-cucumber.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (45,'SQLite中使用CTE巧解多级分类的级联查询','<div> \n <p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">在最近的项目中使用ActiveReports报表设计器设计一个报表模板时，遇到一个多级分类的难题：需要将某个部门所有销售及下属部门的销售金额汇总，因为下属级别的层次不确定，所以靠拼接子查询的方式显然是不能满足要求，经过一番实验，利用了CTE（Common Table Expression）很轻松解决了这个问题！</span></p> \n</div> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">举例：有如下的部门表</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/2a0284d2-3ccb-4b1b-a518-57b767e364a7.png\" alt=\"\"></span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">以及员工表</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/81e28afc-88a5-41d8-8868-9a95957bdb67.png\" alt=\"\"></span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">如果想查询所有西北区的员工（包含西北、西安、兰州），如下图所示：</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/c173f53e-2f70-4f2d-b08c-a6a1f751dd89.png\" alt=\"\"></span></p> \n<h1><span style=\"font-family: \'Microsoft YaHei\'; font-size: 18px; color: #000000;\">如何用CTE的方式实现呢？</span></h1> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">Talk is cheap. Show me the code</span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 以下代码使用SQLite 3.18.0 测试通过</span>\r\n<span style=\"color: #0000ff;\">WITH</span>\r\n    <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">depts</span><span style=\"color: #ff0000;\">]</span>(<span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept_id</span><span style=\"color: #ff0000;\">]</span>) <span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\">(\r\n        </span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">d</span><span style=\"color: #ff0000;\">]</span>.<span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept_id</span><span style=\"color: #ff0000;\">]</span>\r\n        <span style=\"color: #0000ff;\">FROM</span>   <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">d</span><span style=\"color: #ff0000;\">]</span>\r\n               <span style=\"color: #808080;\">JOIN</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">employees</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">e</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #0000ff;\">ON</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">d</span><span style=\"color: #ff0000;\">]</span>.<span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept_id</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #808080;\">=</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">e</span><span style=\"color: #ff0000;\">]</span>.<span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept_id</span><span style=\"color: #ff0000;\">]</span>\r\n        <span style=\"color: #0000ff;\">WHERE</span>  <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">e</span><span style=\"color: #ff0000;\">]</span>.<span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">emp_name</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #808080;\">=</span> <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">西北-经理</span><span style=\"color: #ff0000;\">\'</span>\r\n        <span style=\"color: #0000ff;\">UNION</span> <span style=\"color: #808080;\">ALL</span>\r\n        <span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">d</span><span style=\"color: #ff0000;\">]</span>.<span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept_id</span><span style=\"color: #ff0000;\">]</span>\r\n        <span style=\"color: #0000ff;\">FROM</span>   <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">d</span><span style=\"color: #ff0000;\">]</span>\r\n               <span style=\"color: #808080;\">JOIN</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">depts</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">s</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #0000ff;\">ON</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">d</span><span style=\"color: #ff0000;\">]</span>.<span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">parent_id</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #808080;\">=</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">s</span><span style=\"color: #ff0000;\">]</span>.<span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept_id</span><span style=\"color: #ff0000;\">]</span><span style=\"color: #000000;\">\r\n    )\r\n</span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #808080;\">*</span>\r\n<span style=\"color: #0000ff;\">FROM</span>   <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">employees</span><span style=\"color: #ff0000;\">]</span>\r\n<span style=\"color: #0000ff;\">WHERE</span>  <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept_id</span><span style=\"color: #ff0000;\">]</span> <span style=\"color: #808080;\">IN</span> (<span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">dept_id</span><span style=\"color: #ff0000;\">]</span>\r\n       <span style=\"color: #0000ff;\">FROM</span>   <span style=\"color: #ff0000;\">[</span><span style=\"color: #ff0000;\">depts</span><span style=\"color: #ff0000;\">]</span>);</pre> \n</div> \n<p><span style=\"color: #000000;\"><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px;\">可能有些同学对CTE（Common Table Expression）还不太熟悉，这里简单说一下，有兴趣的同学可以google或者百度，介绍很多（这里以SQLite举例）：</span><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px;\">&nbsp;</span></span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">我还是更喜欢称CTE（Common Table Expression）为“公用表变量”而不是“公用表达式”，因为从行为和使用场景上讲，CTE更多的时候是产生（分迭代或者不迭代）结果集，供其后的语句使用（查询、插入、删除或更新），如上述的例子就是一个典型的利用迭代遍历树形结构数据。</span></p> \n<p><strong><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">CTE的优点：</span></strong></p> \n<ul> \n <li><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">递归的特点使得原本需要使用临时表、存储过程才能完成的逻辑，通过SQL就可以完成，尤其针对一些树或者是图的数据模型</span></li> \n <li><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">因为是会话内的临时结果集，不需要去显示的声明或销毁</span></li> \n <li><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">改写后的SQL语句可读性提高（看的明白才能修改）</span></li> \n <li><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">给数据库引擎优化执行计划的可能性（这个不是肯定的，需要根据具体CTE的实现有关），优化了执行计划，自然地性能就能上升</span></li> \n</ul> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">&nbsp;</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">为了更好的说明CTE的能力，这里附上两个例子（转自SQLite官网文档）</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><strong>曼德勃罗集合（Mandelbrot set）</strong></span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 以下代码使用SQLite 3.18.0 测试通过</span>\r\n<span style=\"color: #0000ff;\">WITH</span><span style=\"color: #000000;\"> RECURSIVE\r\n  xaxis(x) </span><span style=\"color: #0000ff;\">AS</span> (<span style=\"color: #0000ff;\">VALUES</span>(<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">2.0</span>) <span style=\"color: #0000ff;\">UNION</span> <span style=\"color: #808080;\">ALL</span> <span style=\"color: #0000ff;\">SELECT</span> x<span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">0.05</span> <span style=\"color: #0000ff;\">FROM</span> xaxis <span style=\"color: #0000ff;\">WHERE</span> x<span style=\"color: #808080;\">&lt;</span><span style=\"color: #800000; font-weight: bold;\">1.2</span><span style=\"color: #000000;\">),\r\n  yaxis(y) </span><span style=\"color: #0000ff;\">AS</span> (<span style=\"color: #0000ff;\">VALUES</span>(<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1.0</span>) <span style=\"color: #0000ff;\">UNION</span> <span style=\"color: #808080;\">ALL</span> <span style=\"color: #0000ff;\">SELECT</span> y<span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">0.1</span> <span style=\"color: #0000ff;\">FROM</span> yaxis <span style=\"color: #0000ff;\">WHERE</span> y<span style=\"color: #808080;\">&lt;</span><span style=\"color: #800000; font-weight: bold;\">1.0</span><span style=\"color: #000000;\">),\r\n  m(iter, cx, cy, x, y) </span><span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\"> (\r\n    </span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #800000; font-weight: bold;\">0</span>, x, y, <span style=\"color: #800000; font-weight: bold;\">0.0</span>, <span style=\"color: #800000; font-weight: bold;\">0.0</span> <span style=\"color: #0000ff;\">FROM</span><span style=\"color: #000000;\"> xaxis, yaxis\r\n    </span><span style=\"color: #0000ff;\">UNION</span> <span style=\"color: #808080;\">ALL</span>\r\n    <span style=\"color: #0000ff;\">SELECT</span> iter<span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">1</span>, cx, cy, x<span style=\"color: #808080;\">*</span>x<span style=\"color: #808080;\">-</span>y<span style=\"color: #808080;\">*</span>y <span style=\"color: #808080;\">+</span> cx, <span style=\"color: #800000; font-weight: bold;\">2.0</span><span style=\"color: #808080;\">*</span>x<span style=\"color: #808080;\">*</span>y <span style=\"color: #808080;\">+</span> cy <span style=\"color: #0000ff;\">FROM</span><span style=\"color: #000000;\"> m \r\n     </span><span style=\"color: #0000ff;\">WHERE</span> (x<span style=\"color: #808080;\">*</span>x <span style=\"color: #808080;\">+</span> y<span style=\"color: #808080;\">*</span>y) <span style=\"color: #808080;\">&lt;</span> <span style=\"color: #800000; font-weight: bold;\">4.0</span> <span style=\"color: #808080;\">AND</span> iter<span style=\"color: #808080;\">&lt;</span><span style=\"color: #800000; font-weight: bold;\">28</span><span style=\"color: #000000;\">\r\n  ),\r\n  m2(iter, cx, cy) </span><span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\"> (\r\n    </span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #ff00ff;\">max</span>(iter), cx, cy <span style=\"color: #0000ff;\">FROM</span> m <span style=\"color: #0000ff;\">GROUP</span> <span style=\"color: #0000ff;\">BY</span><span style=\"color: #000000;\"> cx, cy\r\n  ),\r\n  a(t) </span><span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\"> (\r\n    </span><span style=\"color: #0000ff;\">SELECT</span> group_concat( substr(<span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\"> .+*#</span><span style=\"color: #ff0000;\">\'</span>, <span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #808080;\">+</span><span style=\"color: #ff00ff;\">min</span>(iter<span style=\"color: #808080;\">/</span><span style=\"color: #800000; font-weight: bold;\">7</span>,<span style=\"color: #800000; font-weight: bold;\">4</span>), <span style=\"color: #800000; font-weight: bold;\">1</span>), <span style=\"color: #ff0000;\">\'\'</span><span style=\"color: #000000;\">) \r\n    </span><span style=\"color: #0000ff;\">FROM</span> m2 <span style=\"color: #0000ff;\">GROUP</span> <span style=\"color: #0000ff;\">BY</span><span style=\"color: #000000;\"> cy\r\n  )\r\n</span><span style=\"color: #0000ff;\">SELECT</span> group_concat(<span style=\"color: #ff00ff;\">rtrim</span>(t),x<span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">0a</span><span style=\"color: #ff0000;\">\'</span>) <span style=\"color: #0000ff;\">FROM</span> a;</pre> \n</div> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">运行后的结果，如下图：（使用SQLite Expert Personal 4.2 x64）</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px;\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/42a46319-27a3-42c2-95a7-2c4b2c876f96.png\" alt=\"\"></span></p> \n<p>&nbsp;</p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><strong>数独问题（Sudoku）</strong></span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">假设有类似下图的问题：</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">&nbsp;<img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/c7535798-951d-4419-834c-1fb53216f923.png\" alt=\"\"></span></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #008080;\">--</span><span style=\"color: #008080;\"> 以下代码使用SQLite 3.18.0 测试通过</span>\r\n<span style=\"color: #0000ff;\">WITH</span><span style=\"color: #000000;\"> RECURSIVE\r\n  input(sud) </span><span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\"> (\r\n    </span><span style=\"color: #0000ff;\">VALUES</span>(<span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\">)\r\n  ),\r\n  digits(z, lp) </span><span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\"> (\r\n    </span><span style=\"color: #0000ff;\">VALUES</span>(<span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">1</span><span style=\"color: #ff0000;\">\'</span>, <span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)\r\n    </span><span style=\"color: #0000ff;\">UNION</span> <span style=\"color: #808080;\">ALL</span> <span style=\"color: #0000ff;\">SELECT</span>\r\n    <span style=\"color: #ff00ff;\">CAST</span>(lp<span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #0000ff;\">AS</span> <span style=\"color: #0000ff;\">TEXT</span>), lp<span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">1</span> <span style=\"color: #0000ff;\">FROM</span> digits <span style=\"color: #0000ff;\">WHERE</span> lp<span style=\"color: #808080;\">&lt;</span><span style=\"color: #800000; font-weight: bold;\">9</span><span style=\"color: #000000;\">\r\n  ),\r\n  x(s, ind) </span><span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\"> (\r\n    </span><span style=\"color: #0000ff;\">SELECT</span> sud, instr(sud, <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">.</span><span style=\"color: #ff0000;\">\'</span>) <span style=\"color: #0000ff;\">FROM</span><span style=\"color: #000000;\"> input\r\n    </span><span style=\"color: #0000ff;\">UNION</span> <span style=\"color: #808080;\">ALL</span>\r\n    <span style=\"color: #0000ff;\">SELECT</span><span style=\"color: #000000;\">\r\n      substr(s, </span><span style=\"color: #800000; font-weight: bold;\">1</span>, ind<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1</span>) <span style=\"color: #808080;\">||</span> z <span style=\"color: #808080;\">||</span> substr(s, ind<span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">),\r\n      instr( substr(s, </span><span style=\"color: #800000; font-weight: bold;\">1</span>, ind<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1</span>) <span style=\"color: #808080;\">||</span> z <span style=\"color: #808080;\">||</span> substr(s, ind<span style=\"color: #808080;\">+</span><span style=\"color: #800000; font-weight: bold;\">1</span>), <span style=\"color: #ff0000;\">\'</span><span style=\"color: #ff0000;\">.</span><span style=\"color: #ff0000;\">\'</span><span style=\"color: #000000;\"> )\r\n     </span><span style=\"color: #0000ff;\">FROM</span> x, digits <span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\"> z\r\n    </span><span style=\"color: #0000ff;\">WHERE</span> ind<span style=\"color: #808080;\">&gt;</span><span style=\"color: #800000; font-weight: bold;\">0</span>\r\n      <span style=\"color: #808080;\">AND</span> <span style=\"color: #808080;\">NOT</span> <span style=\"color: #808080;\">EXISTS</span><span style=\"color: #000000;\"> (\r\n            </span><span style=\"color: #0000ff;\">SELECT</span> <span style=\"color: #800000; font-weight: bold;\">1</span>\r\n              <span style=\"color: #0000ff;\">FROM</span> digits <span style=\"color: #0000ff;\">AS</span><span style=\"color: #000000;\"> lp\r\n             </span><span style=\"color: #0000ff;\">WHERE</span> z.z <span style=\"color: #808080;\">=</span> substr(s, ((ind<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1</span>)<span style=\"color: #808080;\">/</span><span style=\"color: #800000; font-weight: bold;\">9</span>)<span style=\"color: #808080;\">*</span><span style=\"color: #800000; font-weight: bold;\">9</span> <span style=\"color: #808080;\">+</span> lp, <span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)\r\n                </span><span style=\"color: #808080;\">OR</span> z.z <span style=\"color: #808080;\">=</span> substr(s, ((ind<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1</span>)<span style=\"color: #808080;\">%</span><span style=\"color: #800000; font-weight: bold;\">9</span>) <span style=\"color: #808080;\">+</span> (lp<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1</span>)<span style=\"color: #808080;\">*</span><span style=\"color: #800000; font-weight: bold;\">9</span> <span style=\"color: #808080;\">+</span> <span style=\"color: #800000; font-weight: bold;\">1</span>, <span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)\r\n                </span><span style=\"color: #808080;\">OR</span> z.z <span style=\"color: #808080;\">=</span> substr(s, (((ind<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1</span>)<span style=\"color: #808080;\">/</span><span style=\"color: #800000; font-weight: bold;\">3</span>) <span style=\"color: #808080;\">%</span> <span style=\"color: #800000; font-weight: bold;\">3</span>) <span style=\"color: #808080;\">*</span> <span style=\"color: #800000; font-weight: bold;\">3</span>\r\n                        <span style=\"color: #808080;\">+</span> ((ind<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1</span>)<span style=\"color: #808080;\">/</span><span style=\"color: #800000; font-weight: bold;\">27</span>) <span style=\"color: #808080;\">*</span> <span style=\"color: #800000; font-weight: bold;\">27</span> <span style=\"color: #808080;\">+</span><span style=\"color: #000000;\"> lp\r\n                        </span><span style=\"color: #808080;\">+</span> ((lp<span style=\"color: #808080;\">-</span><span style=\"color: #800000; font-weight: bold;\">1</span>) <span style=\"color: #808080;\">/</span> <span style=\"color: #800000; font-weight: bold;\">3</span>) <span style=\"color: #808080;\">*</span> <span style=\"color: #800000; font-weight: bold;\">6</span>, <span style=\"color: #800000; font-weight: bold;\">1</span><span style=\"color: #000000;\">)\r\n         )\r\n  )\r\n</span><span style=\"color: #0000ff;\">SELECT</span> s <span style=\"color: #0000ff;\">FROM</span> x <span style=\"color: #0000ff;\">WHERE</span> ind<span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">0</span>;</pre> \n</div> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">执行结果（结果中的数字就是对应格子中的答案）</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/ef22315c-05fb-452b-a8f8-967b445a7c70.png\" alt=\"\"></span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">附：SQLite中CTE（WITH关键字）语法图解：</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">WITH</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/9508b12d-9cf7-4245-9eae-f72d9dd2b1c7.gif\" alt=\"\"></span></p> \n<p>&nbsp;</p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">cte-table-name</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/0f4d9cf3-7e85-4ba3-9fc3-28e38cd371b6.gif\" alt=\"\"></span></p> \n<p>&nbsp;</p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">Select-stmt:</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/ce5863b7-968d-4fcb-b974-784be6021385.gif\" alt=\"\"></span></p> \n<p>&nbsp;</p> \n<h1><span style=\"font-family: \'Microsoft YaHei\'; font-size: 18px; color: #000000;\">总结</span></h1> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\">CTE是解决一些特定问题的利器，但了解和正确的使用是前提，在决定将已有的一些SQL重构为CTE之前，确保对已有语句有清晰的理解以及对CTE足够的学习！Good Luck~~~</span></p> \n<p><span style=\"font-family: \'Microsoft YaHei\'; font-size: 16px; color: #000000;\"><strong>附件</strong>：<a href=\"http://files.cnblogs.com/files/powertoolsteam/cteofsqlite.zip\" target=\"_blank\">用到的SQL脚本</a></span></p>',NULL,'2017-04-24 16:00:30',0,0,NULL,'http://www.cnblogs.com/powertoolsteam/p/sqlite.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (46,'图解WebGL&Three.js工作原理','<p style=\"height: 200px; background: #eee; padding: 20px; font-size: 14px; line-height: 2;\"><img style=\"float: left; margin-right: 10px;\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/21cefbe5-4d0e-4d75-bcf8-778d95976046.gif\" alt=\"\"><span style=\"color: #339966;\">“哥，你又来啦？”</span><br>“是啊，我随便逛逛。”<br><span style=\"color: #339966;\">“别介啊……给我20分钟，成不？”</span><br>“5分钟吧，我很忙的。”<br><span style=\"color: #339966;\">“不行，<span style=\"color: #ff0000;\">20分钟</span>，不然我真很难跟你讲清楚。”</span><br>“好吧……”<br><span style=\"color: #339966;\">“行，那进来吧，咱好好聊聊”</span></p> \n<h3>&nbsp;</h3> \n<h3>一、我们讲什么？</h3> \n<p>我们讲两个东西：<br>1、WebGL背后的工作原理是什么？<br>2、以Three.js为例，讲述框架在背后扮演什么样的角色？</p> \n<p>&nbsp;</p> \n<h3>二、我们为什么要了解原理？</h3> \n<p>我们假定你对WebGL已经有一定了解，或者用Three.js做过了一些东西，这个时候，你可能碰到了这样一些问题：<br>1、很多东西还是做不出来，甚至没有任何思路；<br>2、碰到bug无法解决，甚至没有方向；<br>3、性能出现问题，完全不知道如何去优化。<br>这个时候，我们需要了解更多。</p> \n<p>&nbsp;</p> \n<h3>三、先了解一个基础概念&nbsp;</h3> \n<p>1、什么是矩阵？<br>简单说来，矩阵用于坐标变换，如下图：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/03fea503-0bbf-4276-83e0-7839cee9b1c6.png\" alt=\"\" width=\"434\"></p> \n<p><br>2、那它具体是怎么变换的呢，如下图：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/1507826f-8b6e-4f58-8ca5-7a8d84207417.png\" alt=\"\"></p> \n<p><br>3、举个实例，将坐标平移2，如下图：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/9deb4e0b-655c-44d6-aa7d-e63d19101da1.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p>如果这时候，你还是没有理解，没有关系，你只需要知道，矩阵用于坐标变换。</p> \n<p>&nbsp;</p> \n<h3>四、WebGL的工作原理</h3> \n<h4>4.1、WebGL API</h4> \n<p>在了解一门新技术前，我们都会先看看它的开发文档或者API。<br>查看Canvas的绘图API，我们会发现它能画直线、矩形、圆、弧线、贝塞尔曲线。<br>于是，我们看了看WebGL绘图API，发现：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/6792c7da-dea0-4176-8704-75542ce6aaaa.png\" alt=\"\"></p> \n<p>它只能会点、线、三角形？一定是我看错了。<br>没有，你没看错。<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/f2c07fed-5001-4d31-8e30-86fd4b90cdbc.png\" alt=\"\"></p> \n<p>就算是这样一个复杂的模型，也是一个个三角形画出来的。</p> \n<p>&nbsp;</p> \n<h4>4.2、WebGL绘制流程</h4> \n<p>简单说来，WebGL绘制过程包括以下三步：<br>1、获取顶点坐标<br>2、图元装配（即画出一个个三角形）<br>3、光栅化（生成片元，即一个个像素点）<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/95c3acc6-151e-4c42-8d0f-9af38373b4a4.png\" alt=\"\" width=\"940\"><br><br>接下来，我们分步讲解每个步骤。</p> \n<p>&nbsp;</p> \n<h4>4.2.1、获取顶点坐标</h4> \n<p>顶点坐标从何而来呢？一个立方体还好说，如果是一个机器人呢？<br>没错，我们不会一个一个写这些坐标。<br>往往它来自三维软件导出，或者是框架生成，如下图：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/101fecf4-ff0f-44d4-b9f8-918caa80f4c9.png\" alt=\"\" width=\"938\"></p> \n<p>写入缓存区是啥？<br>没错，为了简化流程，之前我没有介绍。<br>由于顶点数据往往成千上万，在获取到顶点坐标后，我们通常会将它存储在显存，即缓存区内，方便GPU更快读取。</p> \n<p>&nbsp;</p> \n<h4>4.2.2、图元装配</h4> \n<p>我们已经知道，图元装配就是由顶点生成一个个图元（即三角形）。那这个过程是自动完成的吗？答案是并非完全如此。<br>为了使我们有更高的可控性，即自由控制顶点位置，WebGL把这个权力交给了我们，这就是可编程渲染管线（不用理解）。<br>WebGL需要我们先处理顶点，那怎么处理呢？我们先看下图：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/2f3460d6-8e3b-46f6-bca7-82d15078d705.png\" alt=\"\" width=\"934\"></p> \n<p>我们引入了一个新的名词，叫“顶点着色器”，它由opengl es编写，由javascript以字符串的形式定义并传递给GPU生成。<br>比如如下就是一段顶点着色器代码：</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:cpp;gutter:true;\">attribute vec4 position;\r\nvoid main() {\r\n  gl_Position = position;  \r\n}</pre> \n</div> \n<p>attribute修饰符用于声明由浏览器（javascript）传输给顶点着色器的变量值；<br>position即我们定义的顶点坐标；<br>gl_Position是一个内建的传出变量。<br>这段代码什么也没做，如果是绘制2d图形，没问题，但如果是绘制3d图形，即传入的顶点坐标是一个三维坐标，我们则需要转换成屏幕坐标。<br>比如：v(-0.5, 0.0, 1.0)转换为p(0.2, -0.4)，这个过程类似我们用相机拍照。</p> \n<p>&nbsp;</p> \n<h4>4.2.2.1、顶点着色器处理流程</h4> \n<p><br>回到刚才的话题，顶点着色器是如何处理顶点坐标的呢？<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/89d63e84-41ea-4a9f-84e3-dbbc89034a24.png\" alt=\"\" width=\"937\"><br>如上图，顶点着色器会先将坐标转换完毕，然后由GPU进行图元装配，有多少顶点，这段顶点着色器程序就运行了多少次。<br>你可能留意到，这时候顶点着色器变为：</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:cpp;gutter:true;\">attribute vec4 position;\r\nuniform mat4 matrix;\r\nvoid main() {\r\n  gl_Position = position * matrix;  \r\n}\r\n</pre> \n</div> \n<p>这就是应用了矩阵matrix，将三维世界坐标转换成屏幕坐标，这个矩阵叫投影矩阵，由javascript传入，至于这个matrix怎么生成，我们暂且不讨论。</p> \n<p>&nbsp;</p> \n<h4>4.2.3、光栅化</h4> \n<p>和图元装配类似，光栅化也是可控的。<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/75624366-de4c-4275-bbc1-559e9493062b.png\" alt=\"\" width=\"941\"><br>在图元生成完毕之后，我们需要给模型“上色”，而完成这部分工作的，则是运行在GPU的“片元着色器”来完成。<br>它同样是一段opengl es程序，模型看起来是什么质地（颜色、漫反射贴图等）、灯光等由片元着色器来计算。<br>如下是一段简单的片元着色器代码：</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:cpp;gutter:true;\">precision mediump float;  \r\nvoid main(void) { \r\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); \r\n} \r\n</pre> \n</div> \n<p>gl_FragColor即输出的颜色值。</p> \n<p>&nbsp;</p> \n<h4>4.2.3.1、片元着色器处理流程</h4> \n<p>片元着色器具体是如何控制颜色生成的呢？<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/4a2939d0-9b72-4cd4-b552-5a1338f7ef7a.png\" alt=\"\" width=\"954\"><br>如上图，顶点着色器是有多少顶点，运行了多少次，而片元着色器则是，生成多少片元（像素），运行多少次。</p> \n<p>&nbsp;</p> \n<h4>4.3、WebGL的完整工作流程</h4> \n<p>至此，实质上，WebGL经历了如下处理流程：<br><strong>1、准备数据阶段</strong><br>在这个阶段，我们需要提供顶点坐标、索引（三角形绘制顺序）、uv（决定贴图坐标）、法线（决定光照效果），以及各种矩阵（比如投影矩阵）。<br>其中顶点数据存储在缓存区（因为数量巨大），以修饰符attribute传递给顶点着色器；<br>矩阵则以修饰符uniform传递给顶点着色器。<br><strong>2、生成顶点着色器</strong><br>根据我们需要，由Javascript定义一段顶点着色器（opengl es）程序的字符串，生成并且编译成一段着色器程序传递给GPU。<br><strong>3、图元装配</strong><br>GPU根据顶点数量，挨个执行顶点着色器程序，生成顶点最终的坐标，完成坐标转换。<br><strong>4、生成片元着色器</strong><br>模型是什么颜色，看起来是什么质地，光照效果，阴影（流程较复杂，需要先渲染到纹理，可以先不关注），都在这个阶段处理。<br><strong>5、光栅化</strong><br>能过片元着色器，我们确定好了每个片元的颜色，以及根据深度缓存区判断哪些片元被挡住了，不需要渲染，最终将片元信息存储到颜色缓存区，最终完成整个渲染。</p> \n<p><br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/90b01fed-48c8-429f-a48d-6808a82cb464.png\" alt=\"\" width=\"982\"></p> \n<p>&nbsp;</p> \n<h3>五、Three.js究竟做了什么？</h3> \n<p>我们知道，three.js帮我们完成了很多事情，但是它具体做了什么呢，他在整个流程中，扮演了什么角色呢？<br>我们先简单看一下，three.js参与的流程：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/71de10b9-f8de-4e57-8f0a-deb473e15df4.png\" alt=\"\" width=\"981\"></p> \n<p>&nbsp;</p> \n<p><br>黄色和绿色部分，都是three.js参与的部分，其中黄色是javascript部分，绿色是opengl es部分。<br>我们发现，能做的，three.js基本上都帮我们做了。</p> \n<ul> \n <li>辅助我们导出了模型数据；</li> \n <li>自动生成了各种矩阵；</li> \n <li>生成了顶点着色器；</li> \n <li>辅助我们生成材质，配置灯光；</li> \n <li>根据我们设置的材质生成了片元着色器。</li> \n</ul> \n<p>而且将webGL基于光栅化的2D API，封装成了我们人类能看懂的 3D API。</p> \n<p>&nbsp;</p> \n<h4>5.1、Three.js顶点处理流程</h4> \n<p>从WebGL工作原理的章节中，我们已经知道了顶点着色器会将三维世界坐标转换成屏幕坐标，但实际上，坐标转换不限于投影矩阵。<br>如下图：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/777bedf7-db20-4bcd-94de-c0806a78da8f.png\" alt=\"\" width=\"993\"></p> \n<p>之前WebGL在图元装配之后的结果，由于我们认为模型是固定在坐标原点，并且相机在x轴和y轴坐标都是0，其实正常的结果是这样的：</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/f6579d6d-59b2-47c9-a528-40c6129f7bad.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><strong>5.1.1、模型矩阵</strong><br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/84a90c2b-f6c2-46f5-bf38-4ec60e059a38.png\" alt=\"\"></p> \n<p>现在，我们将模型顺时针旋转Math.PI/6，所有顶点位置肯定都变化了。</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:javascript;gutter:true;\">box.rotation.y = Math.PI/6;</pre> \n</div> \n<p>但是，如果我们直接将顶点位置用javascript计算出来，那性能会很低（顶点通常成千上万），而且，这些数据也非常不利于维护。<br>所以，我们用矩阵modelMatrix将这个旋转信息记录下来。</p> \n<p>&nbsp;</p> \n<p><strong>5.1.2、视图矩阵</strong><br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/634f037c-0e98-4392-bbc5-67c796211492.png\" alt=\"\"></p> \n<p>然后，我们将相机往上偏移30。</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:javascript;gutter:true;\">camera.position.y = 30;\r\n</pre> \n</div> \n<p>同理，我们用矩阵viewMatrix将移动信息记录下来。</p> \n<p>&nbsp;</p> \n<p><strong>5.1.3、投影矩阵</strong><br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/3fdf9ca2-375c-49aa-aa1d-55b15e901773.png\" alt=\"\"></p> \n<p>这是我们之前介绍过的了，我们用projectMatrix记录。</p> \n<p>&nbsp;</p> \n<p><strong>5.1.4、应用矩阵</strong></p> \n<p>然后，我们编写顶点着色器：</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:cpp;gutter:true;\">gl_Position = position * modelMatrix * viewMatrix * projectionMatrix;\r\n</pre> \n</div> \n<p>这样，我们就在GPU中，将最终顶点位置计算出来了。<br>实际上，上面所有步骤，three.js都帮我们完成了。<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/9e88d091-de6a-450c-b4ef-a02976e12c4a.png\" alt=\"\" width=\"1001\"></p> \n<p>&nbsp;</p> \n<h4>5.2、片元着色器处理流程</h4> \n<p>我们已经知道片元着色器负责处理材质、灯光等信息，但具体是怎么处理呢？<br>如下图：<br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/199b26e5-dd0f-4f43-96b9-e5880ad58ebc.png\" alt=\"\" width=\"999\"></p> \n<h4>&nbsp;</h4> \n<h4>5.3、three.js完整运行流程：</h4> \n<p><br><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/231a9b1f-c4ef-48d8-a4a1-36e4573048c7.png\" alt=\"\" width=\"1008\"></p> \n<p>&nbsp;</p> \n<p>当我们选择材质后，three.js会根据我们所选的材质，选择对应的顶点着色器和片元着色器。<br>three.js中已经内置了我们常用着色器。</p> \n<p>&nbsp;</p> \n<p>全文完。</p>',NULL,'2017-04-24 16:00:55',0,0,NULL,'http://www.cnblogs.com/wanbo/p/6754066.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (47,'.net core 下的TagHelper自定义新手提醒','<p>最近一直在学习.net core 最近刚开始学习Taghelper的自定义。今天我发现了微软官方文档的一个错误，觉得立马要和大家分享出来，免得后边的人和我走一样的弯路</p> \n<p>&nbsp;首先这是微软官网关于TagHelper的自定义使用说明链接<a title=\"nihaoshijie_qu\" href=\"https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring\" target=\"_blank\">&nbsp;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring</a>&nbsp;无奈我的英语水平不太好，勉强还能看懂。</p> \n<p>&nbsp; &nbsp; &nbsp;在这一章 这一小节&nbsp;<strong>Passing a model to a Tag Helper&nbsp;</strong>的说明中&nbsp;</p> \n<p>　　　　首先声明了Models 文件夹下声明一个类&nbsp;</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #008080\">1</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> WebsiteContext\n</span><span style=\"color: #008080\">2</span> <span style=\"color: #000000\">    {\n</span><span style=\"color: #008080\">3</span>         <span style=\"color: #0000ff\">public</span> Version Version { <span style=\"color: #0000ff\">get</span>; <span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n</span><span style=\"color: #008080\">4</span>         <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">int</span> CopyrightYear { <span style=\"color: #0000ff\">get</span>; <span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n</span><span style=\"color: #008080\">5</span>         <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">bool</span> Approved { <span style=\"color: #0000ff\">get</span>; <span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n</span><span style=\"color: #008080\">6</span>         <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">int</span> TagsToShow { <span style=\"color: #0000ff\">get</span>; <span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n</span><span style=\"color: #008080\">7</span>     }</pre> \n</div> \n<p>　　　　接下来他的自定义TagHelper要使用这个类&nbsp;</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #008080\"> 1</span>   <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> WebsiteInformationTagHelper : TagHelper\n</span><span style=\"color: #008080\"> 2</span> <span style=\"color: #000000\">    {\n</span><span style=\"color: #008080\"> 3</span>         <span style=\"color: #0000ff\">public</span> WebsiteContext Info { <span style=\"color: #0000ff\">get</span>; <span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n</span><span style=\"color: #008080\"> 4</span> \n<span style=\"color: #008080\"> 5</span>       <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">override</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Process(TagHelperContext context, TagHelperOutput output)\n</span><span style=\"color: #008080\"> 6</span> <span style=\"color: #000000\">      {\n</span><span style=\"color: #008080\"> 7</span>          output.TagName = <span style=\"color: #800000\">\"</span><span style=\"color: #800000\">section</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 8</span> <span style=\"color: #000000\">         output.Content.SetHtmlContent(\n</span><span style=\"color: #008080\"> 9</span> $<span style=\"color: #800000\">@\"</span><span style=\"color: #800000\">&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Version:&lt;/strong&gt; {Info.Version}&lt;/li&gt;\n</span><span style=\"color: #008080\">10</span> <span style=\"color: #800000\">&lt;li&gt;&lt;strong&gt;Copyright Year:&lt;/strong&gt; {Info.CopyrightYear}&lt;/li&gt;\n</span><span style=\"color: #008080\">11</span> <span style=\"color: #800000\">&lt;li&gt;&lt;strong&gt;Approved:&lt;/strong&gt; {Info.Approved}&lt;/li&gt;\n</span><span style=\"color: #008080\">12</span> <span style=\"color: #800000\">&lt;li&gt;&lt;strong&gt;Number of tags to show:&lt;/strong&gt; {Info.TagsToShow}&lt;/li&gt;&lt;/ul&gt;</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">);\n</span><span style=\"color: #008080\">13</span>          output.TagMode =<span style=\"color: #000000\"> TagMode.StartTagAndEndTag;\n</span><span style=\"color: #008080\">14</span> <span style=\"color: #000000\">      }\n</span><span style=\"color: #008080\">15</span>    }</pre> \n</div> \n<p>&nbsp;　　　　在接下来在前台他要是用这个TagHelper</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #008080\"> 1</span> <span style=\"color: #000000\">@using AuthoringTagHelpers.Models\n</span><span style=\"color: #008080\"> 2</span> <span style=\"color: #000000\">@{\n</span><span style=\"color: #008080\"> 3</span>     ViewData[<span style=\"color: #800000\">\"</span><span style=\"color: #800000\">Title</span><span style=\"color: #800000\">\"</span>] = <span style=\"color: #800000\">\"</span><span style=\"color: #800000\">About</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 4</span> <span style=\"color: #000000\">}\n</span><span style=\"color: #008080\"> 5</span> &lt;h2&gt;@ViewData[<span style=\"color: #800000\">\"</span><span style=\"color: #800000\">Title</span><span style=\"color: #800000\">\"</span>].&lt;/h2&gt;\n<span style=\"color: #008080\"> 6</span> &lt;h3&gt;@ViewData[<span style=\"color: #800000\">\"</span><span style=\"color: #800000\">Message</span><span style=\"color: #800000\">\"</span>]&lt;/h3&gt;\n<span style=\"color: #008080\"> 7</span> \n<span style=\"color: #008080\"> 8</span> &lt;p bold&gt;Use <span style=\"color: #0000ff\">this</span> area to provide additional information.&lt;/p&gt;\n<span style=\"color: #008080\"> 9</span> \n<span style=\"color: #008080\">10</span> &lt;bold&gt; Is <span style=\"color: #0000ff\">this</span> bold?&lt;/bold&gt;\n<span style=\"color: #008080\">11</span> \n<span style=\"color: #008080\">12</span> &lt;h3&gt; web site info &lt;/h3&gt;\n<span style=\"color: #008080\">13</span> &lt;website-information info=<span style=\"color: #800000\">\"</span><span style=\"color: #800000\">new WebsiteContext {</span>\n<span style=\"color: #008080\">14</span>                                     Version = <span style=\"color: #0000ff\">new</span> Version(<span style=\"color: #800080\">1</span>, <span style=\"color: #800080\">3</span><span style=\"color: #000000\">),\n</span><span style=\"color: #008080\">15</span>                                     CopyrightYear = <span style=\"color: #800080\">1638</span><span style=\"color: #000000\">,\n</span><span style=\"color: #008080\">16</span>                                     Approved = <span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">,\n</span><span style=\"color: #008080\">17</span>                                     TagsToShow = <span style=\"color: #800080\">131</span> }<span style=\"color: #800000\">\"</span><span style=\"color: #800000\"> /&gt;</span></pre> \n</div> \n<p>&nbsp; &nbsp;　　　这个就是他的使用过程 。</p> \n<p>　　　　如果 按照他的说明这样做完之后你会发现根本不行，浏览器报错 &nbsp;错误很明显 无法将Version类型转化为String类型</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/6959fa8a-da3d-4ce5-80ac-f90af677cb8e.png\" alt=\"\"></p> \n<p>好了这里改一下&nbsp;</p> \n<div class=\"cnblogs_code\"> \n <pre>&lt;Website-Information info=<span style=\"color: #800000\">\"</span><span style=\"color: #800000\">new WebSiteContext {</span>\n<span style=\"color: #ff0000\">                                   \n                                  Version = new string(\'1\', 3</span><span style=\"color: #000000\"><span style=\"color: #ff0000\">),</span>\n                                    CopyrightYear </span>= <span style=\"color: #800080\">1638</span><span style=\"color: #000000\">,\n                                    Approved </span>= <span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">,\n                                    TagsToShow </span>= <span style=\"color: #800080\">131</span> }<span style=\"color: #800000\">\"</span><span style=\"color: #800000\"> &gt;&lt;/Website-Information&gt;</span></pre> \n</div> \n<p>&nbsp;</p> \n<p>&nbsp;这会测试的时候改完之后就可以直接运行了。原来在改之后还会出现一个错误。 &nbsp;&lt;Website-Information info=\"......\"&gt;&lt;/Website-Information&gt;会报出无法识别 <span style=\"color: #ff0000\">info</span>这个属性， 给大家分析一下 首先Website-Information这个Tag是原本都没有的，是我们自己定义的。所以它本身也就不存在什么属性，而这里直接使用它的info属性。它肯定无法识别，所以在这里我们需要对其自定义的时候加上这个属性，让编译器能够识别 。</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> WebsiteInfomationTagHelper : TagHelper\n    {\n        </span><span style=\"color: #0000ff\">public</span> WebSiteContext Info { <span style=\"color: #0000ff\">get</span>; <span style=\"color: #0000ff\">set</span><span style=\"color: #000000\">; }\n        </span><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">override</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Process(TagHelperContext context, TagHelperOutput output)\n        {\n\n            output.TagName </span>= <span style=\"color: #800000\">\"</span><span style=\"color: #800000\">section</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">;\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\">如果说添加的属性不存在用add方法</span>\n          <span style=\"color: #ff0000\">  output.Attributes.Add(\"info\", Info);\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\">添加的属性存在则用setAttribute方法\n            </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\">output.Attributes.SetAttribute(\"info\", info);</span>\n<span style=\"color: #000000\">            output.Content.SetHtmlContent(\n                $</span><span style=\"color: #800000\">@\"</span><span style=\"color: #800000\">&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Version:&lt;/strong&gt; {Info.Version}&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Copyright Year:&lt;/strong&gt; {Info.CopyrightYear}&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Approved:&lt;/strong&gt; {Info.Approved}&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Number of tags to show:&lt;/strong&gt; {Info.TagsToShow}&lt;/li&gt;&lt;/ul&gt;</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">\n                );\n            output.TagMode</span>=<span style=\"color: #000000\">TagMode.StartTagAndEndTag;\n\n        }\n    }</span></pre> \n</div> \n<p>　　　　这样进行一番修改之后就可以运行了 这是运行的结果</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/cf6195d1-881c-4dac-b072-969245452ba6.png\" alt=\"\"></p> \n<p>&nbsp;　　　　可能本人才疏学浅。毕竟刚开始学没两天。有什么问题欢迎在评论区评论。我会第一时间进行回复。希望大家一起帮助一起成长。</p>',NULL,'2017-04-24 16:00:58',0,0,NULL,'http://www.cnblogs.com/qulianqing/p/6756271.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (48,'WPF 杂谈——入门介绍','<p>对于WPF的技术笔者是又爱又恨。现在WPF的市场并不是很锦气。如果以WPF来吃饭的话，只怕会饿死在街头。同时现在向面WEB开发更是如火冲天。所以如果是新生的话，最好不要以WPF为主。做为选择性来学习一下还是可以的。</p> \n<h3>WPF项目</h3> \n<p>在VS开发工具里面对于WPF应用相关的项目类型有三种。本来在笔者看来他可能会单独存在一个地方，后来想想也对，WPF也算是Window开发吧。那么WPF的三种项目类型都在模板Window节点下也是正常的。如下</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/2138a7b8-d2ee-49a4-83f6-c7444141cd4d.png\" alt=\"\"></p> \n<p>对于\"WPF 应用程序\"项目相信大家都知道——执行项目。唯一笔者不明白的事为什么会有俩个控件库项目。明文上我们可以看到一个是用户，一个是自定义。那么俩者之间有什么不同的地方吗？笔者是这样子理解的：<span style=\"color: #ff0000\">用法上来讲用户控件主要用于业务上的重用。这跟Winform用户控件有一点类似。很多控件都是当前存在的。土气讲就是把原本就有的控件拉到同一个框中组成了新的控件。而自定义控件则是在原来控件上在进一步的继承扩展。相当于说是一个全新的控件。</span>功能上来讲不管理用户还是自定义俩者都可以实现对方的功能。但是在笔者看来自定义会来的深一些。自定义控件会去重新设定Style和Template。(为了更好的理解可以去 <a href=\"http://www.wpftutorial.net/CustomVsUserControl.html\" target=\"_blank\">这里</a>) 所以在新建项目之后会存在一定的差别。如下</p> \n<p>用户控件项目</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/f7895acb-ac26-4a4d-be4c-9613eeaa6f54.png\" alt=\"\"></p> \n<p>自定义控件项目</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/2ef23d3c-4da1-43e8-b863-1d914c9d5b2c.png\" alt=\"\"></p> \n<p>不管是WinForm开发还是WPF开发。我们都能看到Application类的影子。这种作法笔者真的不是很喜欢。很容易把俩者放在一起。新建一个WPF应用项目之后，会生成俩个Xaml文件。如下</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/26411be3-a82e-428a-87be-b564261aec82.png\" alt=\"\"></p> \n<p>App.xaml就是一个继承Application类的子类。对应的WPF运行都要通他来完成了。但是往往很有多人不是很喜欢WPF默认的这种方式。总是想要变成WinForm类似的方式启动。可能还是忘不了WinForm吧。至少笔者也有一点。如何去实现呢？</p> \n<p>即然都是Window应用开发的话，笔者想一定离不开Main函数吧。可是笔者点开了相关的源码文件，硬是没有找到相应的Main函数。后来通过下面的方式找到了。原来在App.g.i.cs文件里面。也因此了解了。App.Xaml是有属性类型的。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/861a039f-abf6-4163-a557-1afa10e81fed.png\" alt=\"\"></p> \n<p>所谓的属性类型是指App.xaml的属性中的“生成操作”部分。我们可以发现他默认是ApplicationDefinition。只要是ApplicationDefinition的话，他就是会默认生成Main函数。如下。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/f2a49378-11c6-45f6-b6cd-371d9b392ebd.png\" alt=\"\"></p> \n<p>明白了上面的机制之后就简单多了。把App.xaml的属性设置成Page，同时创建一个叫Program类。代码如下。</p> \n<div class=\"cnblogs_code\"> \n <pre> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span><span style=\"color: #000000\"> Program\n    {\n        [System.STAThreadAttribute()]\n        [System.Diagnostics.DebuggerNonUserCodeAttribute()]\n        [System.CodeDom.Compiler.GeneratedCodeAttribute(</span><span style=\"color: #800000\">\"</span><span style=\"color: #800000\">PresentationBuildTasks</span><span style=\"color: #800000\">\"</span>, <span style=\"color: #800000\">\"</span><span style=\"color: #800000\">4.0.0.0</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">)]\n        </span><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> Main()\n        {\n            WpfApplication2.App app </span>= <span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> WpfApplication2.App();\n            app.InitializeComponent();\n            app.Run();\n        }\n    }</span></pre> \n</div> \n<p>从上面的讲述中，我们可以知道一点：App.xaml好像是有种类的。如果是一个ApplicationDefinition的话，就可以启动项目直接调用。即是你把Main函数删除掉他也可以自动帮你生成。如果是Page的话，那就SORRY了。你必须自己手动增加Main函数。这对于一个.NET开发人员来讲并不难。正如笔者所讲的就跟Winfrom入口函数一个样子。</p> \n<h3>WPF界面</h3> \n<p>WPF在外观的编程做法是让笔者最满意的地方。他不在像传统WinForm那样子死板。而引入类似于B/S模式的方式。相信大家都听过CSS样式。没有错。很像。什么意思呢？WinForm的界面编辑可以说决对是一个很死板的方式。WPF界面引用了XAML来编辑。也许也正因为这样子才让界面更加的独立起来。同时让我们在美化界面更加的灵动和方便 。因为他也有一个跟HTML网页一样子的概念——样式(Style)。如下（引用于开源项目（Modern UI for WPF））</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #008080\"> 1</span>     <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Style </span><span style=\"color: #ff0000\">x:Key</span><span style=\"color: #0000ff\">=\"SystemButton\"</span><span style=\"color: #ff0000\"> TargetType</span><span style=\"color: #0000ff\">=\"ButtonBase\"</span><span style=\"color: #ff0000\"> BasedOn</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{StaticResource SystemButtonBase}</span><span style=\"color: #0000ff\">\"</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\"> 2</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Setter </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"Width\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"32\"</span> <span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #008080\"> 3</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Setter </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"Height\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"24\"</span> <span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #008080\"> 4</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Setter </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"Foreground\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{DynamicResource ButtonText}</span><span style=\"color: #0000ff\">\"</span><span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #008080\"> 5</span>         <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Style.Triggers</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\"> 6</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Trigger </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"IsMouseOver\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"True\"</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\"> 7</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Setter </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"Background\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{DynamicResource ButtonBackgroundHover}</span><span style=\"color: #0000ff\">\"</span> <span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #008080\"> 8</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Setter </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"Foreground\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{DynamicResource ButtonTextHover}</span><span style=\"color: #0000ff\">\"</span><span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #008080\"> 9</span>             <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Trigger</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\">10</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Trigger </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"IsPressed\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"True\"</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\">11</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Setter </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"Background\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{DynamicResource ButtonBackgroundPressed}</span><span style=\"color: #0000ff\">\"</span> <span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #008080\">12</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Setter </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"Foreground\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{DynamicResource ButtonTextPressed}</span><span style=\"color: #0000ff\">\"</span> <span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #008080\">13</span>             <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Trigger</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\">14</span>             <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Trigger </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"IsEnabled\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"false\"</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\">15</span>                 <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Setter </span><span style=\"color: #ff0000\">Property</span><span style=\"color: #0000ff\">=\"Foreground\"</span><span style=\"color: #ff0000\"> Value</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{DynamicResource ButtonTextDisabled}</span><span style=\"color: #0000ff\">\"</span> <span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #008080\">16</span>             <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Trigger</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\">17</span>         <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Style.Triggers</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #008080\">18</span>     <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Style</span><span style=\"color: #0000ff\">&gt;</span></pre> \n</div> \n<p>上面只是定一个叫SystemButton的样式。主要用于修饰按扭的。他跟CSS样式的类样式有点类似。使用的话更不用说了。如下红色的SystemButton。</p> \n<div class=\"cnblogs_code\"> \n <pre> <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Button </span><span style=\"color: #ff0000\">x:Name</span><span style=\"color: #0000ff\">=\"Maximize\"</span><span style=\"color: #ff0000\"> Command</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{Binding Source={x:Static SystemCommands.MaximizeWindowCommand}}</span><span style=\"color: #0000ff\">\"</span><span style=\"color: #ff0000\"> ToolTip</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{x:Static modernui:Resources.Maximize}</span><span style=\"color: #0000ff\">\"</span><span style=\"color: #ff0000\"> Style</span><span style=\"color: #0000ff\">=\"</span><span style=\"color: #808000\">{StaticResource <span style=\"color: #ff0000\">SystemButton</span>}</span><span style=\"color: #0000ff\">\"</span> <span style=\"color: #0000ff\">&gt;</span></pre> \n</div> \n<p>我们都知道HTML网页如果想要引用CSS样式文件的话，就必须在头部声明引用。这样子才可以知道当前的界面是引用了哪一个CSS样式文件。不可否认WPF的界面同样子类似的。只是引用的文件不在叫CSS样式文件，而是叫资源文件。这个后续会笔者会在讲到。不过B/S和C/S本质上还是有一定的差别的。至少他可以声明一个作用于整个应用程序的资源文件。如下</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Application </span><span style=\"color: #ff0000\">x:Class</span><span style=\"color: #0000ff\">=\"FirstFloor.ModernUI.App.App\"</span><span style=\"color: #ff0000\">\n             xmlns</span><span style=\"color: #0000ff\">=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span><span style=\"color: #ff0000\">\n             xmlns:x</span><span style=\"color: #0000ff\">=\"http://schemas.microsoft.com/winfx/2006/xaml\"</span><span style=\"color: #ff0000\">\n             StartupUri</span><span style=\"color: #0000ff\">=\"MainWindow.xaml\"</span><span style=\"color: #0000ff\">&gt;</span>\n    <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Application.Resources</span><span style=\"color: #0000ff\">&gt;</span>\n        <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ResourceDictionary</span><span style=\"color: #0000ff\">&gt;</span>\n            <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">ResourceDictionary.MergedDictionaries</span><span style=\"color: #0000ff\">&gt;</span>\n       <span style=\"color: #ff0000\">         &lt;ResourceDictionary Source=\"/FirstFloor.ModernUI;component/Assets/ModernUI.xaml\" /&gt;\n                &lt;ResourceDictionary Source=\"/FirstFloor.ModernUI;component/Assets/ModernUI.Light.xaml\" /&gt;</span>\n            <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ResourceDictionary.MergedDictionaries</span><span style=\"color: #0000ff\">&gt;</span>\n        <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">ResourceDictionary</span><span style=\"color: #0000ff\">&gt;</span>\n    <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Application.Resources</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">Application</span></pre> \n</div> \n<p>启动WPF应用程序就必须通过Application类或子类。执行Application类他会去寻找窗体。上面源码中StartupUri=\"MaiWindow.xaml\"就体现出来了。当然不可能就必须这样子做。你们可以用代码来做。</p> \n<p>在WinForm的时候，一个应用软件是有若干个Form组起的。而WPF界面则不一定哦。你可以是有一个Window和若干个UserControl或是若干个Page。至于你们选择哪一种方式来做的话，只要项目适合的话都可以。如果实在不清楚的话，你可以跟根据开源项目Modern UI for WPF来做。他就是一个Window和多个UserControl组成的。（Window相当于Form）</p> \n<p>笔者开始入门的时候，并没有直接去查看开源项目。而是先把VS新建生成的了解了一遍。至少你要知道在什么地方启动。以什么样子的方式启动。界面又是什么入手的。明白了VS的源生状。就是可以开始启动开源项目的学习了。</p>',NULL,'2017-04-24 16:01:06',0,0,NULL,'http://www.cnblogs.com/hayasi/p/6714292.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (49,'Spring事务管理的实现方式之编程式事务与声明式事务详解','<h3>原创说明：本博文为原创作品，绝非他处转载，转载请联系博主</h3> \n<h3>1.上篇文章讲解了Spring事务的传播级别与隔离级别，以及分布式事务的简单配置，<a href=\"http://www.cnblogs.com/zhaixiajiao/p/6698399.html\" target=\"_blank\">点击回看上篇文章</a></h3> \n<h3>2.编程式事务：编码方式实现事务管理（代码演示为JDBC事务管理）</h3> \n<div>\n Spring实现编程式事务，依赖于2大类，分别是上篇文章提到的PlatformTransactionManager，与模版类TransactionTemplate（推荐使用）。下面分别详细介绍Spring是如何通过该类实现事务管理。\n</div> \n<div>\n 1）PlatformTransactionManager，上篇文章已经详情解说了该类所拥有的方法，不记得可以回看上篇文章。\n</div> \n<blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px\"> \n <div>\n  事务管理器配置\n </div> \n <div> \n  <div class=\"cnblogs_Highlighter\"> \n   <pre class=\"brush:java;gutter:true;\">&lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt;\n	&lt;property name=\"jdbcUrl\" value=\"${db.jdbcUrl}\" /&gt;\n	&lt;property name=\"user\" value=\"${user}\" /&gt;\n	&lt;property name=\"password\" value=\"${password}\" /&gt;\n	&lt;property name=\"driverClass\" value=\"${db.driverClass}\" /&gt;\n	 &lt;!--连接池中保留的最小连接数。 --&gt; \n     &lt;property name=\"minPoolSize\"&gt; \n         &lt;value&gt;5&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--连接池中保留的最大连接数。Default: 15 --&gt; \n     &lt;property name=\"maxPoolSize\"&gt; \n         &lt;value&gt;30&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 --&gt; \n     &lt;property name=\"initialPoolSize\"&gt; \n         &lt;value&gt;10&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --&gt; \n     &lt;property name=\"maxIdleTime\"&gt; \n         &lt;value&gt;60&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --&gt; \n     &lt;property name=\"acquireIncrement\"&gt; \n         &lt;value&gt;5&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。  如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 --&gt; \n     &lt;property name=\"maxStatements\"&gt; \n         &lt;value&gt;0&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --&gt; \n     &lt;property name=\"idleConnectionTestPeriod\"&gt; \n         &lt;value&gt;60&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt; \n     &lt;property name=\"acquireRetryAttempts\"&gt; \n         &lt;value&gt;30&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false --&gt; \n     &lt;property name=\"breakAfterAcquireFailure\"&gt; \n         &lt;value&gt;true&lt;/value&gt; \n     &lt;/property&gt; \n     &lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false --&gt; \n     &lt;property name=\"testConnectionOnCheckout\"&gt; \n         &lt;value&gt;false&lt;/value&gt; \n     &lt;/property&gt; \n&lt;/bean&gt;\n&lt;!--DataSourceTransactionManager位于org.springframework.jdbc.datasource包下，数据源事务管理类，提供对单个javax.sql.DataSource数据源的事务管理，主要用于JDBC，Mybatis框架事务管理。 --&gt;\n&lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;\n	&lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n&lt;/bean&gt;</pre> \n  </div> 业务中使用代码(以测试类展示)\n </div> \n <div> \n  <div class=\"cnblogs_Highlighter\"> \n   <pre class=\"brush:java;gutter:true;\">import java.util.Map;\nimport javax.annotation.Resource;\nimport javax.sql.DataSource;\nimport org.apache.log4j.Logger;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\nimport org.springframework.transaction.TransactionStatus;\nimport org.springframework.transaction.support.DefaultTransactionDefinition;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = { \"classpath:spring-public.xml\" })\npublic class test {\n	@Resource\n	private PlatformTransactionManager txManager;\n	@Resource\n	private  DataSource dataSource;\n	private static JdbcTemplate jdbcTemplate;\n	Logger logger=Logger.getLogger(test.class);\n    private static final String INSERT_SQL = \"insert into testtranstation(sd) values(?)\";\n    private static final String COUNT_SQL = \"select count(*) from testtranstation\";\n	@Test\n	public void testdelivery(){\n		//定义事务隔离级别，传播行为，\n	    DefaultTransactionDefinition def = new DefaultTransactionDefinition();  \n	    def.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);  \n	    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);  \n	    //事务状态类，通过PlatformTransactionManager的getTransaction方法根据事务定义获取；获取事务状态后，Spring根据传播行为来决定如何开启事务\n	    TransactionStatus status = txManager.getTransaction(def);  \n	    jdbcTemplate = new JdbcTemplate(dataSource);\n	    int i = jdbcTemplate.queryForInt(COUNT_SQL);  \n	    System.out.println(\"表中记录总数：\"+i);\n	    try {  \n	        jdbcTemplate.update(INSERT_SQL, \"1\");  \n	        txManager.commit(status);  //提交status中绑定的事务\n	    } catch (RuntimeException e) {  \n	        txManager.rollback(status);  //回滚\n	    }  \n	    i = jdbcTemplate.queryForInt(COUNT_SQL);  \n	    System.out.println(\"表中记录总数：\"+i);\n	}\n}</pre> \n  </div> \n </div> \n</blockquote> \n<p> 2）使用TransactionTemplate，该类继承了接口DefaultTransactionDefinition，用于简化事务管理，事务管理由模板类定义，主要是通过TransactionCallback回调接口或TransactionCallbackWithoutResult回调接口指定，通过调用模板类的参数类型为TransactionCallback或TransactionCallbackWithoutResult的<span style=\"color: #ff6666\">execute</span>方法来自动享受事务管理。<br> </p> \n<p> TransactionTemplate模板类使用的回调接口： </p> \n<ul> \n <li> TransactionCallback：通过实现该接口的“T doInTransaction(TransactionStatus status) ”方法来定义需要事务管理的操作代码； </li> \n <li> TransactionCallbackWithoutResult：继承TransactionCallback接口，提供“void doInTransactionWithoutResult(TransactionStatus status)”便利接口用于方便那些不需要返回值的事务操作代码。 </li> \n</ul> \n<p> 还是以测试类方式展示如何实现</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">@Test\npublic void testTransactionTemplate(){\n	jdbcTemplate = new JdbcTemplate(dataSource);\n    int i = jdbcTemplate.queryForInt(COUNT_SQL);  \n    System.out.println(\"表中记录总数：\"+i);\n	//构造函数初始化TransactionTemplate\n	TransactionTemplate template = new TransactionTemplate(txManager);\n	template.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);  \n	//重写execute方法实现事务管理\n	template.execute(new TransactionCallbackWithoutResult() {\n		@Override\n		protected void doInTransactionWithoutResult(TransactionStatus status) {\n			jdbcTemplate.update(INSERT_SQL, \"饿死\");   //字段sd为int型，所以插入肯定失败报异常，自动回滚，代表TransactionTemplate自动管理事务\n		}}\n	);\n	i = jdbcTemplate.queryForInt(COUNT_SQL);  \n    System.out.println(\"表中记录总数：\"+i);\n}</pre> \n</div> \n<h3>3.声明式事务：可知编程式事务每次实现都要单独实现，但业务量大功能复杂时，使用编程式事务无疑是痛苦的，而声明式事务不同，声明式事务属于无侵入式，不会影响业务逻辑的实现。</h3> \n<div>\n 声明式事务实现方式主要有2种，一种为通过使用Spring的&lt;tx:advice&gt;定义事务通知与AOP相关配置实现，另为一种通过@Transactional实现事务管理实现，下面详细说明2种方法如何配置，已经相关注意点\n</div> \n<div>\n 1)方式一，配置文件如下\n</div> \n<div> \n <div class=\"cnblogs_Highlighter\"> \n  <pre class=\"brush:java;gutter:true;\">&lt;!-- \n&lt;tx:advice&gt;定义事务通知，用于指定事务属性，其中“transaction-manager”属性指定事务管理器，并通过&lt;tx:attributes&gt;指定具体需要拦截的方法\n	&lt;tx:method&gt;拦截方法，其中参数有：\n	name:方法名称，将匹配的方法注入事务管理，可用通配符\n	propagation：事务传播行为，\n	isolation：事务隔离级别定义；默认为“DEFAULT”\n	timeout：事务超时时间设置，单位为秒，默认-1，表示事务超时将依赖于底层事务系统；\n	read-only：事务只读设置，默认为false，表示不是只读；\n    rollback-for：需要触发回滚的异常定义，可定义多个，以“，”分割，默认任何RuntimeException都将导致事务回滚，而任何Checked Exception将不导致事务回滚；\n    no-rollback-for：不被触发进行回滚的 Exception(s)；可定义多个，以“，”分割；\n --&gt;\n&lt;tx:advice id=\"advice\" transaction-manager=\"transactionManager\"&gt;\n	&lt;tx:attributes&gt;\n	    &lt;!-- 拦截save开头的方法，事务传播行为为：REQUIRED：必须要有事务, 如果没有就在上下文创建一个 --&gt;\n		&lt;tx:method name=\"save*\" propagation=\"REQUIRED\" isolation=\"READ_COMMITTED\" timeout=\"\" read-only=\"false\" no-rollback-for=\"\" rollback-for=\"\"/&gt;\n		&lt;!-- 支持,如果有就有,没有就没有 --&gt;\n		&lt;tx:method name=\"*\" propagation=\"SUPPORTS\"/&gt;\n	&lt;/tx:attributes&gt;\n&lt;/tx:advice&gt;\n&lt;!-- 定义切入点，expression为切人点表达式，如下是指定impl包下的所有方法，具体以自身实际要求自定义  --&gt;\n&lt;aop:config&gt;\n    &lt;aop:pointcut expression=\"execution(* com.kaizhi.*.service.impl.*.*(..))\" id=\"pointcut\"/&gt;\n    &lt;!--&lt;aop:advisor&gt;定义切入点，与通知，把tx与aop的配置关联,才是完整的声明事务配置 --&gt;\n    &lt;aop:advisor advice-ref=\"advice\" pointcut-ref=\"pointcut\"/&gt;\n&lt;/aop:config&gt;</pre> \n </div> \n</div> \n<div>\n 关于事务传播行为与隔离级别，可参考\n <a href=\"http://blog.csdn.net/liaohaojian/article/details/68488150\" target=\"_blank\">http://blog.csdn.net/liaohaojian/article/details/68488150</a>\n</div> \n<div>\n 注意点：\n</div> \n<div>\n <ol> \n  <li>事务回滚异常只能为RuntimeException异常，而Checked Exception异常不回滚，捕获异常不抛出也不会回滚，但可以强制事务回滚：TransactionAspectSupport.currentTransactionStatus().isRollbackOnly();</li> \n  <li> 解决“自我调用”而导致的不能设置正确的事务属性问题，可参考<a href=\"http://www.iteye.com/topic/1122740\" target=\"_blank\">http://www.iteye.com/topic/1122740</a><br> </li> \n </ol> 2）方式二通过@Transactional实现事务管理 \n</div> \n<div> \n <div class=\"cnblogs_code\"> \n  <pre>&lt;bean id=\"txManager\" <span style=\"color: #0000ff\">class</span>=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;   \n     &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\n&lt;/bean&gt;    \n&lt;tx:annotation-driven transaction-manager=\"txManager\"/&gt; <span style=\"color: #008000\">//</span><span style=\"color: #008000\">开启事务注解</span></pre> \n </div> \n</div> \n<div>\n  @Transactional(propagation=Propagation.REQUIRED,isolation=Isolation.READ_COMMITTED)，具体参数跟上面&lt;tx:method&gt;中一样\n <br> \n</div> \n<div>\n  Spring提供的@Transaction注解事务管理，内部同样是利用环绕通知TransactionInterceptor实现事务的开启及关闭。\n <br> 使用@Transactional注意点：\n <br>\n <ol> \n  <li> 如果在接口、实现类或方法上都指定了@Transactional 注解，则优先级顺序为方法&gt;实现类&gt;接口； </li> \n  <li> 建议只在实现类或实现类的方法上使用@Transactional，而不要在接口上使用，这是因为如果使用JDK代理机制（<span style=\"color: #ff6666\">基于接口的代理</span>）是没问题；而使用使用CGLIB代理（继承）机制时就会遇到问题，因为其使用基于类的代理而不是接口，这是因为<span style=\"color: #ff6666\">接口上的@Transactional注解是“不能继承的</span>”；</li> \n </ol> \n <p>本人另一博文【<a href=\"http://blog.csdn.net/liaohaojian/article/details/70139151\" target=\"_blank\">http://blog.csdn.net/liaohaojian/article/details/70139151</a>】欢迎各位浏览</p> \n</div>',NULL,'2017-04-24 16:01:07',0,0,NULL,'http://www.cnblogs.com/zhaixiajiao/p/6755865.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (50,'利用Javascript解决HTML大数据列表引起的网页加载慢/卡死问题。','<p>在一些网页应用中，有时会碰到一个超级巨大的列表，成千上万行，这时大部份浏览器解析起来就非常痛苦了（有可能直接卡死）。</p> \n<p>也许你们会说可以分页或动态加载啊？但是有可能需求不允许分页，动态加载？网络的延迟也会造成体验不好。</p> \n<p>那么适时候介绍本文的实现思路了。</p> \n<p>首先上最终的效果：</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/3d82b649-5eab-44fb-87a4-72604234a3ae.png\" alt=\"\" width=\"584\" height=\"610\"></p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/802ed081-52eb-4302-997b-5614876a1953.png\" alt=\"\" width=\"584\" height=\"394\"></p> \n<p>&nbsp;</p> \n<p>主要思路如下：</p> \n<p>首先，创建如上图所示的三个DIV，scrollbar用于显示具体的滚动条（CSS需要设置zindex，要显示在demo-list的底层），real-panel用于计算列表的实际高度（每一个li的高度是固定的，有多少项数据也是知道的，由此可以计算出列表的实际高度），demo-list主要用于当前滚动条高度对应的实际数据（css需要设置zindex，显示于scrollbar的上层，需要使用JS计算宽度等于real-panel的宽度，这样就刚好覆盖掉底层滚动条外的区域）。</p> \n<p>然后，使用KO对数据实现绑定，由于KO的双向绑定，我们可以不用再去实现滚动滚动条时数据变化时带来的更新操作。</p> \n<p>最后，就是兼容性了。本文的具体实现在IE6\\7\\8\\9\\10\\11,FireFox,Chrome,Edge上效果完美。</p> \n<p>&nbsp;</p> \n<p>下面贴代码：flyweight.js</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #008080\">  1</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;summary&gt;</span>\n<span style=\"color: #008080\">  2</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ JQUERY-享元模式之共享DOM元素-插件</span>\n<span style=\"color: #008080\">  3</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ 用法: $(\"#demo\").flyWeight(options);</span>\n<span style=\"color: #008080\">  4</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ 6458450@qq.com 邓西 版权所有 </span>\n<span style=\"color: #008080\">  5</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;/summary&gt;</span>\n<span style=\"color: #008080\">  6</span> \n<span style=\"color: #008080\">  7</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;reference path=\"jquery-1.7.1.min.js\" /&gt;</span>\n<span style=\"color: #008080\">  8</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;reference path=\"knockout-2.3.0.js\" /&gt;</span>\n<span style=\"color: #008080\">  9</span> \n<span style=\"color: #008080\"> 10</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;param name=\"options\" type=\"Object\"&gt;</span>\n<span style=\"color: #008080\"> 11</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ 配置参数</span>\n<span style=\"color: #008080\"> 12</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;para&gt;        ulBindScript   - ko.js data-bind 语句,写法参见默认值&lt;/para&gt;</span>\n<span style=\"color: #008080\"> 13</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;para&gt;        liBindScript   - ko.js data-bind 语句,写法参见默认值&lt;/para&gt;</span>\n<span style=\"color: #008080\"> 14</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;para&gt;        items          - 要显示的数据JSON数据列表&lt;/para&gt;</span>\n<span style=\"color: #008080\"> 15</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;para&gt;        viewModel      - ko.js ViewModel对像,必须有items及setCurrentItems实现&lt;/para&gt;</span>\n<span style=\"color: #008080\"> 16</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;para&gt;        itemHeight     - 每一项的高度,调整后需要调整对应的CSS以匹配显示效果&lt;/para&gt;</span>\n<span style=\"color: #008080\"> 17</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;para&gt;        itemShowCount  - 列表区域中要显示的个数,调整后需要调整对应的CSS以匹配显示效果&lt;/para&gt;</span>\n<span style=\"color: #008080\"> 18</span> <span style=\"color: #008000\">//</span><span style=\"color: #008000\">/ &lt;/param&gt;</span>\n<span style=\"color: #008080\"> 19</span> \n<span style=\"color: #008080\"> 20</span> (<span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> ($) {\n</span><span style=\"color: #008080\"> 21</span> <span style=\"color: #000000\">    $.fn.extend({\n</span><span style=\"color: #008080\"> 22</span>         flyWeight: <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (options) {\n</span><span style=\"color: #008080\"> 23</span>             <span style=\"color: #0000ff\">if</span> (!options) <span style=\"color: #0000ff\">var</span> options =<span style=\"color: #000000\"> {};\n</span><span style=\"color: #008080\"> 24</span>             <span style=\"color: #0000ff\">if</span> (options.ko == undefined) options.ko = <span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 25</span>             <span style=\"color: #0000ff\">if</span> (options.ulBindScript == undefined) options.ulBindScript = \"foreach: items\"<span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 26</span>             <span style=\"color: #0000ff\">if</span> (options.liBindScript == undefined) options.liBindScript = \"text: name, attr: { _id: id, _name: name }, click: $root.select\"<span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 27</span>             <span style=\"color: #0000ff\">if</span> (options.items == undefined) options.items = [{ \"id\": 1, \"name\": \"test\"<span style=\"color: #000000\"> }];\n</span><span style=\"color: #008080\"> 28</span>             <span style=\"color: #0000ff\">if</span> (options.viewModel == undefined) options.viewModel = <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> () {\n</span><span style=\"color: #008080\"> 29</span>                 <span style=\"color: #0000ff\">var</span> self = <span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 30</span>                 self.items =<span style=\"color: #000000\"> options.ko.observableArray([]);\n</span><span style=\"color: #008080\"> 31</span>                 self.setCurrentItems = <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (currentItems) {\n</span><span style=\"color: #008080\"> 32</span> <span style=\"color: #000000\">                    self.items(currentItems);\n</span><span style=\"color: #008080\"> 33</span> <span style=\"color: #000000\">                };\n</span><span style=\"color: #008080\"> 34</span>                 self.select = <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (item) {\n</span><span style=\"color: #008080\"> 35</span> <span style=\"color: #000000\">                    console.log(item.id);\n</span><span style=\"color: #008080\"> 36</span>                     <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">false</span><span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 37</span> <span style=\"color: #000000\">                }\n</span><span style=\"color: #008080\"> 38</span> <span style=\"color: #000000\">            };\n</span><span style=\"color: #008080\"> 39</span>             <span style=\"color: #0000ff\">if</span> (options.itemHeight == undefined) options.itemHeight = 30<span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 40</span>             <span style=\"color: #0000ff\">if</span> (options.itemShowCount == undefined) options.itemShowCount = 10<span style=\"color: #000000\">;\n</span><span style=\"color: #008080\"> 41</span> \n<span style=\"color: #008080\"> 42</span> \n<span style=\"color: #008080\"> 43</span>             <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> StringBuilder() {\n</span><span style=\"color: #008080\"> 44</span>                 <span style=\"color: #0000ff\">this</span>._stringArray = <span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> Array();\n</span><span style=\"color: #008080\"> 45</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\"> 46</span>             StringBuilder.prototype.append = <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (str) {\n</span><span style=\"color: #008080\"> 47</span>                 <span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">._stringArray.push(str);\n</span><span style=\"color: #008080\"> 48</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\"> 49</span>             StringBuilder.prototype.toString = <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (joinGap) {\n</span><span style=\"color: #008080\"> 50</span>                 <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">._stringArray.join(joinGap);\n</span><span style=\"color: #008080\"> 51</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\"> 52</span> \n<span style=\"color: #008080\"> 53</span>             <span style=\"color: #0000ff\">var</span> FlyWeight = <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (input, options) {\n</span><span style=\"color: #008080\"> 54</span> <span style=\"color: #000000\">                CreateDom(input);\n</span><span style=\"color: #008080\"> 55</span> \n<span style=\"color: #008080\"> 56</span>                 <span style=\"color: #0000ff\">var</span> _vm = <span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> options.viewModel();\n</span><span style=\"color: #008080\"> 57</span>                 options.ko.applyBindings(_vm, document.getElementById(\"demo-list\"<span style=\"color: #000000\">));\n</span><span style=\"color: #008080\"> 58</span> \n<span style=\"color: #008080\"> 59</span> <span style=\"color: #000000\">                AutoSize();\n</span><span style=\"color: #008080\"> 60</span> \n<span style=\"color: #008080\"> 61</span>                 <span style=\"color: #008000\">//</span><span style=\"color: #008000\">滚动事件</span>\n<span style=\"color: #008080\"> 62</span>                 $(\"#scrollbar\").scroll(<span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> () {\n</span><span style=\"color: #008080\"> 63</span>                     setTimeout(<span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> () {\n</span><span style=\"color: #008080\"> 64</span> <span style=\"color: #000000\">                        ScrollEvent(_vm);\n</span><span style=\"color: #008080\"> 65</span>                     }, 50<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 66</span> <span style=\"color: #000000\">                });\n</span><span style=\"color: #008080\"> 67</span>                 <span style=\"color: #008000\">//</span><span style=\"color: #008000\">第一次初始化加载数据</span>\n<span style=\"color: #008080\"> 68</span>                 $(\"#scrollbar\"<span style=\"color: #000000\">).scroll();\n</span><span style=\"color: #008080\"> 69</span> \n<span style=\"color: #008080\"> 70</span>                 addEvent(\'mousewheel\'<span style=\"color: #000000\">, onMouseWheel);\n</span><span style=\"color: #008080\"> 71</span>                 addEvent(\'DOMMouseScroll\'<span style=\"color: #000000\">, onMouseWheel);\n</span><span style=\"color: #008080\"> 72</span> <span style=\"color: #000000\">            };\n</span><span style=\"color: #008080\"> 73</span> \n<span style=\"color: #008080\"> 74</span>             <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">this</span>.each(<span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> () {\n</span><span style=\"color: #008080\"> 75</span>                 <span style=\"color: #0000ff\">new</span> FlyWeight(<span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">, options);\n</span><span style=\"color: #008080\"> 76</span> <span style=\"color: #000000\">            });\n</span><span style=\"color: #008080\"> 77</span> \n<span style=\"color: #008080\"> 78</span>             <span style=\"color: #008000\">//</span><span style=\"color: #008000\">创建相应DOM元素</span>\n<span style=\"color: #008080\"> 79</span>             <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> CreateDom(input) {\n</span><span style=\"color: #008080\"> 80</span>                 <span style=\"color: #0000ff\">var</span> sb = <span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> StringBuilder();\n</span><span style=\"color: #008080\"> 81</span> \n<span style=\"color: #008080\"> 82</span>                 sb.append(\"&lt;div id=\\\"scrollbar\\\" class=\\\"scrollbar-panel\\\"&gt;\"<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 83</span>                 sb.append(\"     &lt;div class=\\\"real-panel\\\"&gt;&lt;/div&gt;\"<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 84</span>                 sb.append(\"&lt;/div&gt;\"<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 85</span>                 sb.append(\"&lt;div id=\\\"demo-list\\\" class=\\\"list-panel\\\"&gt;\"<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 86</span>                 sb.append(\"     &lt;ul data-bind=\\\"\" + options.ulBindScript + \"\\\"&gt;\"<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 87</span>                 sb.append(\"     &lt;li&gt;&lt;a href=\\\"javascript:void(0);\\\" data-bind=\\\"\" + options.liBindScript + \"\\\"&gt;&lt;/a&gt;&lt;/li&gt;\"<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 88</span>                 sb.append(\"     &lt;/ul&gt;\"<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 89</span>                 sb.append(\"&lt;/div&gt;\"<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\"> 90</span> \n<span style=\"color: #008080\"> 91</span>                 $(input).append(sb.toString(\"\"<span style=\"color: #000000\">));\n</span><span style=\"color: #008080\"> 92</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\"> 93</span> \n<span style=\"color: #008080\"> 94</span>             <span style=\"color: #008000\">//</span><span style=\"color: #008000\">根据浏览器的滚动条宽度自动计算实际的列表区域宽度</span>\n<span style=\"color: #008080\"> 95</span>             <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> AutoSize() {\n</span><span style=\"color: #008080\"> 96</span>                 $(\".real-panel\").height(options.items.length *<span style=\"color: #000000\"> options.itemHeight);\n</span><span style=\"color: #008080\"> 97</span>                 $(\"#demo-list\").width($(\".real-panel\"<span style=\"color: #000000\">).width());\n</span><span style=\"color: #008080\"> 98</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\"> 99</span> \n<span style=\"color: #008080\">100</span>             <span style=\"color: #008000\">//</span><span style=\"color: #008000\">滚动事件</span>\n<span style=\"color: #008080\">101</span>             <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> ScrollEvent(vm) {\n</span><span style=\"color: #008080\">102</span>                 <span style=\"color: #008000\">//</span><span style=\"color: #008000\">获取滚动条距顶部的位置</span>\n<span style=\"color: #008080\">103</span>                 <span style=\"color: #0000ff\">var</span> start =<span style=\"color: #000000\"> getScrollTop();\n</span><span style=\"color: #008080\">104</span>                 <span style=\"color: #008000\">//</span><span style=\"color: #008000\">根据top计算应该要显示的区域最大值,需要检查实际个数是否大于默认个数</span>\n<span style=\"color: #008080\">105</span>                 <span style=\"color: #0000ff\">var</span> end = 0<span style=\"color: #000000\">;\n</span><span style=\"color: #008080\">106</span>                 <span style=\"color: #0000ff\">if</span> (options.items.length &gt;<span style=\"color: #000000\"> options.itemShowCount) {\n</span><span style=\"color: #008080\">107</span>                     end = start + options.itemShowCount *<span style=\"color: #000000\"> options.itemHeight;\n</span><span style=\"color: #008080\">108</span> <span style=\"color: #000000\">                }\n</span><span style=\"color: #008080\">109</span>                 <span style=\"color: #0000ff\">else</span><span style=\"color: #000000\"> {\n</span><span style=\"color: #008080\">110</span>                     end = start + options.items.length *<span style=\"color: #000000\"> options.itemHeight;\n</span><span style=\"color: #008080\">111</span> <span style=\"color: #000000\">                }\n</span><span style=\"color: #008080\">112</span> \n<span style=\"color: #008080\">113</span>                 <span style=\"color: #008000\">//</span><span style=\"color: #008000\">根据位置计算应该显示数组中起始下标及结束下标</span>\n<span style=\"color: #008080\">114</span>                 <span style=\"color: #0000ff\">var</span> startPos = parseInt(start /<span style=\"color: #000000\"> options.itemHeight);\n</span><span style=\"color: #008080\">115</span>                 <span style=\"color: #0000ff\">var</span> endPos = parseInt(end /<span style=\"color: #000000\"> options.itemHeight);\n</span><span style=\"color: #008080\">116</span> \n<span style=\"color: #008080\">117</span>                 <span style=\"color: #008000\">//</span><span style=\"color: #008000\">取出对应的数据并传递给ko被监视的数组</span>\n<span style=\"color: #008080\">118</span>                 <span style=\"color: #0000ff\">var</span> currentData =<span style=\"color: #000000\"> [];\n</span><span style=\"color: #008080\">119</span>                 <span style=\"color: #0000ff\">for</span> (<span style=\"color: #0000ff\">var</span> i = startPos; i &lt; endPos; i++<span style=\"color: #000000\">) {\n</span><span style=\"color: #008080\">120</span> <span style=\"color: #000000\">                    currentData.push(options.items[i]);\n</span><span style=\"color: #008080\">121</span> <span style=\"color: #000000\">                }\n</span><span style=\"color: #008080\">122</span> <span style=\"color: #000000\">                vm.setCurrentItems(currentData);\n</span><span style=\"color: #008080\">123</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\">124</span> \n<span style=\"color: #008080\">125</span>             <span style=\"color: #008000\">//</span><span style=\"color: #008000\">列表区域的滚轮事件绑定</span>\n<span style=\"color: #008080\">126</span>             <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> onMouseWheel(ev) {\n</span><span style=\"color: #008080\">127</span>                 <span style=\"color: #0000ff\">var</span> ev = ev ||<span style=\"color: #000000\"> window.event;\n</span><span style=\"color: #008080\">128</span>                 <span style=\"color: #0000ff\">var</span> down = <span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">;\n</span><span style=\"color: #008080\">129</span>                 down = ev.wheelDelta ? ev.wheelDelta &lt; 0 : ev.detail &gt; 0<span style=\"color: #000000\">;\n</span><span style=\"color: #008080\">130</span>                 <span style=\"color: #0000ff\">var</span> top =<span style=\"color: #000000\"> getScrollTop();\n</span><span style=\"color: #008080\">131</span>                 <span style=\"color: #008000\">//</span><span style=\"color: #008000\">滚动时对滚动条距顶的数量进行加一项高度或减一项高度达到控制滚动条的目的</span>\n<span style=\"color: #008080\">132</span>                 <span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (down) {\n</span><span style=\"color: #008080\">133</span>                     $(\"#scrollbar\").scrollTop(top +<span style=\"color: #000000\"> options.itemHeight);\n</span><span style=\"color: #008080\">134</span>                 } <span style=\"color: #0000ff\">else</span><span style=\"color: #000000\"> {\n</span><span style=\"color: #008080\">135</span>                     $(\"#scrollbar\").scrollTop(top -<span style=\"color: #000000\"> options.itemHeight);\n</span><span style=\"color: #008080\">136</span> <span style=\"color: #000000\">                }\n</span><span style=\"color: #008080\">137</span>                 <span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (ev.preventDefault) {\n</span><span style=\"color: #008080\">138</span> <span style=\"color: #000000\">                    ev.preventDefault();\n</span><span style=\"color: #008080\">139</span> <span style=\"color: #000000\">                }\n</span><span style=\"color: #008080\">140</span>                 <span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">false</span><span style=\"color: #000000\">;\n</span><span style=\"color: #008080\">141</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\">142</span> \n<span style=\"color: #008080\">143</span>             <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> addEvent(xEvent, fn) {\n</span><span style=\"color: #008080\">144</span>                 <span style=\"color: #0000ff\">var</span> obj = document.getElementById(\'demo-list\'<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\">145</span>                 <span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (obj.attachEvent) {\n</span><span style=\"color: #008080\">146</span>                     obj.attachEvent(\'on\' +<span style=\"color: #000000\"> xEvent, fn);\n</span><span style=\"color: #008080\">147</span>                 } <span style=\"color: #0000ff\">else</span><span style=\"color: #000000\"> {\n</span><span style=\"color: #008080\">148</span>                     obj.addEventListener(xEvent, fn, <span style=\"color: #0000ff\">false</span><span style=\"color: #000000\">);\n</span><span style=\"color: #008080\">149</span> <span style=\"color: #000000\">                }\n</span><span style=\"color: #008080\">150</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\">151</span> \n<span style=\"color: #008080\">152</span>             <span style=\"color: #008000\">//</span><span style=\"color: #008000\">获取滚动条距顶部的数值 </span>\n<span style=\"color: #008080\">153</span>             <span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> getScrollTop() {\n</span><span style=\"color: #008080\">154</span>                 <span style=\"color: #0000ff\">var</span> scrollTop = $(\"#scrollbar\").prop(\'scrollTop\'<span style=\"color: #000000\">);\n</span><span style=\"color: #008080\">155</span>                 <span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> scrollTop;\n</span><span style=\"color: #008080\">156</span> <span style=\"color: #000000\">            }\n</span><span style=\"color: #008080\">157</span> <span style=\"color: #000000\">        }\n</span><span style=\"color: #008080\">158</span> <span style=\"color: #000000\">    });\n</span><span style=\"color: #008080\">159</span> })(jQuery);</pre> \n</div> \n<p>如何调用：</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:html;gutter:true;\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n    &lt;title&gt;享元模式之共享DOM元素&lt;/title&gt;\n    &lt;script data-main=\"js/main\" src=\"js/require.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"css/css.css\" rel=\"stylesheet\" /&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        !function () {\n            var datas = [{ \"id\": 1, \"name\": \"5-(2,5-Dimethylphenoxy)-2,2-Dimethylpentanoic Acid\" }, { \"id\": 4, \"name\": \"5-Aminosalicylic Acid\" }, { \"id\": 5, \"name\": \"5-ASA\" }, { \"id\": 7, \"name\": \"5\'-DFUR\" }, { \"id\": 8, \"name\": \"5-FC\" }, { \"id\": 11, \"name\": \"5-Fu\" }, { \"id\": 14, \"name\": \"6029-M\" }, { \"id\": 15, \"name\": \"Moxam\" }, { \"id\": 21, \"name\": \"654-Ⅱ\" }, { \"id\": 22, \"name\": \"654-2\" }, { \"id\": 25, \"name\": \"6-Aminocaproic Acid\" }, { \"id\": 26, \"name\": \"6-Aminopurin\" }, { \"id\": 27, \"name\": \"6-Amino-purin Phosphate\" }, { \"id\": 28, \"name\": \"6-D-Trp\" }, { \"id\": 29, \"name\": \"马思平\" }, { \"id\": 30, \"name\": \"6-Mercaptopurine\" }, { \"id\": 31, \"name\": \"6-N\'-甲基庆大霉素\" }, { \"id\": 32, \"name\": \"6-Purinethiol\" }, { \"id\": 34, \"name\": \"6-TG\" }, { \"id\": 35, \"name\": \"6-Tioguanine\" }, { \"id\": 43, \"name\": \"8-Methoxsalene\" }, { \"id\": 44, \"name\": \"8-Methoxypsoralen\" }, { \"id\": 57, \"name\": \"A-19120\" }, { \"id\": 59, \"name\": \"A-38579\" }, { \"id\": 60, \"name\": \"A-43818\" }, { \"id\": 61, \"name\": \"A-46745\" }, { \"id\": 62, \"name\": \"A-6069\" }, { \"id\": 64, \"name\": \"AA-149\" }, { \"id\": 68, \"name\": \"Abbocillin-VK\" }, { \"id\": 69, \"name\": \"Abbodop\" }, { \"id\": 70, \"name\": \"Abbokinase\" }, { \"id\": 71, \"name\": \"Abboticine\" }, { \"id\": 72, \"name\": \"Abbott-35616\" }, { \"id\": 74, \"name\": \"Abbott-43326\" }, { \"id\": 75, \"name\": \"Abbott-43818\" }, { \"id\": 76, \"name\": \"Abentel\" }, { \"id\": 77, \"name\": \"Aberet\" }, { \"id\": 78, \"name\": \"Abilit\" }, { \"id\": 79, \"name\": \"ABOB\" }, { \"id\": 80, \"name\": \"Aboren\" }, { \"id\": 88, \"name\": \"Acarbosum\" }, { \"id\": 89, \"name\": \"Acavyl\" }, { \"id\": 90, \"name\": \"Accolate\" }, { \"id\": 91, \"name\": \"Accuprin\" }, { \"id\": 92, \"name\": \"Accupro\" }, { \"id\": 93, \"name\": \"Accutane\" }, { \"id\": 94, \"name\": \"川琥宁\" }, { \"id\": 95, \"name\": \"Acebutololum\" }, { \"id\": 100, \"name\": \"Acede Salicylique\" }, { \"id\": 105, \"name\": \"Acemetacinum\" }, { \"id\": 107, \"name\": \"Acenocoumarol\" }, { \"id\": 108, \"name\": \"Acenocoumarolum\" }, { \"id\": 117, \"name\": \"1,6-Fructose-Diphosphate\" }, { \"id\": 119, \"name\": \"利胆素\" }, { \"id\": 120, \"name\": \"13057R.P\" }, { \"id\": 122, \"name\": \"1321TH\" }, { \"id\": 123, \"name\": \"13228R.P.\" }, { \"id\": 126, \"name\": \"14-Hydroxydaunomycin\" }, { \"id\": 127, \"name\": \"1620RB\" }, { \"id\": 129, \"name\": \"明竹欣\" }, { \"id\": 131, \"name\": \"17β-Estradiolum\" }, { \"id\": 132, \"name\": \"17βOestradiol\" }, { \"id\": 133, \"name\": \"18-Methylnorethindrone\" }, { \"id\": 138, \"name\": \"1-Hexyl-Carbamoyl-5-Fluorouracil\" }, { \"id\": 139, \"name\": \"1M128\" }, { \"id\": 140, \"name\": \"1α,25-DHCC\" }, { \"id\": 141, \"name\": \"1α,25-Dihydroxycholecalciferol\" }, { \"id\": 142, \"name\": \"1α,25-DihydroxyvitaminD3\" }, { \"id\": 143, \"name\": \"1α,25-DiohD3\" }, { \"id\": 144, \"name\": \"1α-D3\" }, { \"id\": 145, \"name\": \"1α-HCC\" }, { \"id\": 146, \"name\": \"1α-Hydroxycholecalciferol\" }, { \"id\": 147, \"name\": \"1α-HydroxyvitamineD3\" }, { \"id\": 148, \"name\": \"1α-OHCC\" }, { \"id\": 149, \"name\": \"1α-OH-D3\" }, { \"id\": 155, \"name\": \"Transmetil(Ademetionine)\" }, { \"id\": 156, \"name\": \"SAMe\" }, { \"id\": 157, \"name\": \"2-Deoxycoformycin\" }, { \"id\": 158, \"name\": \"2-Fmpocl\" }, { \"id\": 159, \"name\": \"SD4\" }, { \"id\": 162, \"name\": \"2-Propylpentamide\" }, { \"id\": 163, \"name\": \"2-Propylvaeramide\" }, { \"id\": 165, \"name\": \"氨苄青霉素/舒巴克坦钠\" }, { \"id\": 166, \"name\": \"Natrii Lactatis\" }, { \"id\": 169, \"name\": \"福辛普列钠\" }, { \"id\": 170, \"name\": \"33-A-74\" }, { \"id\": 171, \"name\": \"3-Acetylaconitine\" }, { \"id\": 173, \"name\": \"3-Methylnirvanol\" }, { \"id\": 177, \"name\": \"4306CB\" }, { \"id\": 180, \"name\": \"4-EA\" }, { \"id\": 182, \"name\": \"4\'-Epi-ADE\" }, { \"id\": 184, \"name\": \"4\'-Epi-Doxorubicine\" }, { \"id\": 185, \"name\": \"4\'-Epi-ox Farmorubicin HCl\" }, { \"id\": 189, \"name\": \"赛格力\" }, { \"id\": 192, \"name\": \"Acerine\" }, { \"id\": 193, \"name\": \"Aceroxatidine\" }, { \"id\": 195, \"name\": \"Aceroxatidinum\" }, { \"id\": 196, \"name\": \"Acertil\" }, { \"id\": 197, \"name\": \"Acetacrin\" }, { \"id\": 198, \"name\": \"Acetagastrodin\" }, { \"id\": 199, \"name\": \"Acetagastrodine\" }, { \"id\": 200, \"name\": \"Acetagastrodinum\" }, { \"id\": 201, \"name\": \"Acetamidopyrrolidinone\" }, { \"id\": 202, \"name\": \"Acetamidum\" }, { \"id\": 203, \"name\": \"Acetaminophen\" }, { \"id\": 211, \"name\": \"Acetazolamidum\" }, { \"id\": 212, \"name\": \"Acetein\" }, { \"id\": 213, \"name\": \"Acetest\" }, { \"id\": 215, \"name\": \"Acetic Acid Amide\" }, { \"id\": 217, \"name\": \"Acetohexamidum\" }, { \"id\": 218, \"name\": \"Acetomenadione\" }, { \"id\": 219, \"name\": \"Acetomenaphthone\" }, { \"id\": 229, \"name\": \"Acetospan\" }, { \"id\": 236, \"name\": \"Acetyl Spiramycin\" }, { \"id\": 244, \"name\": \"Acetylcysteinum\" }, { \"id\": 251, \"name\": \"Acetylleucomycin\" }, { \"id\": 253, \"name\": \"Acetylmidecamycinum\" }, { \"id\": 257, \"name\": \"Acetylsalicylic Acid\" }, { \"id\": 258, \"name\": \"Acetylspiramycinum\" }, { \"id\": 262, \"name\": \"Aciclovir Sodium\" }, { \"id\": 267, \"name\": \"Acid Aminocaproic\" }, { \"id\": 268, \"name\": \"Acid Aminomethylbenzoic\" }, { \"id\": 272, \"name\": \"Acid Chenodeoxycholic\" }, { \"id\": 273, \"name\": \"Acid Cholique\" }, { \"id\": 274, \"name\": \"Acid Cinametic\" }, { \"id\": 279, \"name\": \"Acid Etacrynic\" }, { \"id\": 280, \"name\": \"Acid Ethacrynic\" }, { \"id\": 281, \"name\": \"Acid Folico\" }, { \"id\": 282, \"name\": \"Acid Folique\" }, { \"id\": 288, \"name\": \"Acid Iotalamic\" }, { \"id\": 293, \"name\": \"Acid Nalidixic\" }, { \"id\": 296, \"name\": \"Acid Oleanolic\" }, { \"id\": 298, \"name\": \"Acid Pipemidic\" }, { \"id\": 301, \"name\": \"Acid Pteroyl-glutamique\" }, { \"id\": 306, \"name\": \"Acid Tranexamic\" }, { \"id\": 307, \"name\": \"Acid Valproic\" }, { \"id\": 308, \"name\": \"Acide Amidotrizoicum\" }, { \"id\": 309, \"name\": \"Acide Cinametique\" }, { \"id\": 310, \"name\": \"Acide Etacrynique\" }, { \"id\": 313, \"name\": \"Acide Iotroxique\" }, { \"id\": 318, \"name\": \"Acidi Acetylsalicylici\" }, { \"id\": 321, \"name\": \"Acidi Borici\" }, { \"id\": 327, \"name\": \"Acidi Salicylici\" }, { \"id\": 331, \"name\": \"Acido Salicilico\" }, { \"id\": 333, \"name\": \"Acidum Acetylsalicylicum\" }, { \"id\": 334, \"name\": \"Acidum Amino Caproicum\" }, { \"id\": 335, \"name\": \"Acidum Aminoaceticum\" }, { \"id\": 336, \"name\": \"Acidum Aminoacetis\" }, { \"id\": 340, \"name\": \"Acidum Boris\" }, { \"id\": 341, \"name\": \"Acidum Caffeicum\" }, { \"id\": 346, \"name\": \"Acidum Folis\" }, { \"id\": 352, \"name\": \"Acidum Iopanois\" }, { \"id\": 359, \"name\": \"Acidum Nicotinis\" }, { \"id\": 362, \"name\": \"Acidum Para-Aminomethylbenzoicum\" }, { \"id\": 364, \"name\": \"Acidum Ribonu Cleicum\" }, { \"id\": 365, \"name\": \"Acidum Ribonucleis\" }, { \"id\": 366, \"name\": \"Acidum Salicylicum\" }, { \"id\": 367, \"name\": \"Acidum Tiaprofenis\" }, { \"id\": 369, \"name\": \"Acidum Ursodesoxycholicum\" }, { \"id\": 370, \"name\": \"Acidumγ-Aminobutyris\" }, { \"id\": 371, \"name\": \"Acignost\" }, { \"id\": 372, \"name\": \"Acipimoxum\" }, { \"id\": 376, \"name\": \"Aclacinomycin\" }, { \"id\": 377, \"name\": \"Aclacinomycin A\" }, { \"id\": 378, \"name\": \"Aclacinomycin A Hydrochloride\" }, { \"id\": 379, \"name\": \"Aclacinomycin B Hydrochloride\" }, { \"id\": 380, \"name\": \"Aclacinomycine\" }, { \"id\": 381, \"name\": \"Aclacinon\" }, { \"id\": 382, \"name\": \"Aclacinon HCl\" }, { \"id\": 383, \"name\": \"Aclarubicin A\" }, { \"id\": 385, \"name\": \"Aclarubicinum\" }, { \"id\": 387, \"name\": \"Ampicillin Sodium/Sulbactam Sodium Combination\" }, { \"id\": 440, \"name\": \"费定\" }, { \"id\": 441, \"name\": \"苯磺酸阿曲可宁\" }, { \"id\": 442, \"name\": \"多瑞吉\" }, { \"id\": 444, \"name\": \"头孢美他唑\" }, { \"id\": 445, \"name\": \"盐酸速溶表阿霉素\" }, { \"id\": 447, \"name\": \"泽它\" }, { \"id\": 449, \"name\": \"止痛灵\" }, { \"id\": 451, \"name\": \"蔗糖硫酸酯铝\" }, { \"id\": 452, \"name\": \"镇痛醚\" }, { \"id\": 453, \"name\": \"正太霉素\" }, { \"id\": 454, \"name\": \"正泰霉素\" }, { \"id\": 456, \"name\": \"竹桃霉素四乙酰酯\" }, { \"id\": 457, \"name\": \"占替诺烟酸盐\" }, { \"id\": 460, \"name\": \"重碳酸钠\" }, { \"id\": 461, \"name\": \"镇痛新\" }, { \"id\": 464, \"name\": \"再欣\" }, { \"id\": 468, \"name\": \"扎西胞苷\" }, { \"id\": 470, \"name\": \"右旋布诺洛尔\" }, { \"id\": 472, \"name\": \"止血定\" }, { \"id\": 473, \"name\": \"右旋蛋氨酸\" }, { \"id\": 475, \"name\": \"右旋多巴加苄丝肼\" }, { \"id\": 476, \"name\": \"右旋多巴/羟苄丝肼\" }, { \"id\": 477, \"name\": \"右旋丁萘酮心安\" }, { \"id\": 478, \"name\": \"止血芳酸\" }, { \"id\": 479, \"name\": \"右旋甘氨酸\" }, { \"id\": 480, \"name\": \"右旋谷氨酸\" }, { \"id\": 482, \"name\": \"Swashes\" }, { \"id\": 483, \"name\": \"周效磺胺\" }, { \"id\": 486, \"name\": \"止血环酸\" }, { \"id\": 487, \"name\": \"右旋精氨酸\" }, { \"id\": 489, \"name\": \"右旋甲丙嗪\" }, { \"id\": 490, \"name\": \"中性精蛋白锌胰岛素\" }, { \"id\": 491, \"name\": \"右旋18甲基炔诺酮\" }, { \"id\": 492, \"name\": \"右旋甲基炔诺酮\" }, { \"id\": 493, \"name\": \"右旋甲基炔诺孕酮\" }, { \"id\": 495, \"name\": \"右旋甲炔诺酮\" }, { \"id\": 496, \"name\": \"右旋甲状腺素\" }, { \"id\": 497, \"name\": \"右旋甲状腺素钠\" }, { \"id\": 498, \"name\": \"右旋抗坏血酸\" }, { \"id\": 502, \"name\": \"右旋赖氨酸单盐酸盐\" }, { \"id\": 504, \"name\": \"增效联磺\" }, { \"id\": 506, \"name\": \"止血敏\" }, { \"id\": 507, \"name\": \"右旋门冬酰氨酶\" }, { \"id\": 508, \"name\": \"右旋门冬酰胺酶\" }, { \"id\": 509, \"name\": \"右旋霉素\" }, { \"id\": 511, \"name\": \"右旋咪唑盐酸盐\" }, { \"id\": 514, \"name\": \"SA2\" }, { \"id\": 517, \"name\": \"右旋驱虫净\" }, { \"id\": 519, \"name\": \"右旋溶肉瘤素\" }, { \"id\": 520, \"name\": \"右旋溶血瘤素\" }, { \"id\": 521, \"name\": \"中性人胰岛素\" }, { \"id\": 522, \"name\": \"右旋色氨酸\" }, { \"id\": 526, \"name\": \"右旋四碘甲状腺原氨酸钠\" }, { \"id\": 527, \"name\": \"右旋四咪唑\" }, { \"id\": 528, \"name\": \"右旋四氢巴马汀\" }, { \"id\": 530, \"name\": \"右旋四氢掌叶防己碱\" }, { \"id\": 532, \"name\": \"扎西他滨\" }, { \"id\": 534, \"name\": \"右旋天门冬酰胺酶\" }, { \"id\": 537, \"name\": \"右旋氧氟沙星\" }, { \"id\": 538, \"name\": \"右旋延胡索乙素\" }, { \"id\": 546, \"name\": \"足叶草乙甙\" }, { \"id\": 547, \"name\": \"右氧氟沙星\" }, { \"id\": 549, \"name\": \"障眼明\" }, { \"id\": 551, \"name\": \"助孕素\" }, { \"id\": 552, \"name\": \"足叶噻吩甙\" }, { \"id\": 553, \"name\": \"助孕酮\" }, { \"id\": 554, \"name\": \"足叶乙代\" }, { \"id\": 555, \"name\": \"足叶乙甙\" }, { \"id\": 556, \"name\": \"足叶乙甙表鬼臼毒甙\" }, { \"id\": 560, \"name\": \"重组α-2a干扰素\" }, { \"id\": 564, \"name\": \"重组人白介素-2\" }, { \"id\": 565, \"name\": \"重组人白细胞介素-2\" }, { \"id\": 567, \"name\": \"重组人粒细胞集落刺激因子(大肠杆菌)\" }, { \"id\": 569, \"name\": \"重质氧化镁\" }, { \"id\": 571, \"name\": \"乙酰水杨酸锌\" }, { \"id\": 572, \"name\": \"必理能\" }, { \"id\": 574, \"name\": \"易心通\" }, { \"id\": 576, \"name\": \"右旋糖酐(微分子)\" }, { \"id\": 578, \"name\": \"右旋糖酐-10\" }, { \"id\": 579, \"name\": \"右旋糖酐-40\" }, { \"id\": 581, \"name\": \"右旋糖酐-70\" }, { \"id\": 582, \"name\": \"乐朗\" }, { \"id\": 585, \"name\": \"莱美兴\" }, { \"id\": 586, \"name\": \"亚硝戊酯\" }, { \"id\": 589, \"name\": \"银杏叶黄酮甙\" }, { \"id\": 590, \"name\": \"右旋异可利定\" }, { \"id\": 592, \"name\": \"Ampicillin Sodium/Sulbactam Sodium\" }, { \"id\": 593, \"name\": \"万艾可\" }, { \"id\": 597, \"name\": \"乙酰氧肟酸\" }, { \"id\": 598, \"name\": \"17α-己酰氧孕酮\" }, { \"id\": 599, \"name\": \"银杏叶总黄酮\" }, { \"id\": 600, \"name\": \"银杏叶制剂\" }, { \"id\": 601, \"name\": \"乙酰竹桃霉素\" }, { \"id\": 606, \"name\": \"乙氧苯酰胺\" }, { \"id\": 611, \"name\": \"Viagra\" }, { \"id\": 613, \"name\": \"盐酸格雷西龙\" }, { \"id\": 614, \"name\": \"一氧化二氮\" }, { \"id\": 616, \"name\": \"异烟肼对氨基水杨酸盐\" }, { \"id\": 617, \"name\": \"药用洁而乐\" }, { \"id\": 619, \"name\": \"医用酒精\" }, { \"id\": 623, \"name\": \"异烟肼-利福平\" }, { \"id\": 624, \"name\": \"益压利\" }, { \"id\": 625, \"name\": \"药用赖氨酸\" }, { \"id\": 626, \"name\": \"药用氯化钾\" }, { \"id\": 627, \"name\": \"药用硫酸镁\" }, { \"id\": 628, \"name\": \"异烟脲\" }, { \"id\": 629, \"name\": \"愈疡宁\" }, { \"id\": 630, \"name\": \"药用柠檬酸钙\" }, { \"id\": 631, \"name\": \"乙氧萘青霉素\" }, { \"id\": 632, \"name\": \"乙氧萘青霉素钠\" }, { \"id\": 633, \"name\": \"药用尿素\" }, { \"id\": 635, \"name\": \"一叶萩碱\" }, { \"id\": 637, \"name\": \"胰液素\" }, { \"id\": 639, \"name\": \"药用碳\" }, { \"id\": 640, \"name\": \"抑胰肽酶\" }, { \"id\": 641, \"name\": \"药用碳酸钙\" }, { \"id\": 642, \"name\": \"药用碳酸镁\" }, { \"id\": 643, \"name\": \"药用碳酸氢钠\" }, { \"id\": 644, \"name\": \"乙氧香豆素\" }, { \"id\": 646, \"name\": \"药用溴化铵\" }, { \"id\": 649, \"name\": \"药用溴化钠\" }, { \"id\": 650, \"name\": \"异烟酰肼\" }, { \"id\": 651, \"name\": \"异烟酰肼香兰醛腙\" }, { \"id\": 656, \"name\": \"芸芝胞内多糖\" }, { \"id\": 659, \"name\": \"云芝多糖\" }, { \"id\": 661, \"name\": \"尤卓尔\" }, { \"id\": 663, \"name\": \"乙酯黄酮\" }, { \"id\": 664, \"name\": \"异唑肼\" }, { \"id\": 671, \"name\": \"Ly127935\" }, { \"id\": 672, \"name\": \"Festamoxin\" }, { \"id\": 673, \"name\": \"乙种维生素\" }, { \"id\": 675, \"name\": \"胰增血糖素\" }, { \"id\": 678, \"name\": \"组胺磷酸盐\" }, { \"id\": 683, \"name\": \"竹安新\" }, { \"id\": 685, \"name\": \"6059-S\" }, { \"id\": 686, \"name\": \"右布诺洛尔盐酸盐\" }, { \"id\": 687, \"name\": \"脂必清\" }, { \"id\": 688, \"name\": \"制斑素\" }, { \"id\": 689, \"name\": \"唑吡酮\" }, { \"id\": 692, \"name\": \"促白细胞生成素\" }, { \"id\": 695, \"name\": \"重曹\" }, { \"id\": 696, \"name\": \"美欧卡\" }, { \"id\": 698, \"name\": \"整肠剂\" }, { \"id\": 699, \"name\": \"治喘灵\" }, { \"id\": 700, \"name\": \"治喘宁\" }, { \"id\": 701, \"name\": \"舟车宁\" }, { \"id\": 702, \"name\": \"整肠生\" }, { \"id\": 703, \"name\": \"右多巴\" }, { \"id\": 704, \"name\": \"仲丁比妥\" }, { \"id\": 708, \"name\": \"右动脉酚\" }, { \"id\": 709, \"name\": \"正定霉素\" }, { \"id\": 710, \"name\": \"右丁酮心安\" }, { \"id\": 713, \"name\": \"治尔乐\" }, { \"id\": 714, \"name\": \"治尔乐100\" }, { \"id\": 715, \"name\": \"Zentel\" }, { \"id\": 716, \"name\": \"憎恶星\" }, { \"id\": 717, \"name\": \"泽发\" }, { \"id\": 719, \"name\": \"右啡诺酒石酸盐\" }, { \"id\": 721, \"name\": \"右氟沙星甲磺酸盐\" }, { \"id\": 723, \"name\": \"中分子右旋糖酐\" }, { \"id\": 725, \"name\": \"治肝快\" }, { \"id\": 726, \"name\": \"争光霉素\" }, { \"id\": 727, \"name\": \"争光霉素A5\" }, { \"id\": 728, \"name\": \"壮观霉素\" }, { \"id\": 729, \"name\": \"增光素\" }, { \"id\": 730, \"name\": \"Ginkgo Biloba Extract\" }, { \"id\": 732, \"name\": \"亚硝基铁氰化钠二水合物\" }, { \"id\": 733, \"name\": \"Doxycycline Hyclate\" }, { \"id\": 735, \"name\": \"Zithromax\" }, { \"id\": 737, \"name\": \"柱晶白霉素\" }, { \"id\": 739, \"name\": \"治菌必妥\" }, { \"id\": 740, \"name\": \"制菌磺\" }, { \"id\": 742, \"name\": \"制菌霉素\" }, { \"id\": 744, \"name\": \"正康\" }, { \"id\": 746, \"name\": \"右卡巴司丁盐酸盐\" }, { \"id\": 747, \"name\": \"右卡巴斯汀盐酸盐\" }, { \"id\": 755, \"name\": \"右洛复\" }, { \"id\": 758, \"name\": \"自力霉素\" }, { \"id\": 759, \"name\": \"氨苄西林和舒巴坦钠\" }, { \"id\": 767, \"name\": \"重硫酸喹啉\" }, { \"id\": 768, \"name\": \"棕榈酸氯霉素\" }, { \"id\": 769, \"name\": \"棕榈酸氯霉素酯\" }, { \"id\": 770, \"name\": \"棕榈酸哌泊塞嗪\" }, { \"id\": 771, \"name\": \"棕榈酸哌泊噻嗪\" }, { \"id\": 773, \"name\": \"唑啉头孢菌素\" }, { \"id\": 774, \"name\": \"治淋炎\" }, { \"id\": 775, \"name\": \"唑嘧胺\" }, { \"id\": 777, \"name\": \"着麦得\" }, { \"id\": 779, \"name\": \"捉迷明\" }, { \"id\": 780, \"name\": \"右美马嗪\" }, { \"id\": 787, \"name\": \"右咪唑\" }, { \"id\": 788, \"name\": \"S-Adenosylmethionine\" }, { \"id\": 792, \"name\": \"植萘醌\" }, { \"id\": 793, \"name\": \"赞诺欣\" }, { \"id\": 794, \"name\": \"止呕灵\" }, { \"id\": 795, \"name\": \"右匹克隆\" }, { \"id\": 796, \"name\": \"再普乐\" }, { \"id\": 798, \"name\": \"正肾\" }, { \"id\": 799, \"name\": \"紫素\" }, { \"id\": 805, \"name\": \"紫苏霉素\" }, { \"id\": 806, \"name\": \"正肾素\" }, { \"id\": 807, \"name\": \"正肾上腺素\" }, { \"id\": 808, \"name\": \"紫酸铁\" }, { \"id\": 811, \"name\": \"亚砷酸酐\" }, { \"id\": 812, \"name\": \"盐酸山埂菜碱(消旋)\" }, { \"id\": 813, \"name\": \"盐酸山梗菜碱\" }, { \"id\": 814, \"name\": \"盐酸四环癸胺\" }, { \"id\": 818, \"name\": \"盐酸四甲氧苯酰胺\" }, { \"id\": 819, \"name\": \"盐酸赛克利嗪\" }, { \"id\": 820, \"name\": \"盐酸双氯醇胺\" }, { \"id\": 821, \"name\": \"盐酸赛罗卡因\" }, { \"id\": 822, \"name\": \"盐酸噻氯匹啶\" }, { \"id\": 823, \"name\": \"盐酸赛洛唑林\" }, { \"id\": 824, \"name\": \"依斯迈林\" }, { \"id\": 826, \"name\": \"盐酸四南唑嗪\" }, { \"id\": 827, \"name\": \"盐酸四喃唑嗪\" }, { \"id\": 828, \"name\": \"盐酸双氢埃托啡\" }, { \"id\": 836, \"name\": \"烟酸生育酚酯\" }, { \"id\": 837, \"name\": \"盐酸双氧异丙嗪\" }, { \"id\": 841, \"name\": \"一水头孢氨苄\" }, { \"id\": 842, \"name\": \"异噻酮布洛芬\" }, { \"id\": 847, \"name\": \"盐酸妥卡胺\" }, { \"id\": 848, \"name\": \"盐酸妥卡律\" }, { \"id\": 849, \"name\": \"盐酸妥拉苏林\" }, { \"id\": 851, \"name\": \"盐酸托品西隆\" }, { \"id\": 853, \"name\": \"盐酸替托尼定\" }, { \"id\": 854, \"name\": \"盐酸托烷司琼\" }, { \"id\": 855, \"name\": \"盐酸脱氧土霉素\" }, { \"id\": 856, \"name\": \"盐酸胃复安\" }, { \"id\": 858, \"name\": \"盐酸万乃洛韦\" }, { \"id\": 859, \"name\": \"烟酸维生素E\" }, { \"id\": 862, \"name\": \"伊索显\" }, { \"id\": 863, \"name\": \"伊索显300\" }, { \"id\": 864, \"name\": \"盐酸硝吡胺甲酯\" }, { \"id\": 868, \"name\": \"盐酸心得安\" }, { \"id\": 869, \"name\": \"盐酸新福林\" }, { \"id\": 871, \"name\": \"盐酸溴环己胺醇\" }, { \"id\": 878, \"name\": \"盐酸西米替丁\" }, { \"id\": 880, \"name\": \"盐酸小蘖碱\" }, { \"id\": 882, \"name\": \"盐酸西替立嗪\" }, { \"id\": 883, \"name\": \"盐酸消炎灵\" }, { \"id\": 885, \"name\": \"烟酸乙胺\" }, { \"id\": 886, \"name\": \"盐酸异博丁\" }, { \"id\": 887, \"name\": \"盐酸异搏定\" }, { \"id\": 889, \"name\": \"盐酸异丙基肾上肾素\" }, { \"id\": 892, \"name\": \"依沙丫啶\" }, { \"id\": 893, \"name\": \"盐酸氧氮芥\" }, { \"id\": 894, \"name\": \"盐酸氧化氮芥\" }, { \"id\": 897, \"name\": \"盐酸依米帕明\" }, { \"id\": 898, \"name\": \"盐酸乙吗噻嗪\" }, { \"id\": 899, \"name\": \"盐酸氧四环素\" }, { \"id\": 900, \"name\": \"盐酸炎痛静\" }, { \"id\": 904, \"name\": \"碳酸乙酯奎宁\" }, { \"id\": 910, \"name\": \"盐酸右丁洛尔\" }, { \"id\": 911, \"name\": \"盐酸正定霉素\" }, { \"id\": 913, \"name\": \"盐酸壮观霉素\" }, { \"id\": 914, \"name\": \"盐酸状观霉素\" }, { \"id\": 916, \"name\": \"烟酸占替诺\" }, { \"id\": 917, \"name\": \"盐酸右旋丁萘酮心安\" }, { \"id\": 918, \"name\": \"盐酸右旋山梗菜碱\" }, { \"id\": 921, \"name\": \"咽泰\" }, { \"id\": 923, \"name\": \"优妥\" }, { \"id\": 924, \"name\": \"幼托\" }, { \"id\": 925, \"name\": \"孕酮\" }, { \"id\": 926, \"name\": \"依托泊甙\" }, { \"id\": 927, \"name\": \"依托泊糖苷\" }, { \"id\": 929, \"name\": \"右糖酐铁\" }, { \"id\": 930, \"name\": \"氧痛惊宁\" }, { \"id\": 931, \"name\": \"乙磺己脲\" }, { \"id\": 934, \"name\": \"依他康唑\" }, { \"id\": 935, \"name\": \"药特灵\" }, { \"id\": 936, \"name\": \"宜妥利(依托咪酯脂肪乳)\" }, { \"id\": 938, \"name\": \"约特罗克西酸\" }, { \"id\": 939, \"name\": \"约特洛兰\" }, { \"id\": 942, \"name\": \"吲妥拉新\" }, { \"id\": 943, \"name\": \"亚特那唑\" }, { \"id\": 945, \"name\": \"诱托平\" }, { \"id\": 946, \"name\": \"依托扑沙\" }, { \"id\": 947, \"name\": \"英太青\" }, { \"id\": 948, \"name\": \"压泰生\" }, { \"id\": 949, \"name\": \"抑肽酸\" }, { \"id\": 951, \"name\": \"炎痛停\" }, { \"id\": 952, \"name\": \"延通心\" }, { \"id\": 953, \"name\": \"延痛心\" }, { \"id\": 954, \"name\": \"炎痛喜康\" }, { \"id\": 956, \"name\": \"胰弹性酶\" }, { \"id\": 957, \"name\": \"乙妥因\" }, { \"id\": 958, \"name\": \"乙妥英\" }, { \"id\": 959, \"name\": \"依他右辛\" }, { \"id\": 962, \"name\": \"异维甲酸\" }, { \"id\": 964, \"name\": \"育未生\" }, { \"id\": 966, \"name\": \"异维生素A\" }, { \"id\": 967, \"name\": \"异维生素A酸\" }, { \"id\": 969, \"name\": \"3-乙乌头碱\" }, { \"id\": 970, \"name\": \"优维显\" }, { \"id\": 972, \"name\": \"氧威\" }, { \"id\": 973, \"name\": \"异噁唑酰肼\" }, { \"id\": 974, \"name\": \"菸酰胺\" }, { \"id\": 976, \"name\": \"乙酰胺吡咯酮\" }, { \"id\": 977, \"name\": \"乙酰胺吡咯烷酮\" }, { \"id\": 980, \"name\": \"乙酰氨基苯酚\" }, { \"id\": 981, \"name\": \"乙酰氨基酚\" }, { \"id\": 985, \"name\": \"益辛保\" }, { \"id\": 987, \"name\": \"N-乙酰-L-半胱氨酸\" }, { \"id\": 988, \"name\": \"N-乙酰半胱氨酸\" }, { \"id\": 989, \"name\": \"乙酰半胱胺酸\" }, { \"id\": 990, \"name\": \"乙烯吡咯酮\" }, { \"id\": 992, \"name\": \"乙酰白霉素\" }, { \"id\": 993, \"name\": \"β-乙酰丙酸钙\" }, { \"id\": 994, \"name\": \"乙酰丙酸钙\" }, { \"id\": 996, \"name\": \"美格西\" }, { \"id\": 999, \"name\": \"芸香甙\" }, { \"id\": 1004, \"name\": \"孕烯二酮\" }, { \"id\": 1008, \"name\": \"右旋泛酸钙\" }, { \"id\": 1011, \"name\": \"乙型肝炎基因工程疫苗\" }, { \"id\": 1012, \"name\": \"乙型肝炎免疫球蛋白\" }, { \"id\": 1017, \"name\": \"乙酰甲萘醌\" }, { \"id\": 1018, \"name\": \"乙酰甲萘氢醌\" }, { \"id\": 1019, \"name\": \"亚硝基氰化钠\" }, { \"id\": 1020, \"name\": \"乙酰甲羟孕酮\" }, { \"id\": 1021, \"name\": \"亚硝基铁氰化钠\" }, { \"id\": 1026, \"name\": \"美普清\" }, { \"id\": 1027, \"name\": \"右旋氯苯吡胺\" }, { \"id\": 1028, \"name\": \"乙酰亮丙瑞林\" }, { \"id\": 1032, \"name\": \"胰腺酶\" }, { \"id\": 1037, \"name\": \"抑血凝\" }, { \"id\": 1038, \"name\": \"亚硝脲氮芥\" }, { \"id\": 1039, \"name\": \"乙酰偶氮胺\" }, { \"id\": 1042, \"name\": \"右旋扑尔敏\" }, { \"id\": 1053, \"name\": \"胰酵素\" }, { \"id\": 1054, \"name\": \"亚硝酸3-甲基丁酯\" }, { \"id\": 1056, \"name\": \"依西酸戊烷脒\" }, { \"id\": 1058, \"name\": \"乙酰水杨酸\" }, { \"id\": 1059, \"name\": \"乙酰水杨酸对乙酰胺苯酯\" }, { \"id\": 1060, \"name\": \"阿司匹林钙脲\" }, { \"id\": 1063, \"name\": \"盐酸丙嗪\" }, { \"id\": 1068, \"name\": \"盐酸丙氧苯卡因\" }, { \"id\": 1069, \"name\": \"盐酸苯乙福明\" }, { \"id\": 1072, \"name\": \"盐酸查诺顿\" }, { \"id\": 1073, \"name\": \"雅施达(培哚普利)\" }, { \"id\": 1074, \"name\": \"意施丁\" }, { \"id\": 1077, \"name\": \"盐酸地卡因\" }, { \"id\": 1078, \"name\": \"乙酰水杨酸钙脲\" }, { \"id\": 1080, \"name\": \"盐酸度冷丁\" }, { \"id\": 1081, \"name\": \"盐酸多滤平\" }, { \"id\": 1082, \"name\": \"盐酸多虑平\" }, { \"id\": 1084, \"name\": \"盐酸地美露\" }, { \"id\": 1085, \"name\": \"盐酸冬眠灵\" }, { \"id\": 1086, \"name\": \"盐酸地霉素\" }, { \"id\": 1087, \"name\": \"盐酸多普兰\" }, { \"id\": 1090, \"name\": \"盐酸多西霉素\" }, { \"id\": 1093, \"name\": \"盐酸丁氧苯哌啶丙酮\" }, { \"id\": 1096, \"name\": \"盐酸氮卓斯丁\" }, { \"id\": 1098, \"name\": \"盐酸二苯安明\" }, { \"id\": 1099, \"name\": \"盐酸二苯甲甲哌嗪\" }, { \"id\": 1101, \"name\": \"盐酸恩丹西酮\" }, { \"id\": 1102, \"name\": \"盐酸恩丹西酮二水合物\" }, { \"id\": 1103, \"name\": \"盐酸二甲胺四环素\" }, { \"id\": 1108, \"name\": \"盐酸二氢吗啡酮\" }, { \"id\": 1109, \"name\": \"烟酸二乙胺\" }, { \"id\": 1110, \"name\": \"盐酸二乙胺苯丙酮\" }, { \"id\": 1113, \"name\": \"盐酸二氧异丙嗪\" }, { \"id\": 1115, \"name\": \"盐酸反胺苯环醇\" }, { \"id\": 1116, \"name\": \"盐酸氟安定\" }, { \"id\": 1117, \"name\": \"盐酸氟苯安定\" }, { \"id\": 1118, \"name\": \"盐酸氟苯丙胺\" }, { \"id\": 1119, \"name\": \"盐酸氟苯哌苯醚\" }, { \"id\": 1121, \"name\": \"盐酸氟桂嗪\" }, { \"id\": 1122, \"name\": \"乙酸氟甲强的松龙\" }, { \"id\": 1124, \"name\": \"盐酸番木鳖硷\" }, { \"id\": 1125, \"name\": \"盐酸呋喃硝胺\" }, { \"id\": 1126, \"name\": \"盐酸副肾碱\" }, { \"id\": 1127, \"name\": \"盐酸放线状观素\" }, { \"id\": 1129, \"name\": \"亚砷酐\" }, { \"id\": 1133, \"name\": \"盐酸格雷西隆\" }, { \"id\": 1137, \"name\": \"盐酸环丙氟氯辛\" }, { \"id\": 1138, \"name\": \"Broncho-Vaxom\" }, { \"id\": 1139, \"name\": \"盐酸环丁甲氢吗啡\" }, { \"id\": 1145, \"name\": \"一水环己烯胺头孢菌素\" }, { \"id\": 1146, \"name\": \"盐酸黄连素\" }, { \"id\": 1152, \"name\": \"异舒吉\" }, { \"id\": 1153, \"name\": \"异羧肼\" }, { \"id\": 1154, \"name\": \"罂粟硷\" }, { \"id\": 1156, \"name\": \"老山云芝多糖\" }, { \"id\": 1158, \"name\": \"盐酸肼酞嗪\" }, { \"id\": 1159, \"name\": \"烟酸肌醇酯\" }, { \"id\": 1160, \"name\": \"盐酸甲福明\" }, { \"id\": 1161, \"name\": \"盐酸金刚胺\" }, { \"id\": 1163, \"name\": \"盐酸甲基苄肼\" }, { \"id\": 1170, \"name\": \"盐酸甲硫达嗪\" }, { \"id\": 1171, \"name\": \"盐酸甲氯普胺\" }, { \"id\": 1172, \"name\": \"盐酸洁霉素\" }, { \"id\": 1173, \"name\": \"盐酸甲哌氟丙嗪\" }, { \"id\": 1174, \"name\": \"盐酸甲氰咪胍\" }, { \"id\": 1175, \"name\": \"盐酸甲烯土霉素\" }, { \"id\": 1176, \"name\": \"盐酸甲氧胺\" }, { \"id\": 1180, \"name\": \"罂粟碱盐酸盐\" }, { \"id\": 1185, \"name\": \"头孢吡肟盐酸盐\" }, { \"id\": 1186, \"name\": \"盐酸可乐宁\" }, { \"id\": 1187, \"name\": \"盐酸克敏嗪\" }, { \"id\": 1188, \"name\": \"盐酸克塞平\" }, { \"id\": 1189, \"name\": \"盐酸卡特洛尔\" }, { \"id\": 1191, \"name\": \"依色林\" }, { \"id\": 1194, \"name\": \"因苏林(中效纯化猪胰岛素)\" }, { \"id\": 1196, \"name\": \"盐酸硫胺\" }, { \"id\": 1197, \"name\": \"L-盐酸赖氨酸\" }, { \"id\": 1198, \"name\": \"盐酸-L-赖氨酸\" }, { \"id\": 1199, \"name\": \"盐酸L-赖氨酸\" }, { \"id\": 1202, \"name\": \"盐酸氯苯苄嗪\" }, { \"id\": 1206, \"name\": \"盐酸氯苯甲嗪\" }, { \"id\": 1207, \"name\": \"盐酸氯丙咪嗪\" }, { \"id\": 1208, \"name\": \"盐酸氯丙米嗪\" }, { \"id\": 1210, \"name\": \"盐酸氯苯哌酰胺\" }, { \"id\": 1212, \"name\": \"施立碟\" }, { \"id\": 1213, \"name\": \"盐酸氯喘\" }, { \"id\": 1214, \"name\": \"异山梨醇硝酸酯\" }, { \"id\": 1217, \"name\": \"盐酸硫氮卓酮\" }, { \"id\": 1218, \"name\": \"盐酸氯氟菲醇\" }, { \"id\": 1219, \"name\": \"盐酸氯环利嗪\" }, { \"id\": 1220, \"name\": \"盐酸氯吉霉素\" }, { \"id\": 1221, \"name\": \"盐酸氯洁霉素\" }, { \"id\": 1224, \"name\": \"盐酸林肯霉素\" }, { \"id\": 1226, \"name\": \"维生素B1盐酸盐\" }, { \"id\": 1227, \"name\": \"盐酸硫利哒嗪\" }, { \"id\": 1228, \"name\": \"盐酸氯林可霉素\" }, { \"id\": 1229, \"name\": \"盐酸氯林霉素\" }, { \"id\": 1230, \"name\": \"盐酸硫醚嗪\" }, { \"id\": 1234, \"name\": \"盐酸氯哌拉米\" }, { \"id\": 1235, \"name\": \"盐酸氯普马嗪\" }, { \"id\": 1237, \"name\": \"盐酸立司吉林\" }, { \"id\": 1239, \"name\": \"异山梨糖醇单硝酸酯\" }, { \"id\": 1243, \"name\": \"易顺脉\" }, { \"id\": 1244, \"name\": \"盐酸米安色林\" }, { \"id\": 1245, \"name\": \"盐酸唛啶\" }, { \"id\": 1248, \"name\": \"盐酸吗啡酮\" }, { \"id\": 1250, \"name\": \"盐酸麻黄硷\" }, { \"id\": 1251, \"name\": \"盐酸麻黄素\" }, { \"id\": 1255, \"name\": \"盐酸吗啉吲酮\" }, { \"id\": 1257, \"name\": \"盐酸米帕明\" }, { \"id\": 1258, \"name\": \"Naltrexone HCl\" }, { \"id\": 1260, \"name\": \"盐酸麦普替林\" }, { \"id\": 1261, \"name\": \"盐酸吗嗪\" }, { \"id\": 1262, \"name\": \"盐酸美速胺\" }, { \"id\": 1263, \"name\": \"盐酸美散痛\" }, { \"id\": 1264, \"name\": \"盐酸马茚酮\" }, { \"id\": 1266, \"name\": \"易使宁\" }, { \"id\": 1269, \"name\": \"亚苏那啶马来酸盐\" }, { \"id\": 1270, \"name\": \"盐酸奴佛卡因\" }, { \"id\": 1271, \"name\": \"盐酸萘福潘\" }, { \"id\": 1272, \"name\": \"盐酸萘福泮\" }, { \"id\": 1274, \"name\": \"盐酸萘甲唑啉\" }, { \"id\": 1276, \"name\": \"盐酸纳络酮\" }, { \"id\": 1277, \"name\": \"盐酸伪麻黄碱-对乙酰氨基酚-扑尔敏\" }, { \"id\": 1278, \"name\": \"盐酸哌醋甲酯\" }, { \"id\": 1279, \"name\": \"盐酸哌力苯沙明\" }, { \"id\": 1280, \"name\": \"盐酸吡利啶\" }, { \"id\": 1281, \"name\": \"盐酸普鲁卡地鲁\" }, { \"id\": 1282, \"name\": \"盐酸普鲁卡因酰胺\" }, { \"id\": 1283, \"name\": \"盐酸普鲁米近\" }, { \"id\": 1284, \"name\": \"盐酸普鲁帕酮\" }, { \"id\": 1285, \"name\": \"盐酸普奈洛尔\" }, { \"id\": 1286, \"name\": \"盐酸帕帕非林\" }, { \"id\": 1287, \"name\": \"盐酸怕怕非林\" }, { \"id\": 1288, \"name\": \"盐酸普帕西芬\" }, { \"id\": 1289, \"name\": \"盐酸培他啶\" }, { \"id\": 1290, \"name\": \"盐酸培他司汀\" }, { \"id\": 1291, \"name\": \"盐酸平痛新\" }, { \"id\": 1296, \"name\": \"盐酸羟丁宁\" }, { \"id\": 1297, \"name\": \"盐酸羟二氢可待因酮\" }, { \"id\": 1298, \"name\": \"盐酸奇放线菌素\" }, { \"id\": 1299, \"name\": \"盐酸氢化吗啡酮\" }, { \"id\": 1300, \"name\": \"盐酸去甲阿米替林\" }, { \"id\": 1301, \"name\": \"盐酸去甲丙咪嗪\" }, { \"id\": 1303, \"name\": \"盐酸去甲金霉素\" }, { \"id\": 1304, \"name\": \"盐酸去甲麻黄碱\" }, { \"id\": 1305, \"name\": \"盐酸去甲咪嗪\" }, { \"id\": 1306, \"name\": \"盐酸去甲氧基柔红霉素\" }, { \"id\": 1308, \"name\": \"盐酸羟可酮\" }, { \"id\": 1309, \"name\": \"盐酸强力霉素\" }, { \"id\": 1310, \"name\": \"盐酸曲马多\" }, { \"id\": 1311, \"name\": \"盐酸奇霉素\" }, { \"id\": 1312, \"name\": \"盐酸羟哌氟丙嗪\" }, { \"id\": 1313, \"name\": \"盐酸羟氢吗啡酮\" }, { \"id\": 1315, \"name\": \"盐酸祛痰菜碱\" }, { \"id\": 1317, \"name\": \"盐酸祛炎痛\" }, { \"id\": 1324, \"name\": \"盐酸室安卡因\" }, { \"id\": 1325, \"name\": \"盐酸叔丁啡\" }, { \"id\": 1326, \"name\": \"盐酸四氟吡拉嗪\" }, { \"id\": 1330, \"name\": \"稳可信\" }, { \"id\": 1331, \"name\": \"伊可新\" }, { \"id\": 1332, \"name\": \"伊康唑\" }, { \"id\": 1333, \"name\": \"依康唑\" }, { \"id\": 1334, \"name\": \"益康唑硝酸盐\" }, { \"id\": 1336, \"name\": \"依膦\" }, { \"id\": 1340, \"name\": \"右氯苯吡胺\" }, { \"id\": 1341, \"name\": \"右氯苯吡丙胺\" }, { \"id\": 1343, \"name\": \"右氯苯那敏马来酸盐\" }, { \"id\": 1344, \"name\": \"烟浪丁\" }, { \"id\": 1345, \"name\": \"怡乐定\" }, { \"id\": 1346, \"name\": \"异乐定\" }, { \"id\": 1348, \"name\": \"忧虑定\" }, { \"id\": 1349, \"name\": \"伊拉地平\" }, { \"id\": 1351, \"name\": \"优路芬\" }, { \"id\": 1352, \"name\": \"优洛芬\" }, { \"id\": 1353, \"name\": \"郁乐复\" }, { \"id\": 1358, \"name\": \"叶绿醌\" }, { \"id\": 1362, \"name\": \"依拉普利\" }, { \"id\": 1366, \"name\": \"眼立爽\" }, { \"id\": 1367, \"name\": \"依立适\" }, { \"id\": 1372, \"name\": \"叶绿酸铜钠\" }, { \"id\": 1373, \"name\": \"叶绿素铜钠盐\" }, { \"id\": 1374, \"name\": \"氧洛沙星\" }, { \"id\": 1376, \"name\": \"乙柳酰胺\" }, { \"id\": 1377, \"name\": \"异磷酰胺\" }, { \"id\": 1383, \"name\": \"优迈\" }, { \"id\": 1384, \"name\": \"吲满胺\" }, { \"id\": 1385, \"name\": \"茚满丙二胺\" }, { \"id\": 1386, \"name\": \"氧咪苄青霉素\" }, { \"id\": 1387, \"name\": \"依姆多\" }, { \"id\": 1389, \"name\": \"异脉定\" }, { \"id\": 1391, \"name\": \"茚满二胺\" }, { \"id\": 1395, \"name\": \"亿梦返\" }, { \"id\": 1396, \"name\": \"忆梦返\" }, { \"id\": 1399, \"name\": \"英明格\" }, { \"id\": 1402, \"name\": \"优麦克斯\" }, { \"id\": 1403, \"name\": \"依木兰\" }, { \"id\": 1404, \"name\": \"优泌林(人正规胰岛素)\" }, { \"id\": 1405, \"name\": \"异脉宁\" }, { \"id\": 1406, \"name\": \"吲满帕胺\" }, { \"id\": 1408, \"name\": \"依米帕明\" }, { \"id\": 1409, \"name\": \"涯米哌唑\" }, { \"id\": 1411, \"name\": \"义美仁\" }, { \"id\": 1414, \"name\": \"育米生\" }, { \"id\": 1415, \"name\": \"雅玛山阿糖胞苷\" }, { \"id\": 1417, \"name\": \"雅玛山胞苷二磷酸胆碱钠盐\" }, { \"id\": 1419, \"name\": \"右美沙芬氢溴酸盐\" }, { \"id\": 1422, \"name\": \"吲满速尿\" }, { \"id\": 1423, \"name\": \"乙吗噻嗪\" }, { \"id\": 1424, \"name\": \"雅玛山四磷酸腺苷二钠\" }, { \"id\": 1425, \"name\": \"乙吗噻嗪盐酸盐\" }, { \"id\": 1426, \"name\": \"雅玛山腺嘌呤\" }, { \"id\": 1427, \"name\": \"异脉停\" }, { \"id\": 1428, \"name\": \"易蒙停\" }, { \"id\": 1429, \"name\": \"雅美泰龙\" }, { \"id\": 1431, \"name\": \"吲满酰胺\" }, { \"id\": 1432, \"name\": \"优锰茁\" }, { \"id\": 1437, \"name\": \"优宁\" }, { \"id\": 1438, \"name\": \"优尼比利\" }, { \"id\": 1439, \"name\": \"压宁定\" }, { \"id\": 1440, \"name\": \"遗尿丁\" }, { \"id\": 1441, \"name\": \"悦宁定(马来酸依那普利)\" }, { \"id\": 1442, \"name\": \"海正美特\" }, { \"id\": 1443, \"name\": \"叶萘酯\" }, { \"id\": 1444, \"name\": \"衣纳利拉\" }, { \"id\": 1445, \"name\": \"伊那普利\" }, { \"id\": 1446, \"name\": \"依那普利马来酸盐\" }, { \"id\": 1449, \"name\": \"依那通\" }, { \"id\": 1451, \"name\": \"抑那通\" }, { \"id\": 1456, \"name\": \"压平定\" }, { \"id\": 1458, \"name\": \"怡泼定一号\" }, { \"id\": 1459, \"name\": \"右扑尔敏\" }, { \"id\": 1460, \"name\": \"怡泼津\" }, { \"id\": 1461, \"name\": \"怡泼律\" }, { \"id\": 1462, \"name\": \"异嘌呤醇\" }, { \"id\": 1464, \"name\": \"乙哌里松\" }, { \"id\": 1466, \"name\": \"约普罗酰胺\" }, { \"id\": 1467, \"name\": \"异帕霉素\" }, { \"id\": 1469, \"name\": \"依帕米星\" }, { \"id\": 1471, \"name\": \"氧哌羟苯头孢菌素\" }, { \"id\": 1472, \"name\": \"氧哌羟苯唑头孢菌素\" }, { \"id\": 1473, \"name\": \"氧哌羟苯唑头孢菌素钠\" }, { \"id\": 1474, \"name\": \"氧哌嗪青霉素\" }, { \"id\": 1475, \"name\": \"氧哌嗪青霉素钠\" }, { \"id\": 1477, \"name\": \"抑平舒\" }, { \"id\": 1480, \"name\": \"异帕沙星\" }, { \"id\": 1483, \"name\": \"抑葡萄糖甙酶\" }, { \"id\": 1484, \"name\": \"易平痫\" }, { \"id\": 1485, \"name\": \"乙炔雌二醇\" }, { \"id\": 1486, \"name\": \"乙炔雌二醇环戊醚\" }, { \"id\": 1489, \"name\": \"叶秋碱\" }, { \"id\": 1491, \"name\": \"异羟基洋地黄毒甙\" }, { \"id\": 1493, \"name\": \"乙炔类黄体酮\" }, { \"id\": 1494, \"name\": \"乙巯拉嗪\" }, { \"id\": 1495, \"name\": \"依屈膦酸钠\" }, { \"id\": 1496, \"name\": \"乙巯匹拉嗪\" }, { \"id\": 1501, \"name\": \"益群生\" }, { \"id\": 1502, \"name\": \"叶醛酸钙\" }, { \"id\": 1504, \"name\": \"异曲替酯\" }, { \"id\": 1507, \"name\": \"异羟洋地黄毒甙\" }, { \"id\": 1509, \"name\": \"抑乳癌\" }, { \"id\": 1512, \"name\": \"抑乳停\" }, { \"id\": 1513, \"name\": \"优瑞脂\" }, { \"id\": 1514, \"name\": \"亚松\" }, { \"id\": 1515, \"name\": \"菸酸\" }, { \"id\": 1517, \"name\": \"益视安\" }, { \"id\": 1520, \"name\": \"盐酸吡苄胺\" }, { \"id\": 1524, \"name\": \"乙苯吡唑酮\" }, { \"id\": 1525, \"name\": \"异丙喘宁\" }, { \"id\": 1532, \"name\": \"依沙吖啶乳酸盐\" }, { \"id\": 1533, \"name\": \"盐酸阿夫唑秦\" }, { \"id\": 1534, \"name\": \"盐酸阿夫唑嗪\" }, { \"id\": 1537, \"name\": \"盐酸阿克拉比星\" }, { \"id\": 1538, \"name\": \"盐酸阿克拉鲁比西\" }, { \"id\": 1539, \"name\": \"盐酸阿克拉霉素\" }, { \"id\": 1540, \"name\": \"盐酸阿克拉霉素B\" }, { \"id\": 1541, \"name\": \"盐酸阿克拉霉素A\" }, { \"id\": 1542, \"name\": \"盐酸阿罗基诺罗尔\" }, { \"id\": 1543, \"name\": \"盐酸阿拉霉素\" }, { \"id\": 1544, \"name\": \"盐酸氨氯吡咪\" }, { \"id\": 1546, \"name\": \"盐酸阿密替林\" }, { \"id\": 1550, \"name\": \"盐酸安太林\" }, { \"id\": 1551, \"name\": \"盐酸安泰乐\" }, { \"id\": 1552, \"name\": \"盐酸阿坦乐尔\" }, { \"id\": 1553, \"name\": \"盐酸安他心\" }, { \"id\": 1554, \"name\": \"盐酸奥坦西隆\" }, { \"id\": 1558, \"name\": \"盐酸表阿霉素\" }, { \"id\": 1561, \"name\": \"盐酸苯丙胺醇\" }, { \"id\": 1562, \"name\": \"盐酸苯苄胺\" }, { \"id\": 1565, \"name\": \"盐酸苯丙羟胺\" }, { \"id\": 1567, \"name\": \"盐酸苯丁胺\" }, { \"id\": 1568, \"name\": \"盐酸吡多醇\" }, { \"id\": 1572, \"name\": \"盐酸吡多辛\" }, { \"id\": 1575, \"name\": \"盐酸苯福林\" }, { \"id\": 1585, \"name\": \"盐酸苄甲苯异丙胺\" }, { \"id\": 1586, \"name\": \"盐酸苯甲嗪\" }, { \"id\": 1588, \"name\": \"盐酸丙卡特鲁\" }, { \"id\": 1589, \"name\": \"盐酸巴坎西林\" }, { \"id\": 1591, \"name\": \"盐酸吡呤噻品\" }, { \"id\": 1592, \"name\": \"盐酸布螺酮\" }, { \"id\": 1594, \"name\": \"盐酸丙咪嗪\" }, { \"id\": 1598, \"name\": \"盐酸吡喃阿霉素\" }, { \"id\": 1599, \"name\": \"盐酸贝那普利\" }, { \"id\": 1601, \"name\": \"异搏丁\" }, { \"id\": 1602, \"name\": \"异搏定\" }, { \"id\": 1607, \"name\": \"异丙酚\" }, { \"id\": 1608, \"name\": \"优布芬\" }, { \"id\": 1613, \"name\": \"优保津\" }, { \"id\": 1614, \"name\": \"异丙基安替比林\" }, { \"id\": 1616, \"name\": \"4-异丙基安替披林\" }, { \"id\": 1617, \"name\": \"异丙基肾上腺素\" }, { \"id\": 1619, \"name\": \"炎必灵\" }, { \"id\": 1621, \"name\": \"依布洛芬\" }, { \"id\": 1622, \"name\": \"异丙眠尔通\" }, { \"id\": 1623, \"name\": \"由必尼美\" }, { \"id\": 1626, \"name\": \"乙苯哌丙酮\" }, { \"id\": 1631, \"name\": \"异丙安替披林\" }, { \"id\": 1633, \"name\": \"异丙嗪盐酸盐\" }, { \"id\": 1634, \"name\": \"异丙肾\" }, { \"id\": 1636, \"name\": \"异丙肾上腺素盐酸盐\" }, { \"id\": 1638, \"name\": \"异搏停\" }, { \"id\": 1643, \"name\": \"永保心灵\" }, { \"id\": 1646, \"name\": \"丙氧芬盐酸盐\" }, { \"id\": 1648, \"name\": \"杨曹\" }, { \"id\": 1649, \"name\": \"异长春花碱\" }, { \"id\": 1651, \"name\": \"愈创木酚甘油醚\" }, { \"id\": 1653, \"name\": \"优喘平\" }, { \"id\": 1657, \"name\": \"吲哒胺\" }, { \"id\": 1658, \"name\": \"吲达胺\" }, { \"id\": 1659, \"name\": \"异丁苯丙酸\" }, { \"id\": 1660, \"name\": \"吲哚布洛芬\" }, { \"id\": 1661, \"name\": \"雅多博明\" }, { \"id\": 1662, \"name\": \"胰蛋白酶抑制剂\" }, { \"id\": 1663, \"name\": \"伊达比星盐酸盐\" }, { \"id\": 1664, \"name\": \"乙底酚\" }, { \"id\": 1665, \"name\": \"银得菲\" }, { \"id\": 1666, \"name\": \"依地钙\" }, { \"id\": 1668, \"name\": \"洋地黄毒甙\" }, { \"id\": 1669, \"name\": \"约多海克索\" }, { \"id\": 1671, \"name\": \"β-吲哚基丙氨酸\" }, { \"id\": 1672, \"name\": \"异丁基哌嗪力复霉素\" }, { \"id\": 1674, \"name\": \"异丁洛芬\" }, { \"id\": 1675, \"name\": \"伊达拉克\" }, { \"id\": 1676, \"name\": \"吲哚拉斯\" }, { \"id\": 1677, \"name\": \"亚德理亚霉素\" }, { \"id\": 1679, \"name\": \"吲哚美沙新\" }, { \"id\": 1680, \"name\": \"吲哚美西辛\" }, { \"id\": 1682, \"name\": \"疡得平\" }, { \"id\": 1684, \"name\": \"吲哒帕胺\" }, { \"id\": 1685, \"name\": \"异丁哌力复霉素\" }, { \"id\": 1686, \"name\": \"雅多普明\" }, { \"id\": 1689, \"name\": \"胰岛素(Insulin Actrapid Hm)\" }, { \"id\": 1691, \"name\": \"胰岛素(Insulin Monotard Hm)\" }, { \"id\": 1692, \"name\": \"胰岛素(Insulin ProtaphanaHmPenfill)\" }, { \"id\": 1693, \"name\": \"胰岛素(Insulin Protaphane Hm)\" }, { \"id\": 1694, \"name\": \"胰岛素(Insulin Ultratard Hm)\" }, { \"id\": 1697, \"name\": \"乙底酸\" }, { \"id\": 1698, \"name\": \"益达生\" }, { \"id\": 1699, \"name\": \"依地酸二钠钙\" }, { \"id\": 1701, \"name\": \"依地酸钠钙\" }, { \"id\": 1705, \"name\": \"乙碘酮\" }, { \"id\": 1706, \"name\": \"益多酯\" }, { \"id\": 1707, \"name\": \"乙二胺丁醇\" }, { \"id\": 1710, \"name\": \"乙二胺四乙酸二钠钙\" }, { \"id\": 1711, \"name\": \"乙二胺四乙酸钠钙\" }, { \"id\": 1716, \"name\": \"依尔康\" }, { \"id\": 1718, \"name\": \"异尔醚\" }, { \"id\": 1719, \"name\": \"易而迷\" }, { \"id\": 1720, \"name\": \"乙二素\" }, { \"id\": 1721, \"name\": \"银耳芽孢糖\" }, { \"id\": 1723, \"name\": \"优福定\" }, { \"id\": 1724, \"name\": \"因弗尔\" }, { \"id\": 1725, \"name\": \"益福乐\" }, { \"id\": 1729, \"name\": \"亚法里亚霉素\" }, { \"id\": 1730, \"name\": \"异氟醚\" }, { \"id\": 1731, \"name\": \"英福美\" }, { \"id\": 1733, \"name\": \"亚砜咪唑\" }, { \"id\": 1734, \"name\": \"依福那\" }, { \"id\": 1735, \"name\": \"Compound Acetylsalicylic Acid\" }, { \"id\": 1736, \"name\": \"宜佛斯酰胺\" }, { \"id\": 1737, \"name\": \"氧氟头孢钠\" }, { \"id\": 1738, \"name\": \"异泛影\" }, { \"id\": 1739, \"name\": \"异泛影葡胺\" }, { \"id\": 1740, \"name\": \"异泛影酸\" }, { \"id\": 1745, \"name\": \"异庚二酯\" }, { \"id\": 1746, \"name\": \"乙肝基因工程疫苗\" }, { \"id\": 1748, \"name\": \"益肝灵\" }, { \"id\": 1749, \"name\": \"愈甘醚\" }, { \"id\": 1750, \"name\": \"泌乐得\" }, { \"id\": 1757, \"name\": \"胰高血糖素\" }, { \"id\": 1759, \"name\": \"亿活\" }, { \"id\": 1760, \"name\": \"玉红\" }, { \"id\": 1763, \"name\": \"茚磺苯酰胺\" }, { \"id\": 1765, \"name\": \"氧化氮\" }, { \"id\": 1766, \"name\": \"氧化氮芥\" }, { \"id\": 1767, \"name\": \"乙琥红霉素\" }, { \"id\": 1768, \"name\": \"约海克所\" }, { \"id\": 1769, \"name\": \"氧化苦参碱\" }, { \"id\": 1773, \"name\": \"晕海宁\" }, { \"id\": 1776, \"name\": \"延胡索乙素\" }, { \"id\": 1781, \"name\": \"乙琥威霉素\" }, { \"id\": 1786, \"name\": \"氧化竹筒箭毒碱\" }, { \"id\": 1789, \"name\": \"氧甲吡嗪\" }, { \"id\": 1790, \"name\": \"乙基苯妥英\" }, { \"id\": 1795, \"name\": \"乙基琥珀酸红霉素酯\" }, { \"id\": 1799, \"name\": \"氧甲基烟酰胺\" }, { \"id\": 1801, \"name\": \"优甲乐\" }, { \"id\": 1802, \"name\": \"优降灵\" }, { \"id\": 1805, \"name\": \"雅激酶\" }, { \"id\": 1806, \"name\": \"右甲马南\" }, { \"id\": 1807, \"name\": \"右甲吗南\" }, { \"id\": 1808, \"name\": \"右甲吗喃\" }, { \"id\": 1809, \"name\": \"优降宁\" }, { \"id\": 1814, \"name\": \"乙甲哌啶二酮\" }, { \"id\": 1816, \"name\": \"烟碱酸\" }, { \"id\": 1817, \"name\": \"烟碱酸胺\" }, { \"id\": 1820, \"name\": \"眼镜蛇神经毒素\" }, { \"id\": 1821, \"name\": \"乙基水杨胺\" }, { \"id\": 1822, \"name\": \"优降糖\" }, { \"id\": 1824, \"name\": \"胰激肽原酶\" }, { \"id\": 1827, \"name\": \"乙基西梭霉素\" }, { \"id\": 1828, \"name\": \"乙基西梭霉素硫酸盐\" }, { \"id\": 1833, \"name\": \"氧甲烟酰胺\" }, { \"id\": 1834, \"name\": \"烟肌酯\" }, { \"id\": 1835, \"name\": \"氧甲唑啉盐酸盐\" }, { \"id\": 1836, \"name\": \"乙基紫苏霉素\" }, { \"id\": 1837, \"name\": \"优克\" }, { \"id\": 1839, \"name\": \"英卡胺\" }, { \"id\": 1842, \"name\": \"易咳净\" }, { \"id\": 1844, \"name\": \"银可络\" }, { \"id\": 1847, \"name\": \"优喹啉\" }, { \"id\": 1850, \"name\": \"异奎宁\" }, { \"id\": 1851, \"name\": \"优奎宁\" }, { \"id\": 1852, \"name\": \"异奎宁硫酸盐\" }, { \"id\": 1853, \"name\": \"易抗凝\" }, { \"id\": 1858, \"name\": \"新灭菌\" }, { \"id\": 1859, \"name\": \"溴麦角环肽\" }, { \"id\": 1860, \"name\": \"溴麦角隐亭\" }, { \"id\": 1861, \"name\": \"溴麦角隐停\" }, { \"id\": 1862, \"name\": \"喜美康\" }, { \"id\": 1864, \"name\": \"喜美灵\" }, { \"id\": 1865, \"name\": \"新敏乐\" }, { \"id\": 1866, \"name\": \"新敏灵\" }, { \"id\": 1867, \"name\": \"相模霉素\" }, { \"id\": 1873, \"name\": \"血脉素\" }, { \"id\": 1878, \"name\": \"心脉舒通\" }, { \"id\": 1879, \"name\": \"溴麦亭\" }, { \"id\": 1880, \"name\": \"西米替丁\" }, { \"id\": 1881, \"name\": \"西咪替丁盐酸盐\" }, { \"id\": 1882, \"name\": \"相模弯霉素\" }, { \"id\": 1883, \"name\": \"息宁\" }, { \"id\": 1884, \"name\": \"仙诺\" }, { \"id\": 1885, \"name\": \"溴钠\" }, { \"id\": 1888, \"name\": \"喜宁保\" }, { \"id\": 1889, \"name\": \"息疟定\" }, { \"id\": 1892, \"name\": \"小蘖碱\" }, { \"id\": 1893, \"name\": \"小蘖碱盐酸盐\" }, { \"id\": 1894, \"name\": \"仙乃乐\" }, { \"id\": 1896, \"name\": \"心内美\" }, { \"id\": 1897, \"name\": \"新诺明\" }, { \"id\": 1899, \"name\": \"心宁美\" }, { \"id\": 1900, \"name\": \"小诺霉素\" }, { \"id\": 1901, \"name\": \"小诺霉素硫酸盐\" }, { \"id\": 1902, \"name\": \"西纳梅脱\" }, { \"id\": 1905, \"name\": \"巡能泰\" }, { \"id\": 1907, \"name\": \"消呕灵\" }, { \"id\": 1908, \"name\": \"消呕宁\" }, { \"id\": 1912, \"name\": \"西普乐(环丙沙星)\" }, { \"id\": 1914, \"name\": \"腺嘌呤阿糖甙\" }, { \"id\": 1915, \"name\": \"腺嘌呤阿糖苷\" }, { \"id\": 1917, \"name\": \"腺嘌呤磷酸盐\" }, { \"id\": 1918, \"name\": \"西泮酸乙酯\" }, { \"id\": 1919, \"name\": \"希普欣(乳酸环丙沙星)\" }, { \"id\": 1921, \"name\": \"溴哌雄醋酯\" }, { \"id\": 1922, \"name\": \"笑气\" }, { \"id\": 1923, \"name\": \"新青Ⅱ号\" }, { \"id\": 1926, \"name\": \"新青霉素Ⅲ\" }, { \"id\": 1927, \"name\": \"新青霉素Ⅱ号\" }, { \"id\": 1929, \"name\": \"新青霉素Ⅱ钠\" }, { \"id\": 1931, \"name\": \"雄茸内酯\" }, { \"id\": 1932, \"name\": \"酰舒\" }, { \"id\": 1933, \"name\": \"潇洒\" }, { \"id\": 1936, \"name\": \"西沙比利\" }, { \"id\": 1938, \"name\": \"小苏打\" }, { \"id\": 1939, \"name\": \"新山的明\" }, { \"id\": 1940, \"name\": \"新斯的明甲硫酸盐\" }, { \"id\": 1942, \"name\": \"硝酸番木鳖碱\" }, { \"id\": 1943, \"name\": \"硝酸季戊醇\" }, { \"id\": 1944, \"name\": \"硝酸季戊四醇酯\" }, { \"id\": 1945, \"name\": \"腺四磷\" }, { \"id\": 1947, \"name\": \"硝酸氯苯咪唑\" }, { \"id\": 1950, \"name\": \"希舒美\" }, { \"id\": 1951, \"name\": \"息斯敏\" }, { \"id\": 1952, \"name\": \"硝酸毛果云香碱\" }, { \"id\": 1953, \"name\": \"硝酸密康唑\" }, { \"id\": 1954, \"name\": \"西梭霉素\" }, { \"id\": 1955, \"name\": \"西梭米星\" }, { \"id\": 1956, \"name\": \"西索米星硫酸盐\" }, { \"id\": 1958, \"name\": \"硝酸匹鲁卡品\" }, { \"id\": 1959, \"name\": \"硝酸匹罗卡品\" }, { \"id\": 1961, \"name\": \"消石素-U\" }, { \"id\": 1962, \"name\": \"硝酸双氯苯咪唑\" }, { \"id\": 1963, \"name\": \"硝酸疋鲁卡品\" }, { \"id\": 1964, \"name\": \"西斯塔\" }, { \"id\": 1968, \"name\": \"硝酸脱水山梨醇\" }, { \"id\": 1969, \"name\": \"硝酸脱水山梨醇酯\" }, { \"id\": 1970, \"name\": \"西斯台唑\" }, { \"id\": 1972, \"name\": \"硝酸戊四醇\" }, { \"id\": 1973, \"name\": \"硝酸戊四醇脂\" }, { \"id\": 1974, \"name\": \"硝酸戊四醇酯\" }, { \"id\": 1976, \"name\": \"Vumon\" }, { \"id\": 1978, \"name\": \"硝酸氧铋\" }, { \"id\": 1980, \"name\": \"硝酸异山梨醇酯\" }, { \"id\": 1982, \"name\": \"硝酸乙氧烟酰胺\" }, { \"id\": 1984, \"name\": \"心酮胺\" }, { \"id\": 1986, \"name\": \"心痛定\" }, { \"id\": 1988, \"name\": \"新体卡松\" }, { \"id\": 1989, \"name\": \"消痛灵\" }, { \"id\": 1990, \"name\": \"西替立嗪\" }, { \"id\": 1991, \"name\": \"仙特敏\" }, { \"id\": 1992, \"name\": \"仙特明\" }, { \"id\": 1995, \"name\": \"熊脱氧胆酸\" }, { \"id\": 1996, \"name\": \"心痛治-20\" }, { \"id\": 1998, \"name\": \"美满霉素\" }, { \"id\": 1999, \"name\": \"西维尔\" }, { \"id\": 2000, \"name\": \"休未根\" }, { \"id\": 2005, \"name\": \"溴维库隆\" }, { \"id\": 2006, \"name\": \"新乌宁痛\" }, { \"id\": 2008, \"name\": \"骁悉\" }, { \"id\": 2019, \"name\": \"消旋泛酸钙\" }, { \"id\": 2026, \"name\": \"α-细辛醚\" }, { \"id\": 2028, \"name\": \"α-细辛脑\" }, { \"id\": 2029, \"name\": \"新辛内弗林\" }, { \"id\": 2033, \"name\": \"消旋四氢巴马汀\" }, { \"id\": 2035, \"name\": \"消旋四氢掌叶防己碱\" }, { \"id\": 2037, \"name\": \"消旋-α-生育酚醋酸酯\" }, { \"id\": 2038, \"name\": \"消旋-α-生育酚烟酸酯\" }, { \"id\": 2039, \"name\": \"消旋-α-生育烟酸生育酚酯\" }, { \"id\": 2040, \"name\": \"消心痛\" }, { \"id\": 2041, \"name\": \"硝心痛\" }, { \"id\": 2042, \"name\": \"胸腺肽\" }, { \"id\": 2043, \"name\": \"胸腺五肽\" }, { \"id\": 2045, \"name\": \"消旋延胡索乙素\" }, { \"id\": 2046, \"name\": \"息隐\" }, { \"id\": 2047, \"name\": \"泻盐\" }, { \"id\": 2053, \"name\": \"血压达静\" }, { \"id\": 2054, \"name\": \"血压得平\" }, { \"id\": 2055, \"name\": \"血压哒嗪\" }, { \"id\": 2056, \"name\": \"血压达嗪\" }, { \"id\": 2057, \"name\": \"新亚丹消\" }, { \"id\": 2060, \"name\": \"消炎磺\" }, { \"id\": 2061, \"name\": \"消炎灵\" }, { \"id\": 2062, \"name\": \"硝异梨醇\" }, { \"id\": 2064, \"name\": \"昔氧洛芬\" }, { \"id\": 2065, \"name\": \"Xylocaine\" }, { \"id\": 2066, \"name\": \"硝异梨酯\" }, { \"id\": 2067, \"name\": \"消炎宁\" }, { \"id\": 2069, \"name\": \"晋新泰\" }, { \"id\": 2072, \"name\": \"硝异山梨醇\" }, { \"id\": 2073, \"name\": \"消炎痛\" }, { \"id\": 2074, \"name\": \"溴隐庭\" }, { \"id\": 2075, \"name\": \"溴隐停\" }, { \"id\": 2076, \"name\": \"眩晕停\" }, { \"id\": 2078, \"name\": \"溴隐亭甲磺酸盐\" }, { \"id\": 2084, \"name\": \"溴乙烯去氧尿苷\" }, { \"id\": 2085, \"name\": \"新亚雅太\" }, { \"id\": 2086, \"name\": \"硝烟酯\" }, { \"id\": 2087, \"name\": \"纯正促卵泡成熟激素\" }, { \"id\": 2091, \"name\": \"硝卓酮\" }, { \"id\": 2096, \"name\": \"乙胺丁醇盐酸盐\" }, { \"id\": 2097, \"name\": \"乙胺碘呋酮\" }, { \"id\": 2098, \"name\": \"乙胺碘呋酮盐酸盐\" }, { \"id\": 2099, \"name\": \"乙氨伏克辛\" }, { \"id\": 2100, \"name\": \"异氨甲丙二酯\" }, { \"id\": 2103, \"name\": \"烟胺羟丙茶碱\" }, { \"id\": 2104, \"name\": \"伊奥索\" }, { \"id\": 2106, \"name\": \"抑氨肽酶A\" }, { \"id\": 2107, \"name\": \"抑氨肽酶素\" }, { \"id\": 2108, \"name\": \"尼托罗\" }, { \"id\": 2109, \"name\": \"Yatren\" }, { \"id\": 2111, \"name\": \"乙胺香豆素\" }, { \"id\": 2114, \"name\": \"茚丙胺\" }, { \"id\": 2115, \"name\": \"异丙安宁\" }, { \"id\": 2116, \"name\": \"乙苯胺哌啶\" }, { \"id\": 2118, \"name\": \"4-异丙安替比林\" }, { \"id\": 2119, \"name\": \"异丙安替比林\" }, { \"id\": 2122, \"name\": \"氧苯苄胺\" }, { \"id\": 2124, \"name\": \"雅布比卡因\" }, { \"id\": 2126, \"name\": \"血代\" }, { \"id\": 2127, \"name\": \"消胆胺\" }, { \"id\": 2128, \"name\": \"心得安\" }, { \"id\": 2130, \"name\": \"消毒氨苄青霉素钠\" }, { \"id\": 2131, \"name\": \"消胆胺酯\" }, { \"id\": 2133, \"name\": \"新达宝\" }, { \"id\": 2134, \"name\": \"小单孢霉素\" }, { \"id\": 2135, \"name\": \"溴丁东碱\" }, { \"id\": 2136, \"name\": \"溴丁东莨菪碱\" }, { \"id\": 2138, \"name\": \"心得静\" }, { \"id\": 2141, \"name\": \"西地兰D\" }, { \"id\": 2142, \"name\": \"西地兰-D\" }, { \"id\": 2143, \"name\": \"仙道伦\" }, { \"id\": 2144, \"name\": \"仙道纶\" }, { \"id\": 2145, \"name\": \"消得良\" }, { \"id\": 2146, \"name\": \"心得乐\" }, { \"id\": 2147, \"name\": \"心得隆\" }, { \"id\": 2148, \"name\": \"新达罗\" }, { \"id\": 2149, \"name\": \"新度美安\" }, { \"id\": 2156, \"name\": \"消毒头孢唑啉钠\" }, { \"id\": 2158, \"name\": \"吲哚心安\" }, { \"id\": 2160, \"name\": \"喜得镇\" }, { \"id\": 2161, \"name\": \"喜德镇\" }, { \"id\": 2162, \"name\": \"辛丁脂磺酸钠\" }, { \"id\": 2163, \"name\": \"辛丁酯磺酸钠\" }, { \"id\": 2164, \"name\": \"小儿利宝\" }, { \"id\": 2166, \"name\": \"希尔生\" }, { \"id\": 2167, \"name\": \"小儿新灭菌\" }, { \"id\": 2170, \"name\": \"血防-67\" }, { \"id\": 2173, \"name\": \"先锋必\" }, { \"id\": 2174, \"name\": \"先福吡兰\" }, { \"id\": 2175, \"name\": \"吸附百日咳菌苗、白喉类毒素\" }, { \"id\": 2176, \"name\": \"吸附百日咳菌苗、白喉类毒素混合制剂\" }, { \"id\": 2177, \"name\": \"吸附百日咳菌苗、白喉、破伤风类毒素混合制剂\" }, { \"id\": 2178, \"name\": \"先锋必素\" }, { \"id\": 2180, \"name\": \"喜福德\" }, { \"id\": 2181, \"name\": \"先锋定\" }, { \"id\": 2182, \"name\": \"信法丁\" }, { \"id\": 2183, \"name\": \"溴夫定\" }, { \"id\": 2184, \"name\": \"溴呋啶\" }, { \"id\": 2186, \"name\": \"溴酚呋酮\" }, { \"id\": 2187, \"name\": \"悉复欢(乳酸环丙沙星)\" }, { \"id\": 2188, \"name\": \"先锋1号\" }, { \"id\": 2191, \"name\": \"先锋4号\" }, { \"id\": 2192, \"name\": \"先锋Ⅳ号\" }, { \"id\": 2193, \"name\": \"先锋5号\" }, { \"id\": 2194, \"name\": \"先锋5号(无菌)\" }, { \"id\": 2195, \"name\": \"先锋Ⅴ号\" }, { \"id\": 2196, \"name\": \"先锋6号\" }, { \"id\": 2197, \"name\": \"先锋Ⅵ号\" }, { \"id\": 2202, \"name\": \"先锋5号钠\" }, { \"id\": 2205, \"name\": \"先锋4号一水化物\" }, { \"id\": 2206, \"name\": \"仙逢久\" }, { \"id\": 2207, \"name\": \"吸附精制白喉、破伤风二联类毒素\" }, { \"id\": 2208, \"name\": \"先锋啉\" }, { \"id\": 2209, \"name\": \"新福林\" }, { \"id\": 2210, \"name\": \"先锋六号\" }, { \"id\": 2211, \"name\": \"先锋六号(无菌)\" }, { \"id\": 2216, \"name\": \"悉复明\" }, { \"id\": 2217, \"name\": \"先锋孟多\" }, { \"id\": 2218, \"name\": \"先锋美吩\" }, { \"id\": 2219, \"name\": \"先锋霉素18\" }, { \"id\": 2220, \"name\": \"先锋霉素Ⅰ\" }, { \"id\": 2222, \"name\": \"先锋霉素Ⅳ\" }, { \"id\": 2223, \"name\": \"先锋霉素Ⅴ\" }, { \"id\": 2224, \"name\": \"先锋霉素Ⅵ\" }, { \"id\": 2228, \"name\": \"先锋霉素18号\" }, { \"id\": 2229, \"name\": \"先锋霉素4号\" }, { \"id\": 2230, \"name\": \"先锋霉素5号\" }, { \"id\": 2231, \"name\": \"先锋霉素Ⅴ号\" }, { \"id\": 2232, \"name\": \"先锋霉素6号\" }, { \"id\": 2233, \"name\": \"先锋霉素Ⅵ号\" }, { \"id\": 2234, \"name\": \"先锋美他醇\" }, { \"id\": 2235, \"name\": \"先锋美他唑\" }, { \"id\": 2236, \"name\": \"心复宁\" }, { \"id\": 2237, \"name\": \"先锋哌酮\" }, { \"id\": 2238, \"name\": \"先锋培酮\" }, { \"id\": 2239, \"name\": \"先锋哌酮钠\" }, { \"id\": 2240, \"name\": \"先锋羟苄唑\" }, { \"id\": 2241, \"name\": \"先锋瑞丁\" }, { \"id\": 2242, \"name\": \"先锋松\" }, { \"id\": 2244, \"name\": \"先锋四号\" }, { \"id\": 2245, \"name\": \"先锋四号水化物\" }, { \"id\": 2246, \"name\": \"先锋四号一水化物\" }, { \"id\": 2247, \"name\": \"辛伐他丁\" }, { \"id\": 2248, \"name\": \"新伐他丁\" }, { \"id\": 2249, \"name\": \"溴酚酞磺酸钠\" }, { \"id\": 2250, \"name\": \"新伐他汀\" }, { \"id\": 2251, \"name\": \"硝呋妥英\" }, { \"id\": 2252, \"name\": \"先锋五号\" }, { \"id\": 2253, \"name\": \"希福星\" }, { \"id\": 2254, \"name\": \"悉复欣\" }, { \"id\": 2255, \"name\": \"新泛影\" }, { \"id\": 2256, \"name\": \"硝呋妥因钠\" }, { \"id\": 2257, \"name\": \"先锋唑啉\" }, { \"id\": 2258, \"name\": \"溴氟唑仑\" }, { \"id\": 2259, \"name\": \"先锋唑啉钠\" }, { \"id\": 2261, \"name\": \"幸福止痛素\" }, { \"id\": 2263, \"name\": \"枭刚\" }, { \"id\": 2264, \"name\": \"腺苷辅酶B12\" }, { \"id\": 2265, \"name\": \"腺苷辅酶维生素B12\" }, { \"id\": 2266, \"name\": \"腺苷钴铵\" }, { \"id\": 2268, \"name\": \"血管加压素\" }, { \"id\": 2272, \"name\": \"腺苷-5\'-四磷酸二钠盐\" }, { \"id\": 2276, \"name\": \"溴化胺\" }, { \"id\": 2279, \"name\": \"溴化丙胺太林\" }, { \"id\": 2280, \"name\": \"溴环扁吡酯\" }, { \"id\": 2281, \"name\": \"溴化吡啶斯的明\" }, { \"id\": 2282, \"name\": \"溴化吡哌尼\" }, { \"id\": 2283, \"name\": \"溴化苄烷铵\" }, { \"id\": 2286, \"name\": \"溴化丁基东莨菪碱\" }, { \"id\": 2287, \"name\": \"溴化二甲基苄基羟铵\" }, { \"id\": 2288, \"name\": \"溴化二甲基轮环藤宁\" }, { \"id\": 2290, \"name\": \"硝化甘油\" }, { \"id\": 2293, \"name\": \"溴环己氨醇\" }, { \"id\": 2294, \"name\": \"溴环己胺醇\" }, { \"id\": 2296, \"name\": \"溴化甲基阿托品\" }, { \"id\": 2297, \"name\": \"溴化甲基苯那辛\" }, { \"id\": 2298, \"name\": \"溴化甲基苯羟乙胺\" }, { \"id\": 2299, \"name\": \"溴化甲基东莨菪碱\" }, { \"id\": 2300, \"name\": \"溴化甲基海俄辛\" }, { \"id\": 2301, \"name\": \"溴化甲基胃复康\" }, { \"id\": 2306, \"name\": \"西华乐林钠\" }, { \"id\": 2308, \"name\": \"溴化潘科罗宁\" }, { \"id\": 2309, \"name\": \"溴化潘克罗宁\" }, { \"id\": 2310, \"name\": \"溴化羟苯洛宁\" }, { \"id\": 2311, \"name\": \"溴化羟苯乙铵\" }, { \"id\": 2312, \"name\": \"溴化羟苯乙胺\" }, { \"id\": 2316, \"name\": \"溴化双哌雄双酯\" }, { \"id\": 2317, \"name\": \"溴化双哌雄酯\" }, { \"id\": 2320, \"name\": \"溴磺酞钠\" }, { \"id\": 2321, \"name\": \"溴化万科罗宁\" }, { \"id\": 2323, \"name\": \"溴化新斯的明\" }, { \"id\": 2324, \"name\": \"溴化异丙阿托品\" }, { \"id\": 2325, \"name\": \"溴化异丙基阿托品\" }, { \"id\": 2327, \"name\": \"溴化异丙托品\" }, { \"id\": 2336, \"name\": \"溴己胺\" }, { \"id\": 2337, \"name\": \"溴己铵\" }, { \"id\": 2338, \"name\": \"硝基安定\" }, { \"id\": 2339, \"name\": \"溴甲阿弥\" }, { \"id\": 2340, \"name\": \"溴甲胺弥\" }, { \"id\": 2341, \"name\": \"硝基苄胺啶\" }, { \"id\": 2344, \"name\": \"溴甲贝那替嗪\" }, { \"id\": 2346, \"name\": \"新洁而灭\" }, { \"id\": 2347, \"name\": \"新洁尔灭\" }, { \"id\": 2348, \"name\": \"酰基辅氨酸\" }, { \"id\": 2349, \"name\": \"硝基呋喃妥英\" }, { \"id\": 2350, \"name\": \"新交感酚\" }, { \"id\": 2353, \"name\": \"新菌灵\" }, { \"id\": 2354, \"name\": \"硝基咪唑硫嘌呤\" }, { \"id\": 2356, \"name\": \"脚气灵\" }, { \"id\": 2357, \"name\": \"硝基羟乙唑\" }, { \"id\": 2359, \"name\": \"溴甲托品\" }, { \"id\": 2360, \"name\": \"溴甲烷阿托品\" }, { \"id\": 2361, \"name\": \"溴甲胃复康\" }, { \"id\": 2363, \"name\": \"溴甲乙胺痉平\" }, { \"id\": 2364, \"name\": \"欣康(单硝酸异山梨酯)\" }, { \"id\": 2365, \"name\": \"西可巴比妥\" }, { \"id\": 2367, \"name\": \"1-烯可的松\" }, { \"id\": 2368, \"name\": \"溴抗感明\" }, { \"id\": 2370, \"name\": \"喜克溃\" }, { \"id\": 2372, \"name\": \"希刻劳\" }, { \"id\": 2373, \"name\": \"新抗灵\" }, { \"id\": 2377, \"name\": \"心康宁\" }, { \"id\": 2378, \"name\": \"欣可诺\" }, { \"id\": 2379, \"name\": \"新抗凝\" }, { \"id\": 2388, \"name\": \"仙乐\" }, { \"id\": 2389, \"name\": \"消虑苯\" }, { \"id\": 2390, \"name\": \"西利宾胺\" }, { \"id\": 2391, \"name\": \"硝硫苯酯\" }, { \"id\": 2392, \"name\": \"西利城\" }, { \"id\": 2393, \"name\": \"西力达\" }, { \"id\": 2394, \"name\": \"消磷定\" }, { \"id\": 2398, \"name\": \"昔罗卡因\" }, { \"id\": 2400, \"name\": \"西利马林\" }, { \"id\": 2401, \"name\": \"西利马灵\" }, { \"id\": 2402, \"name\": \"心律平\" }, { \"id\": 2404, \"name\": \"A型链球菌甘露聚糖\" }, { \"id\": 2406, \"name\": \"硒硫砂\" }, { \"id\": 2409, \"name\": \"仙力素\" }, { \"id\": 2411, \"name\": \"喜疗妥\" }, { \"id\": 2412, \"name\": \"先力腾\" }, { \"id\": 2414, \"name\": \"信利妥\" }, { \"id\": 2415, \"name\": \"潇莱威\" }, { \"id\": 2416, \"name\": \"欣洛维\" }, { \"id\": 2417, \"name\": \"布里伍定\" }, { \"id\": 2419, \"name\": \"泻利盐\" }, { \"id\": 2420, \"name\": \"新麦苄唑\" }, { \"id\": 2422, \"name\": \"休米根\" }, { \"id\": 2423, \"name\": \"新明磺\" }, { \"id\": 2425, \"name\": \"无菌头孢哌酮钠\" }, { \"id\": 2426, \"name\": \"无菌头孢四秦钠\" }, { \"id\": 2427, \"name\": \"无菌头孢四嗪钠\" }, { \"id\": 2428, \"name\": \"无菌头孢唑啉钠\" }, { \"id\": 2429, \"name\": \"无菌先锋6号\" }, { \"id\": 2431, \"name\": \"无菌盐酸万古霉素\" }, { \"id\": 2432, \"name\": \"卫康醇\" }, { \"id\": 2439, \"name\": \"万科罗宁\" }, { \"id\": 2440, \"name\": \"维库罗宁\" }, { \"id\": 2442, \"name\": \"胃溃宁\" }, { \"id\": 2443, \"name\": \"万可松\" }, { \"id\": 2447, \"name\": \"威力氨甲蝶呤\" }, { \"id\": 2448, \"name\": \"威力阿霉素\" }, { \"id\": 2449, \"name\": \"戊硫巴比妥钠\" }, { \"id\": 2450, \"name\": \"乌拉地尔盐酸盐\" }, { \"id\": 2451, \"name\": \"威力调心灵\" }, { \"id\": 2453, \"name\": \"文拉法辛\" }, { \"id\": 2454, \"name\": \"乌洛格拉芬\" }, { \"id\": 2455, \"name\": \"乌洛格兰芬\" }, { \"id\": 2456, \"name\": \"乌洛惠从\" }, { \"id\": 2458, \"name\": \"乌赖加芬\" }, { \"id\": 2464, \"name\": \"威利宁\" }, { \"id\": 2465, \"name\": \"威力尿激酶\" }, { \"id\": 2466, \"name\": \"胃乐平\" }, { \"id\": 2467, \"name\": \"维拉帕米盐酸盐\" }, { \"id\": 2468, \"name\": \"威力醛氢叶酸钙\" }, { \"id\": 2469, \"name\": \"威力顺铂\" }, { \"id\": 2471, \"name\": \"乌洛维新\" }, { \"id\": 2472, \"name\": \"威乐星\" }, { \"id\": 2474, \"name\": \"威猛\" }, { \"id\": 2476, \"name\": \"无霉\" }, { \"id\": 2477, \"name\": \"戊脉安\" }, { \"id\": 2478, \"name\": \"无味红霉素\" }, { \"id\": 2480, \"name\": \"维敏\" }, { \"id\": 2482, \"name\": \"渥咪哌唑\" }, { \"id\": 2483, \"name\": \"威霉素\" }, { \"id\": 2484, \"name\": \"威霉素硬脂酸\" }, { \"id\": 2485, \"name\": \"维尼安\" }, { \"id\": 2486, \"name\": \"万那发兴\" }, { \"id\": 2488, \"name\": \"威力顺铂IA\" }, { \"id\": 2490, \"name\": \"维脑路通\" }, { \"id\": 2491, \"name\": \"万乃洛韦\" }, { \"id\": 2492, \"name\": \"万乃洛韦盐酸盐\" }, { \"id\": 2493, \"name\": \"胃粘膜素\" }, { \"id\": 2497, \"name\": \"胃粘液素\" }, { \"id\": 2499, \"name\": \"戊炔雌醇\" }, { \"id\": 2500, \"name\": \"戊炔雌四醇\" }, { \"id\": 2501, \"name\": \"噁嗪氟哌酸\" }, { \"id\": 2502, \"name\": \"无热源葡萄糖\" }, { \"id\": 2503, \"name\": \"无热源葡萄糖晶体\" }, { \"id\": 2506, \"name\": \"福尔检\" }, { \"id\": 2509, \"name\": \"戊酸雌二醇/醋酸环丙孕酮\" }, { \"id\": 2510, \"name\": \"易咳宁\" }, { \"id\": 2511, \"name\": \"胃舒达\" }, { \"id\": 2516, \"name\": \"威氏克\" }, { \"id\": 2517, \"name\": \"万爽力\" }, { \"id\": 2518, \"name\": \"DF-521\" }, { \"id\": 2519, \"name\": \"沙威适患疗\" }, { \"id\": 2521, \"name\": \"维生霉素\" }, { \"id\": 2522, \"name\": \"胃舒平\" }, { \"id\": 2526, \"name\": \"维生素AD\" }, { \"id\": 2527, \"name\": \"维生素B11\" }, { \"id\": 2528, \"name\": \"维生素B12b\" }, { \"id\": 2531, \"name\": \"维生素B3\" }, { \"id\": 2532, \"name\": \"维生素Bc\" }, { \"id\": 2534, \"name\": \"维生素BT\" }, { \"id\": 2535, \"name\": \"Vitamin E(Type SD)\" }, { \"id\": 2537, \"name\": \"维生素G\" }, { \"id\": 2540, \"name\": \"维生素K3\" }, { \"id\": 2541, \"name\": \"维生素K4\" }, { \"id\": 2542, \"name\": \"维生素M\" }, { \"id\": 2543, \"name\": \"维生素P\" }, { \"id\": 2544, \"name\": \"维生素P4\" }, { \"id\": 2545, \"name\": \"维生素PP\" }, { \"id\": 2546, \"name\": \"维生素R\" }, { \"id\": 2547, \"name\": \"维生素丙\" }, { \"id\": 2548, \"name\": \"维生素B4\" }, { \"id\": 2550, \"name\": \"维生素A醋酸酯\" }, { \"id\": 2551, \"name\": \"维生素E醋酸酯\" }, { \"id\": 2552, \"name\": \"维生素丁2\" }, { \"id\": 2553, \"name\": \"维生素丁3\" }, { \"id\": 2556, \"name\": \"维生素甲\" }, { \"id\": 2557, \"name\": \"维生素甲酸\" }, { \"id\": 2558, \"name\": \"维生素B12晶体\" }, { \"id\": 2561, \"name\": \"维生素C钠\" }, { \"id\": 2562, \"name\": \"维生素C钠盐\" }, { \"id\": 2563, \"name\": \"维生素A酸\" }, { \"id\": 2565, \"name\": \"Vitaminum E\" }, { \"id\": 2567, \"name\": \"维生素乙1\" }, { \"id\": 2568, \"name\": \"维生素乙12\" }, { \"id\": 2569, \"name\": \"维生素乙2\" }, { \"id\": 2570, \"name\": \"维生素A500棕榈酸酯\" }, { \"id\": 2571, \"name\": \"维生素A棕榈酸脂\" }, { \"id\": 2572, \"name\": \"维生素A棕榈酸酯\" }, { \"id\": 2573, \"name\": \"维思通\" }, { \"id\": 2574, \"name\": \"威斯他霉素\" }, { \"id\": 2575, \"name\": \"乌索脱氧胆酸\" }, { \"id\": 2576, \"name\": \"戊四烯酮\" }, { \"id\": 2577, \"name\": \"人免疫球蛋白\" }, { \"id\": 2578, \"name\": \"Tetanic Immunity Glubulin,Human\" }, { \"id\": 2580, \"name\": \"五肽促胃液素\" }, { \"id\": 2582, \"name\": \"维他命A\" }, { \"id\": 2583, \"name\": \"维他命B1\" }, { \"id\": 2584, \"name\": \"维他命B12\" }, { \"id\": 2585, \"name\": \"维他命B12b\" }, { \"id\": 2586, \"name\": \"维他命B2\" }, { \"id\": 2587, \"name\": \"维他命C\" }, { \"id\": 2588, \"name\": \"维他命K1\" }, { \"id\": 2589, \"name\": \"维他命K3\" }, { \"id\": 2590, \"name\": \"维他命K4\" }, { \"id\": 2591, \"name\": \"维特明\" }, { \"id\": 2592, \"name\": \"盐酸维他命B6\" }, { \"id\": 2593, \"name\": \"威他霉素\" }, { \"id\": 2594, \"name\": \"维他霉素\" }, { \"id\": 2595, \"name\": \"武田普隆30\" }, { \"id\": 2596, \"name\": \"戊酮酸钙\" }, { \"id\": 2597, \"name\": \"Otwin\" }, { \"id\": 2599, \"name\": \"戊烷巴比妥钠\" }, { \"id\": 2601, \"name\": \"维沃仿\" }, { \"id\": 2602, \"name\": \"无味黄连素\" }, { \"id\": 2604, \"name\": \"无味喹啉\" }, { \"id\": 2606, \"name\": \"无味氯霉素\" }, { \"id\": 2607, \"name\": \"戊烷脒\" }, { \"id\": 2608, \"name\": \"戊脘脒\" }, { \"id\": 2610, \"name\": \"胃仙\" }, { \"id\": 2612, \"name\": \"戊烯保泰松\" }, { \"id\": 2613, \"name\": \"戊烯苯唑酮\" }, { \"id\": 2614, \"name\": \"戊烯那宗\" }, { \"id\": 2615, \"name\": \"戊烯松\" }, { \"id\": 2617, \"name\": \"戊氧苯脒\" }, { \"id\": 2620, \"name\": \"万有醌-10\" }, { \"id\": 2621, \"name\": \"武夷霉素\" }, { \"id\": 2622, \"name\": \"胃疡平\" }, { \"id\": 2623, \"name\": \"胃影葡胺\" }, { \"id\": 2625, \"name\": \"胃疡卓酮\" }, { \"id\": 2626, \"name\": \"戊州川琥宁\" }, { \"id\": 2628, \"name\": \"戊唑星\" }, { \"id\": 2631, \"name\": \"烯氨苯丙酸\" }, { \"id\": 2632, \"name\": \"酰胺吡咯烷酮\" }, { \"id\": 2633, \"name\": \"酰胺吡酮\" }, { \"id\": 2635, \"name\": \"息安的宝\" }, { \"id\": 2636, \"name\": \"西艾克\" }, { \"id\": 2637, \"name\": \"烯氨洛芬\" }, { \"id\": 2638, \"name\": \"新安络血\" }, { \"id\": 2639, \"name\": \"酰胺咪嗪\" }, { \"id\": 2640, \"name\": \"酰氨咪唑\" }, { \"id\": 2643, \"name\": \"血安平\" }, { \"id\": 2647, \"name\": \"酰胺四唑核苷\" }, { \"id\": 2651, \"name\": \"溴氨乙异硫脲\" }, { \"id\": 2652, \"name\": \"锡铂\" }, { \"id\": 2653, \"name\": \"细丙\" }, { \"id\": 2654, \"name\": \"小檗胺\" }, { \"id\": 2655, \"name\": \"溴苄胺\" }, { \"id\": 2656, \"name\": \"溴苄胺甲苯磺酸盐\" }, { \"id\": 2657, \"name\": \"溴苄铵托西酸盐\" }, { \"id\": 2658, \"name\": \"溴苄胺托西酸盐\" }, { \"id\": 2659, \"name\": \"溴苯吡胺\" }, { \"id\": 2661, \"name\": \"硝苯苄氨啶\" }, { \"id\": 2662, \"name\": \"硝苯苄胺定\" }, { \"id\": 2663, \"name\": \"硝苯苄胺啶\" }, { \"id\": 2664, \"name\": \"溴苯吡丙胺\" }, { \"id\": 2666, \"name\": \"细胞壁溶解酶\" }, { \"id\": 2670, \"name\": \"硝苯啶\" }, { \"id\": 2671, \"name\": \"硝苯呋海因\" }, { \"id\": 2672, \"name\": \"溴苄环己铵\" }, { \"id\": 2674, \"name\": \"小檗碱\" }, { \"id\": 2675, \"name\": \"硝苯甲乙吡啶\" }, { \"id\": 2676, \"name\": \"小檗碱盐酸盐\" }, { \"id\": 2677, \"name\": \"硝苯甲氧乙基异丙啶\" }, { \"id\": 2679, \"name\": \"西孢克拉瑞\" }, { \"id\": 2680, \"name\": \"西保力\" }, { \"id\": 2681, \"name\": \"西比林\" }, { \"id\": 2682, \"name\": \"西比灵\" }, { \"id\": 2683, \"name\": \"息百虑\" }, { \"id\": 2689, \"name\": \"溴苯拉敏\" }, { \"id\": 2691, \"name\": \"烯丙吗啡氢溴酸盐\" }, { \"id\": 2695, \"name\": \"溴苯那敏马来酸盐\" }, { \"id\": 2697, \"name\": \"硝苯吡啶\" }, { \"id\": 2699, \"name\": \"烯丙羟吗啡酮\" }, { \"id\": 2700, \"name\": \"细胞色素丙\" }, { \"id\": 2701, \"name\": \"洗必太\" }, { \"id\": 2702, \"name\": \"洗必泰\" }, { \"id\": 2703, \"name\": \"洗必泰醋酸盐\" }, { \"id\": 2704, \"name\": \"洗必泰碘\" }, { \"id\": 2705, \"name\": \"洗必泰枸橼酸盐\" }, { \"id\": 2706, \"name\": \"洗必泰葡萄糖酸盐\" }, { \"id\": 2708, \"name\": \"溴苄烷铵\" }, { \"id\": 2710, \"name\": \"硝苄香豆素\" }, { \"id\": 2711, \"name\": \"溴苄乙胺\" }, { \"id\": 2712, \"name\": \"硝苯乙吡啶\" }, { \"id\": 2713, \"name\": \"硝苯异丙啶\" }, { \"id\": 2715, \"name\": \"西孢唑啉\" }, { \"id\": 2717, \"name\": \"溴曹\" }, { \"id\": 2722, \"name\": \"消虫痢\" }, { \"id\": 2729, \"name\": \"特美力\" }, { \"id\": 2730, \"name\": \"托米仑\" }, { \"id\": 2732, \"name\": \"添慕宁\" }, { \"id\": 2733, \"name\": \"酞咪哌啶酮\" }, { \"id\": 2735, \"name\": \"眺霉素\" }, { \"id\": 2738, \"name\": \"托霉素\" }, { \"id\": 2740, \"name\": \"头霉噻吩钠\" }, { \"id\": 2741, \"name\": \"土霉素盐酸盐\" }, { \"id\": 2742, \"name\": \"泰门汀\" }, { \"id\": 2743, \"name\": \"特美汀\" }, { \"id\": 2744, \"name\": \"替曼汀\" }, { \"id\": 2745, \"name\": \"替漫汀\" }, { \"id\": 2746, \"name\": \"替门汀\" }, { \"id\": 2747, \"name\": \"托麦汀\" }, { \"id\": 2748, \"name\": \"托美汀\" }, { \"id\": 2749, \"name\": \"它莫西芬\" }, { \"id\": 2750, \"name\": \"基多托\" }, { \"id\": 2754, \"name\": \"透明质酸酶\" }, { \"id\": 2758, \"name\": \"泰诺\" }, { \"id\": 2761, \"name\": \"特尼泊甙\" }, { \"id\": 2762, \"name\": \"替尼泊甙\" }, { \"id\": 2763, \"name\": \"替尼达唑\" }, { \"id\": 2764, \"name\": \"肼苯达嗪\" }, { \"id\": 2765, \"name\": \"替你净\" }, { \"id\": 2768, \"name\": \"泰诺林\" }, { \"id\": 2769, \"name\": \"天诺敏\" }, { \"id\": 2770, \"name\": \"泰普尔多\" }, { \"id\": 2772, \"name\": \"托品卡胺\" }, { \"id\": 2775, \"name\": \"天普洛欣\" }, { \"id\": 2776, \"name\": \"托普霉素\" }, { \"id\": 2778, \"name\": \"胎盘球蛋白\" }, { \"id\": 2780, \"name\": \"特普他林\" }, { \"id\": 2782, \"name\": \"酮哌噁咪唑\" }, { \"id\": 2783, \"name\": \"托品酰胺\" }, { \"id\": 2785, \"name\": \"托品西隆盐酸盐\" }, { \"id\": 2788, \"name\": \"脱羟肾上腺素\" }, { \"id\": 2790, \"name\": \"Trihexyphenidyl\" }, { \"id\": 2791, \"name\": \"退热净\" }, { \"id\": 2792, \"name\": \"泰瑞宁\" }, { \"id\": 2794, \"name\": \"泰舒\" }, { \"id\": 2795, \"name\": \"泰素\" }, { \"id\": 2796, \"name\": \"特素\" }, { \"id\": 2797, \"name\": \"Placental Globulin\" }, { \"id\": 2800, \"name\": \"脱水穿心莲内酯琥珀酸半酯单钾盐\" }, { \"id\": 2801, \"name\": \"泰舒达\" }, { \"id\": 2802, \"name\": \"博德\" }, { \"id\": 2804, \"name\": \"碳酸钙复合物\" }, { \"id\": 2805, \"name\": \"碳酸钙加维生素D\" }, { \"id\": 2806, \"name\": \"特斯乐\" }, { \"id\": 2808, \"name\": \"糖肾平\" }, { \"id\": 2809, \"name\": \"糖适平\" }, { \"id\": 2819, \"name\": \"妥苏沙星\" }, { \"id\": 2821, \"name\": \"碳酸乙酯喹啉\" }, { \"id\": 2822, \"name\": \"泰特\" }, { \"id\": 2823, \"name\": \"退痛\" }, { \"id\": 2824, \"name\": \"酮替酚\" }, { \"id\": 2825, \"name\": \"酮替芬富马酸盐\" }, { \"id\": 2827, \"name\": \"炎痛静\" }, { \"id\": 2828, \"name\": \"特他卡因\" }, { \"id\": 2831, \"name\": \"替托尼定\" }, { \"id\": 2832, \"name\": \"特调脂\" }, { \"id\": 2833, \"name\": \"特调酯\" }, { \"id\": 2838, \"name\": \"吐温80\" }, { \"id\": 2840, \"name\": \"吐温-80\" }, { \"id\": 2842, \"name\": \"泰胃美\" }, { \"id\": 2843, \"name\": \"特戊酰肾上腺素\" }, { \"id\": 2844, \"name\": \"泰星\" }, { \"id\": 2846, \"name\": \"碳酰胆碱\" }, { \"id\": 2847, \"name\": \"唐西灵\" }, { \"id\": 2848, \"name\": \"特西利\" }, { \"id\": 2849, \"name\": \"特血乐\" }, { \"id\": 2852, \"name\": \"托西酸溴苄铵\" }, { \"id\": 2853, \"name\": \"托西酸溴苄胺\" }, { \"id\": 2855, \"name\": \"泰星妥布霉素\" }, { \"id\": 2858, \"name\": \"脱氧鹅胆酸\" }, { \"id\": 2859, \"name\": \"脱氧氟尿苷\" }, { \"id\": 2860, \"name\": \"脱氧氟脲苷\" }, { \"id\": 2863, \"name\": \"痰易净\" }, { \"id\": 2864, \"name\": \"痛炎宁\" }, { \"id\": 2865, \"name\": \"脱氧土霉素\" }, { \"id\": 2866, \"name\": \"脱氧土霉素钙\" }, { \"id\": 2867, \"name\": \"脱氧熊胆酸\" }, { \"id\": 2868, \"name\": \"5\'-脱氧腺苷钴胺\" }, { \"id\": 2870, \"name\": \"脱氧孕酮\" }, { \"id\": 2871, \"name\": \"脱氧助间型霉素\" }, { \"id\": 2873, \"name\": \"痰之保克\" }, { \"id\": 2875, \"name\": \"痰之得克\" }, { \"id\": 2880, \"name\": \"Utrogestan\" }, { \"id\": 2882, \"name\": \"维生素丁二\" }, { \"id\": 2888, \"name\": \"Warfarin Sod.\" }, { \"id\": 2889, \"name\": \"胃安太定\" }, { \"id\": 2890, \"name\": \"维胺酯\" }, { \"id\": 2892, \"name\": \"维丙肝\" }, { \"id\": 2896, \"name\": \"伟霸霉素\" }, { \"id\": 2897, \"name\": \"维生素丁四\" }, { \"id\": 2900, \"name\": \"沃必唑\" }, { \"id\": 2901, \"name\": \"戊撑二氧二苯脒\" }, { \"id\": 2902, \"name\": \"胃长宁\" }, { \"id\": 2908, \"name\": \"胃得灵\" }, { \"id\": 2909, \"name\": \"翁旦斯隆\" }, { \"id\": 2911, \"name\": \"胃达喜\" }, { \"id\": 2912, \"name\": \"维得新生\" }, { \"id\": 2913, \"name\": \"卫达抑血凝\" }, { \"id\": 2914, \"name\": \"唯尔本\" }, { \"id\": 2916, \"name\": \"沃尔得\" }, { \"id\": 2918, \"name\": \"胃仙友\" }, { \"id\": 2921, \"name\": \"胃复安\" }, { \"id\": 2922, \"name\": \"氟甲强的松龙\" }, { \"id\": 2924, \"name\": \"卫非宁\" }, { \"id\": 2925, \"name\": \"卫非宁150\" }, { \"id\": 2926, \"name\": \"卫肺宁\" }, { \"id\": 2927, \"name\": \"卫非特\" }, { \"id\": 2928, \"name\": \"卫肺特\" }, { \"id\": 2929, \"name\": \"威福仙\" }, { \"id\": 2930, \"name\": \"微分子右旋糖酐\" }, { \"id\": 2931, \"name\": \"维骨力\" }, { \"id\": 2932, \"name\": \"万古霉素盐酸盐\" }, { \"id\": 2933, \"name\": \"沃格孟汀\" }, { \"id\": 2934, \"name\": \"维宏\" }, { \"id\": 2939, \"name\": \"无环鸟\" }, { \"id\": 2940, \"name\": \"无环鸟苷\" }, { \"id\": 2941, \"name\": \"无环尿苷\" }, { \"id\": 2942, \"name\": \"Megacillin\" }, { \"id\": 2946, \"name\": \"维静宁\" }, { \"id\": 2950, \"name\": \"胃加强-G\" }, { \"id\": 2951, \"name\": \"胃见痊\" }, { \"id\": 2952, \"name\": \"维甲酸\" }, { \"id\": 2956, \"name\": \"泰必乐\" }, { \"id\": 2958, \"name\": \"替勃隆\" }, { \"id\": 2959, \"name\": \"头孢氯氨苄\" }, { \"id\": 2961, \"name\": \"头孢拉丁\" }, { \"id\": 2964, \"name\": \"头孢拉啶\" }, { \"id\": 2965, \"name\": \"头孢雷定\" }, { \"id\": 2968, \"name\": \"头孢六号\" }, { \"id\": 2969, \"name\": \"妥布拉霉素\" }, { \"id\": 2970, \"name\": \"妥布拉霉素硫酸盐\" }, { \"id\": 2974, \"name\": \"头孢力新\" }, { \"id\": 2975, \"name\": \"头孢立新\" }, { \"id\": 2976, \"name\": \"头孢孟多甲酸酯钠\" }, { \"id\": 2977, \"name\": \"头孢孟多酯钠\" }, { \"id\": 2979, \"name\": \"妥布霉素硫酸盐\" }, { \"id\": 2980, \"name\": \"头孢霉素Ⅰ钠\" }, { \"id\": 2981, \"name\": \"头孢霉素钠\" }, { \"id\": 2983, \"name\": \"梯波宁\" }, { \"id\": 2984, \"name\": \"天宝宁\" }, { \"id\": 2985, \"name\": \"天保宁\" }, { \"id\": 2990, \"name\": \"头孢羟苄磺唑钠\" }, { \"id\": 2991, \"name\": \"头孢羟苄四唑\" }, { \"id\": 2992, \"name\": \"头孢齐定\" }, { \"id\": 2993, \"name\": \"头孢齐尔\" }, { \"id\": 2995, \"name\": \"头孢去甲噻肟\" }, { \"id\": 2996, \"name\": \"头孢去甲噻肟钠\" }, { \"id\": 2999, \"name\": \"头孢羟羧氧\" }, { \"id\": 3000, \"name\": \"头孢羟唑\" }, { \"id\": 3001, \"name\": \"头孢氰唑\" }, { \"id\": 3003, \"name\": \"头孢羟唑钠甲酯\" }, { \"id\": 3004, \"name\": \"头孢氰唑氧\" }, { \"id\": 3005, \"name\": \"体百舒\" }, { \"id\": 3006, \"name\": \"头孢四号\" }, { \"id\": 3007, \"name\": \"头孢噻甲羧肟\" }, { \"id\": 3008, \"name\": \"头孢噻甲羧肟五水化物\" }, { \"id\": 3009, \"name\": \"头孢四秦\" }, { \"id\": 3010, \"name\": \"头孢四嗪\" }, { \"id\": 3011, \"name\": \"头孢四嗪钠\" }, { \"id\": 3012, \"name\": \"头孢四嗪噻肟\" }, { \"id\": 3013, \"name\": \"头孢四嗪噻肟钠\" }, { \"id\": 3014, \"name\": \"头孢噻肟四嗪\" }, { \"id\": 3015, \"name\": \"头孢噻乙氨唑\" }, { \"id\": 3016, \"name\": \"头孢噻乙胺唑\" }, { \"id\": 3018, \"name\": \"头孢他定\" }, { \"id\": 3019, \"name\": \"头孢他啶钠\" }, { \"id\": 3020, \"name\": \"头孢他啶五水化物\" }, { \"id\": 3021, \"name\": \"头孢泰克松\" }, { \"id\": 3023, \"name\": \"妥布特罗\" }, { \"id\": 3024, \"name\": \"特布他林硫酸盐\" }, { \"id\": 3025, \"name\": \"富山龙尼\" }, { \"id\": 3028, \"name\": \"头孢他美新戊酰氧甲酯\" }, { \"id\": 3030, \"name\": \"头孢塔齐定\" }, { \"id\": 3031, \"name\": \"头孢五号\" }, { \"id\": 3032, \"name\": \"头孢西丁钠盐\" }, { \"id\": 3033, \"name\": \"酮苄香豆素\" }, { \"id\": 3034, \"name\": \"酮苄香豆素钠\" }, { \"id\": 3035, \"name\": \"特泌胰\" }, { \"id\": 3036, \"name\": \"头孢氧哌羟苯唑\" }, { \"id\": 3037, \"name\": \"头孢氧哌唑\" }, { \"id\": 3038, \"name\": \"头孢氧哌唑钠\" }, { \"id\": 3041, \"name\": \"他巴唑\" }, { \"id\": 3042, \"name\": \"头孢唑啉\" }, { \"id\": 3043, \"name\": \"头孢唑啉非晶型\" }, { \"id\": 3044, \"name\": \"曼月乐\" }, { \"id\": 3045, \"name\": \"头孢唑林钠\" }, { \"id\": 3046, \"name\": \"头孢唑啉钠(无菌)\" }, { \"id\": 3048, \"name\": \"头孢唑喃钠\" }, { \"id\": 3052, \"name\": \"特初新\" }, { \"id\": 3053, \"name\": \"泰德\" }, { \"id\": 3054, \"name\": \"酞丁胺\" }, { \"id\": 3055, \"name\": \"可乐尔\" }, { \"id\": 3062, \"name\": \"通达霉素\" }, { \"id\": 3068, \"name\": \"泰尔登\" }, { \"id\": 3070, \"name\": \"脱尔烦\" }, { \"id\": 3071, \"name\": \"泰尔丝\" }, { \"id\": 3074, \"name\": \"恬尔心\" }, { \"id\": 3076, \"name\": \"铁矾\" }, { \"id\": 3077, \"name\": \"特费定\" }, { \"id\": 3078, \"name\": \"特非拉丁\" }, { \"id\": 3079, \"name\": \"痛风立克\" }, { \"id\": 3080, \"name\": \"痛风利仙\" }, { \"id\": 3081, \"name\": \"痛风宁\" }, { \"id\": 3082, \"name\": \"泰芬纳啶\" }, { \"id\": 3083, \"name\": \"特非那丁\" }, { \"id\": 3084, \"name\": \"托弗尼尔\" }, { \"id\": 3085, \"name\": \"痛风平\" }, { \"id\": 3086, \"name\": \"托氟沙星\" }, { \"id\": 3091, \"name\": \"酮咯来克\" }, { \"id\": 3092, \"name\": \"酮咯酸\" }, { \"id\": 3094, \"name\": \"酮酪酸氨丁四醇\" }, { \"id\": 3095, \"name\": \"酮咯酸氨丁四醇\" }, { \"id\": 3101, \"name\": \"鱼精蛋白硫酸盐\" }, { \"id\": 3104, \"name\": \"天花粉提取物\" }, { \"id\": 3108, \"name\": \"托磺沙星\" }, { \"id\": 3109, \"name\": \"酞磺噻唑\" }, { \"id\": 3111, \"name\": \"酞合酰亚胺\" }, { \"id\": 3112, \"name\": \"Tibione\" }, { \"id\": 3116, \"name\": \"酮基布洛芬\" }, { \"id\": 3119, \"name\": \"痛经宁\" }, { \"id\": 3120, \"name\": \"痛惊宁\" }, { \"id\": 3121, \"name\": \"痛痉宁\" }, { \"id\": 3123, \"name\": \"痛痉平\" }, { \"id\": 3127, \"name\": \"天可\" }, { \"id\": 3128, \"name\": \"田可\" }, { \"id\": 3130, \"name\": \"妥卡胺盐酸盐\" }, { \"id\": 3132, \"name\": \"仙林\" }, { \"id\": 3133, \"name\": \"特快灵\" }, { \"id\": 3134, \"name\": \"痛可灵\" }, { \"id\": 3137, \"name\": \"托可拉斯\" }, { \"id\": 3138, \"name\": \"托克拉斯\" }, { \"id\": 3140, \"name\": \"替卡青霉素\" }, { \"id\": 3141, \"name\": \"替卡青霉素钠\" }, { \"id\": 3143, \"name\": \"泰康新\" }, { \"id\": 3147, \"name\": \"替卡西林/克拉维酸钾\" }, { \"id\": 3148, \"name\": \"替卡西林克拉维酸盐\" }, { \"id\": 3149, \"name\": \"替卡西林钠-克拉维酸钾\" }, { \"id\": 3151, \"name\": \"泰利必妥\" }, { \"id\": 3152, \"name\": \"泰利得\" }, { \"id\": 3154, \"name\": \"天隆达\" }, { \"id\": 3156, \"name\": \"痛力克\" }, { \"id\": 3157, \"name\": \"吐来抗\" }, { \"id\": 3162, \"name\": \"酮洛来克\" }, { \"id\": 3164, \"name\": \"特力士\" }, { \"id\": 3165, \"name\": \"酮洛酸氨基丁四醇\" }, { \"id\": 3167, \"name\": \"泰力特\" }, { \"id\": 3168, \"name\": \"天力体保\" }, { \"id\": 3170, \"name\": \"特兰新\" }, { \"id\": 3172, \"name\": \"痛立消\" }, { \"id\": 3173, \"name\": \"特兰新甲磺酸苄胺\" }, { \"id\": 3176, \"name\": \"妥拉唑林盐酸盐\" }, { \"id\": 3177, \"name\": \"特拉唑嗪盐酸盐\" }, { \"id\": 3179, \"name\": \"天麻甙\" }, { \"id\": 3180, \"name\": \"痛灭定\" }, { \"id\": 3186, \"name\": \"痛灭定钠\" }, { \"id\": 3190, \"name\": \"L-天门冬酰胺酶\" }, { \"id\": 3191, \"name\": \"L-天门冬酰胺转移酶\" }, { \"id\": 3192, \"name\": \"它莫酚\" }, { \"id\": 3193, \"name\": \"它莫酚(雌激素拮抗剂)\" }, { \"id\": 3194, \"name\": \"特美夫\" }, { \"id\": 3195, \"name\": \"特美肤\" }, { \"id\": 3196, \"name\": \"特泯菌\" }, { \"id\": 3198, \"name\": \"十四羟基碳酸镁铝\" }, { \"id\": 3199, \"name\": \"四水酸氨苄青霉素\" }, { \"id\": 3200, \"name\": \"顺羧酸铂\" }, { \"id\": 3202, \"name\": \"酸式碳酸钠\" }, { \"id\": 3204, \"name\": \"13-顺式维甲酸\" }, { \"id\": 3205, \"name\": \"β-顺式维甲酸\" }, { \"id\": 3206, \"name\": \"β-顺式维生素A酸\" }, { \"id\": 3208, \"name\": \"嗜酸性乳杆菌\" }, { \"id\": 3209, \"name\": \"L-肾上腺素\" }, { \"id\": 3212, \"name\": \"肾上腺色素缩氨脲\" }, { \"id\": 3214, \"name\": \"肾上腺色素缩氨酸\" }, { \"id\": 3215, \"name\": \"肾上腺素盐酸盐\" }, { \"id\": 3216, \"name\": \"肾上腺素异戊酯\" }, { \"id\": 3217, \"name\": \"肾上腺色腙\" }, { \"id\": 3219, \"name\": \"四水杨酸胆硷镁\" }, { \"id\": 3221, \"name\": \"双水盐酸四喃唑嗪\" }, { \"id\": 3222, \"name\": \"双水杨酸酯\" }, { \"id\": 3226, \"name\": \"水头孢氨苄\" }, { \"id\": 3230, \"name\": \"水头孢羟氨苄\" }, { \"id\": 3232, \"name\": \"HAES-斯特尔\" }, { \"id\": 3234, \"name\": \"斯托芬\" }, { \"id\": 3236, \"name\": \"施太可\" }, { \"id\": 3237, \"name\": \"施泰可\" }, { \"id\": 3239, \"name\": \"使疼乐\" }, { \"id\": 3240, \"name\": \"司特立\" }, { \"id\": 3241, \"name\": \"斯特林\" }, { \"id\": 3242, \"name\": \"Sultamicillinum\" }, { \"id\": 3243, \"name\": \"舒坦乐安定\" }, { \"id\": 3244, \"name\": \"索他洛尔盐酸盐\" }, { \"id\": 3245, \"name\": \"珊特拉林\" }, { \"id\": 3246, \"name\": \"A.P.C\" }, { \"id\": 3247, \"name\": \"施他宁\" }, { \"id\": 3248, \"name\": \"塞替哌\" }, { \"id\": 3249, \"name\": \"噻替哌\" }, { \"id\": 3250, \"name\": \"噻替派\" }, { \"id\": 3253, \"name\": \"塞透派勒\" }, { \"id\": 3256, \"name\": \"栓体舒\" }, { \"id\": 3257, \"name\": \"Unasyn(Sultamicillin Tosilate)\" }, { \"id\": 3258, \"name\": \"优力新\" }, { \"id\": 3259, \"name\": \"舒他西林甲苯磺酸盐\" }, { \"id\": 3261, \"name\": \"双脱氧胸苷\" }, { \"id\": 3262, \"name\": \"赛特赞\" }, { \"id\": 3263, \"name\": \"司坦唑\" }, { \"id\": 3264, \"name\": \"Sulfamethoxazole Co.\" }, { \"id\": 3267, \"name\": \"Sumamed\" }, { \"id\": 3270, \"name\": \"善唯达\" }, { \"id\": 3271, \"name\": \"善卫得\" }, { \"id\": 3272, \"name\": \"善胃得\" }, { \"id\": 3273, \"name\": \"噻肟单酰胺菌素\" }, { \"id\": 3275, \"name\": \"β-顺维甲酸\" }, { \"id\": 3276, \"name\": \"四维康\" }, { \"id\": 3277, \"name\": \"沙威洛\" }, { \"id\": 3278, \"name\": \"舒维疗\" }, { \"id\": 3279, \"name\": \"β-顺-维A酸\" }, { \"id\": 3280, \"name\": \"施维舒\" }, { \"id\": 3281, \"name\": \"噻肟四嗪\" }, { \"id\": 3282, \"name\": \"塞瓦停\" }, { \"id\": 3283, \"name\": \"生胃酮\" }, { \"id\": 3284, \"name\": \"噻肟头孢菌素\" }, { \"id\": 3285, \"name\": \"生胃酮钠\" }, { \"id\": 3286, \"name\": \"沙维西林\" }, { \"id\": 3288, \"name\": \"噻肟酯头孢菌素\" }, { \"id\": 3289, \"name\": \"升血安\" }, { \"id\": 3290, \"name\": \"四硝赤醇\" }, { \"id\": 3291, \"name\": \"速效肠虫净\" }, { \"id\": 3292, \"name\": \"双香豆精\" }, { \"id\": 3294, \"name\": \"酸性碳酸钠\" }, { \"id\": 3296, \"name\": \"四溴酚酞二磺酸钠\" }, { \"id\": 3297, \"name\": \"四烯高诺酮\" }, { \"id\": 3300, \"name\": \"双辛磺琥珀\" }, { \"id\": 3302, \"name\": \"四硝基甘油\" }, { \"id\": 3304, \"name\": \"四硝基季戊醇\" }, { \"id\": 3306, \"name\": \"水信克疱\" }, { \"id\": 3308, \"name\": \"双星明\" }, { \"id\": 3309, \"name\": \"人血免疫球蛋白\" }, { \"id\": 3310, \"name\": \"舒血宁\" }, { \"id\": 3313, \"name\": \"复方乙酰水杨酸\" }, { \"id\": 3314, \"name\": \"四硝酸甘油脂\" }, { \"id\": 3315, \"name\": \"四硝酸甘油酯\" }, { \"id\": 3316, \"name\": \"四硝酸季戊醇\" }, { \"id\": 3317, \"name\": \"四硝酸季戊四醇酯\" }, { \"id\": 3319, \"name\": \"双硝酸异山梨酯\" }, { \"id\": 3320, \"name\": \"升血糖素\" }, { \"id\": 3321, \"name\": \"腮腺炎减毒活疫苗\" }, { \"id\": 3322, \"name\": \"噻乙氨唑头孢菌素\" }, { \"id\": 3323, \"name\": \"噻乙胺唑头孢菌素\" }, { \"id\": 3326, \"name\": \"双异丙酚\" }, { \"id\": 3328, \"name\": \"双异丙基胺抗坏血酸\" }, { \"id\": 3330, \"name\": \"双异丙吡安\" }, { \"id\": 3331, \"name\": \"双异丙吡胺\" }, { \"id\": 3338, \"name\": \"DL-A生育醇醋酸酯\" }, { \"id\": 3339, \"name\": \"四乙撑硫代磷酰胺\" }, { \"id\": 3343, \"name\": \"四乙碘化没食子铵\" }, { \"id\": 3344, \"name\": \"生育酚\" }, { \"id\": 3345, \"name\": \"DL-α-生育酚醋酸酯\" }, { \"id\": 3346, \"name\": \"α-生育酚醋酸酯\" }, { \"id\": 3347, \"name\": \"生育酚醋酸酯\" }, { \"id\": 3348, \"name\": \"α-生育酚烟酸酯\" }, { \"id\": 3351, \"name\": \"舒雅乐\" }, { \"id\": 3353, \"name\": \"双益平\" }, { \"id\": 3354, \"name\": \"舒压嗪\" }, { \"id\": 3357, \"name\": \"舒茚酸\" }, { \"id\": 3360, \"name\": \"十一酸睾素\" }, { \"id\": 3361, \"name\": \"十一酸睾丸素\" }, { \"id\": 3362, \"name\": \"十一酸睾丸酮\" }, { \"id\": 3363, \"name\": \"顺双氯双氨络铂\" }, { \"id\": 3364, \"name\": \"水杨酸钠碘化钠\" }, { \"id\": 3367, \"name\": \"水杨酸偶氮磺胺吡啶\" }, { \"id\": 3369, \"name\": \"水杨酸依色林\" }, { \"id\": 3372, \"name\": \"十一烷酸睾酮\" }, { \"id\": 3373, \"name\": \"17β-十一烷酸酯\" }, { \"id\": 3374, \"name\": \"十一烷酮\" }, { \"id\": 3377, \"name\": \"双乙酸乙二胺\" }, { \"id\": 3378, \"name\": \"二乙酸乙二胺\" }, { \"id\": 3380, \"name\": \"四乙烯硫化磷酰胺\" }, { \"id\": 3381, \"name\": \"十一烯酸锌复方制剂\" }, { \"id\": 3382, \"name\": \"水杨酰水杨胺\" }, { \"id\": 3383, \"name\": \"水杨酰水杨酸\" }, { \"id\": 3384, \"name\": \"水杨酰水杨酸酯\" }, { \"id\": 3386, \"name\": \"四乙酰竹桃霉素\" }, { \"id\": 3388, \"name\": \"四乙氧苯酰丙酸\" }, { \"id\": 3394, \"name\": \"四唑安定\" }, { \"id\": 3395, \"name\": \"四唑苯二氮卓\" }, { \"id\": 3396, \"name\": \"噻唑苯咪\" }, { \"id\": 3399, \"name\": \"四唑氮卓\" }, { \"id\": 3400, \"name\": \"四唑芬太尼\" }, { \"id\": 3401, \"name\": \"四唑核苷\" }, { \"id\": 3402, \"name\": \"四唑林\" }, { \"id\": 3403, \"name\": \"四唑氯安定\" }, { \"id\": 3404, \"name\": \"四唑氯卓\" }, { \"id\": 3408, \"name\": \"双唑泰\" }, { \"id\": 3410, \"name\": \"生长抑素八肽\" }, { \"id\": 3416, \"name\": \"酞氨苄西林\" }, { \"id\": 3419, \"name\": \"肽胺哌啶酮\" }, { \"id\": 3420, \"name\": \"酞胺哌啶酮\" }, { \"id\": 3421, \"name\": \"酞氨青霉素\" }, { \"id\": 3426, \"name\": \"碳铂\" }, { \"id\": 3427, \"name\": \"替比昂\" }, { \"id\": 3428, \"name\": \"头孢氨苄一水化物\" }, { \"id\": 3429, \"name\": \"头孢氨呋肟\" }, { \"id\": 3430, \"name\": \"头孢氨呋肟钠\" }, { \"id\": 3431, \"name\": \"头孢氨呋肟酯\" }, { \"id\": 3433, \"name\": \"头孢氨呋肟乙酯\" }, { \"id\": 3434, \"name\": \"头孢氨噻醚酯\" }, { \"id\": 3435, \"name\": \"头孢氨噻四嗪\" }, { \"id\": 3436, \"name\": \"头孢氨噻肟\" }, { \"id\": 3437, \"name\": \"头孢氨噻肟钠\" }, { \"id\": 3439, \"name\": \"头孢必\" }, { \"id\": 3443, \"name\": \"头孢泊姆\" }, { \"id\": 3446, \"name\": \"头孢泊肟普昔酯\" }, { \"id\": 3447, \"name\": \"头孢丙肟酯\" }, { \"id\": 3448, \"name\": \"头孢布烯\" }, { \"id\": 3450, \"name\": \"头孢布宗钠\" }, { \"id\": 3452, \"name\": \"头孢地嗪钠\" }, { \"id\": 3453, \"name\": \"头孢多星酯\" }, { \"id\": 3454, \"name\": \"头孢呋啉钠\" }, { \"id\": 3456, \"name\": \"头孢呋肟\" }, { \"id\": 3457, \"name\": \"头孢呋肟氨甲酸酯钠\" }, { \"id\": 3458, \"name\": \"头孢呋肟钠\" }, { \"id\": 3459, \"name\": \"头孢呋肟酯\" }, { \"id\": 3460, \"name\": \"头孢呋新\" }, { \"id\": 3461, \"name\": \"头孢呋辛阿昔酯\" }, { \"id\": 3462, \"name\": \"头孢呋新酯\" }, { \"id\": 3465, \"name\": \"头孢1号\" }, { \"id\": 3466, \"name\": \"头孢4号\" }, { \"id\": 3467, \"name\": \"头孢Ⅳ号\" }, { \"id\": 3468, \"name\": \"头孢5号\" }, { \"id\": 3469, \"name\": \"头孢Ⅵ号\" }, { \"id\": 3470, \"name\": \"头孢一号\" }, { \"id\": 3473, \"name\": \"头孢环己烯\" }, { \"id\": 3476, \"name\": \"头孢金素\" }, { \"id\": 3477, \"name\": \"头孢菌素018\" }, { \"id\": 3478, \"name\": \"头孢菌素Ⅰ\" }, { \"id\": 3480, \"name\": \"头孢菌素Ⅳ\" }, { \"id\": 3481, \"name\": \"头孢菌素Ⅴ\" }, { \"id\": 3482, \"name\": \"头孢菌素Ⅵ\" }, { \"id\": 3484, \"name\": \"头孢菌素18号\" }, { \"id\": 3485, \"name\": \"头孢菌素1号\" }, { \"id\": 3488, \"name\": \"头孢菌素4号\" }, { \"id\": 3489, \"name\": \"头孢菌素Ⅳ号\" }, { \"id\": 3490, \"name\": \"头孢菌素5号\" }, { \"id\": 3491, \"name\": \"头孢菌素6号\" }, { \"id\": 3492, \"name\": \"头孢菌素Ⅵ号\" }, { \"id\": 3497, \"name\": \"头孢菌素Ⅰ钠\" }, { \"id\": 3501, \"name\": \"头孢甲氧霉素\" }, { \"id\": 3502, \"name\": \"头孢甲氧噻吩\" }, { \"id\": 3504, \"name\": \"头孢克罗\" }, { \"id\": 3505, \"name\": \"头孢克罗单水化物\" }, { \"id\": 3506, \"name\": \"头孢克洛一水和物\" }, { \"id\": 3507, \"name\": \"释卵芬\" }, { \"id\": 3508, \"name\": \"速力菲\" }, { \"id\": 3509, \"name\": \"双氯芬酸二乙胺盐\" }, { \"id\": 3510, \"name\": \"双氯芬酸/米索前列醇\" }, { \"id\": 3513, \"name\": \"神灵杆菌脂多糖\" }, { \"id\": 3514, \"name\": \"双氯高灭酸\" }, { \"id\": 3515, \"name\": \"双氯高灭酸钠\" }, { \"id\": 3516, \"name\": \"双氯磺酰胺\" }, { \"id\": 3517, \"name\": \"色拉肼\" }, { \"id\": 3520, \"name\": \"司来吉兰盐酸盐\" }, { \"id\": 3521, \"name\": \"四联菌苗\" }, { \"id\": 3523, \"name\": \"舒丽君能\" }, { \"id\": 3524, \"name\": \"四氯甲哌噻嗪\" }, { \"id\": 3528, \"name\": \"赛洛克\" }, { \"id\": 3530, \"name\": \"疋鲁卡品\" }, { \"id\": 3531, \"name\": \"塞罗卡因\" }, { \"id\": 3532, \"name\": \"赛罗卡因\" }, { \"id\": 3533, \"name\": \"赛洛卡因\" }, { \"id\": 3534, \"name\": \"赛罗卡因盐酸盐\" }, { \"id\": 3535, \"name\": \"塞来力\" }, { \"id\": 3536, \"name\": \"赛来力\" }, { \"id\": 3537, \"name\": \"赛洛力\" }, { \"id\": 3538, \"name\": \"双氯硫酰胺\" }, { \"id\": 3539, \"name\": \"色拉明\" }, { \"id\": 3540, \"name\": \"速力敏\" }, { \"id\": 3541, \"name\": \"双氯灭酸\" }, { \"id\": 3542, \"name\": \"丝烈霉素\" }, { \"id\": 3543, \"name\": \"丝烈霉素C\" }, { \"id\": 3544, \"name\": \"丝裂霉素C(协和)\" }, { \"id\": 3545, \"name\": \"丝裂霉素C\" }, { \"id\": 3547, \"name\": \"双氯灭酸钾\" }, { \"id\": 3549, \"name\": \"双氯灭通\" }, { \"id\": 3550, \"name\": \"双氯灭痛\" }, { \"id\": 3552, \"name\": \"双氯灭痛酸\" }, { \"id\": 3554, \"name\": \"司乐平\" }, { \"id\": 3555, \"name\": \"噻氯匹啶\" }, { \"id\": 3556, \"name\": \"噻氯匹定盐酸盐\" }, { \"id\": 3557, \"name\": \"双氯青\" }, { \"id\": 3558, \"name\": \"双氯青霉素\" }, { \"id\": 3559, \"name\": \"双氯青霉素钠\" }, { \"id\": 3560, \"name\": \"舒丽启能\" }, { \"id\": 3563, \"name\": \"蒜辣素\" }, { \"id\": 3564, \"name\": \"双氯双氨络铂\" }, { \"id\": 3569, \"name\": \"山梨酸铁\" }, { \"id\": 3570, \"name\": \"四磷酸腺甙\" }, { \"id\": 3572, \"name\": \"四磷酸腺苷二钠\" }, { \"id\": 3576, \"name\": \"Saridone\" }, { \"id\": 3577, \"name\": \"撒烈痛\" }, { \"id\": 3578, \"name\": \"赛乐特\" }, { \"id\": 3580, \"name\": \"司立泰\" }, { \"id\": 3581, \"name\": \"D-山梨糖醇\" }, { \"id\": 3582, \"name\": \"沙雷肽酶\" }, { \"id\": 3583, \"name\": \"施立稳\" }, { \"id\": 3587, \"name\": \"四乐喜\" }, { \"id\": 3589, \"name\": \"双硫醒\" }, { \"id\": 3591, \"name\": \"四磷腺甙\" }, { \"id\": 3592, \"name\": \"四磷腺苷\" }, { \"id\": 3593, \"name\": \"丝氯酰肼\" }, { \"id\": 3594, \"name\": \"四氯烯咪唑胺\" }, { \"id\": 3595, \"name\": \"苏拉西泮\" }, { \"id\": 3596, \"name\": \"目宁\" }, { \"id\": 3597, \"name\": \"斯耐普\" }, { \"id\": 3599, \"name\": \"双氯乙基甲胺\" }, { \"id\": 3600, \"name\": \"双氯乙基亚硝脲\" }, { \"id\": 3602, \"name\": \"四联疫苗\" }, { \"id\": 3605, \"name\": \"双氯乙亚硝脲\" }, { \"id\": 3607, \"name\": \"赛洛唑啉\" }, { \"id\": 3608, \"name\": \"赛洛唑啉盐酸盐\" }, { \"id\": 3611, \"name\": \"SM2\" }, { \"id\": 3612, \"name\": \"速眠安\" }, { \"id\": 3613, \"name\": \"时美百服宁\" }];\n\n            require([\'jquery\', \'knockout\', \'flyweight\'], function ($, ko, fw) {\n                var options = {\n                    ko: ko,\n                    ulBindScript: \"foreach: items\",\n                    liBindScript: \"text: name, attr: { _id: id, _name: name }, click: $root.select\",\n                    items: datas,\n                    viewModel: function () {\n                        var self = this;\n                        //声明要监控的数组\n                        self.items = ko.observableArray([]);\n                        self.setCurrentItems = function (currentItems) {\n                            self.items(currentItems);\n                        };\n                        //选中事件\n                        self.select = function (item) {\n                            console.log(item.id);\n                            return false;\n                        }\n                    },\n                    itemHeight: 30,\n                    itemShowCount: 10\n                };\n                $(\"#demo\").flyWeight(options);\n            });\n        }();\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"width: 400px; display: block; height: 300px; margin: 0 auto; position: relative;\" id=\"demo\"&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> \n</div> \n<p>　　最后，要偷懒的可以下这个包：<a href=\"http://files.cnblogs.com/files/dengxi/FlyWeight.rar\" target=\"_blank\">FlyWeight.rar</a></p>',NULL,'2017-04-24 16:01:10',2,0,NULL,'http://www.cnblogs.com/dengxi/p/6755590.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (51,'利用Scrapy爬取所有知乎用户详细信息并存至MongoDB','<p>欢迎大家关注<a href=\"https://home.cnblogs.com/u/qcloud1001/\" target=\"_blank\">腾讯云技术社区-博客园官方主页</a>，我们将持续在博客园为大家推荐技术精品文章哦~</p> \n<blockquote> \n <p>作者 ：崔庆才</p> \n</blockquote> \n<p>本节分享一下爬取知乎用户所有用户信息的 Scrapy 爬虫实战。</p> \n<h2 id=\"-\">本节目标</h2> \n<p>本节要实现的内容有：</p> \n<ul> \n <li> <p>从一个大V用户开始，通过递归抓取粉丝列表和关注列表，实现知乎所有用户的详细信息的抓取。</p> </li> \n <li> <p>将抓取到的结果存储到&nbsp;<a href=\"https://www.qcloud.com/product/mongodb?fromSource=gwzcw.93786.93786.93786\" target=\"_blank\">MongoDB</a>，并进行去重操作。</p> </li> \n</ul> \n<h2 id=\"-\">思路分析</h2> \n<p>我们都知道每个人都有关注列表和粉丝列表，尤其对于大V来说，粉丝和关注尤其更多。</p> \n<p>如果我们从一个大V开始，首先可以获取他的个人信息，然后我们获取他的粉丝列表和关注列表，然后遍历列表中的每一个用户，进一步抓取每一个用户的信息还有他们各自的粉丝列表和关注列表，然后再进一步遍历获取到的列表中的每一个用户，进一步抓取他们的信息和关注粉丝列表，循环往复，不断递归，这样就可以做到一爬百，百爬万，万爬百万，通过社交关系自然形成了一个爬取网，这样就可以爬到所有的用户信息了。当然零粉丝零关注的用户就忽略他们吧～</p> \n<p>爬取的信息怎样来获得呢？不用担心，通过分析知乎的请求就可以得到相关接口，通过请求接口就可以拿到用户详细信息和粉丝、关注列表了。</p> \n<p>接下来我们开始实战爬取。</p> \n<h2 id=\"-\">环境需求</h2> \n<h3 id=\"python3\">Python3</h3> \n<p>本项目使用的 Python 版本是 Python3，项目开始之前请确保你已经安装了Python3。</p> \n<h3 id=\"scrapy\">Scrapy</h3> \n<p>Scrapy 是一个强大的爬虫框架，安装方式如下：</p> \n<pre><code><span class=\"hljs-attribute\">pip3 install scrapy </span></code></pre> \n<h3 id=\"mongodb\">MongoDB</h3> \n<p>非关系型数据库，项目开始之前请先安装好 MongoDB 并启动服务。</p> \n<h3 id=\"pymongo\">PyMongo</h3> \n<p>Python 的 MongoDB 连接库，安装方式如下：</p> \n<pre><code><span class=\"hljs-attribute\">pip3 install pymongo </span></code></pre> \n<h2 id=\"-\">创建项目</h2> \n<p>安装好以上环境之后，我们便可以开始我们的项目了。<br>在项目开始之首先我们用命令行创建一个项目：</p> \n<pre><code><span class=\"hljs-attribute\">scrapy startproject zhihuuser </span></code></pre> \n<h2 id=\"-\">创建爬虫</h2> \n<p>接下来我们需要创建一个 spider，同样利用命令行，不过这次命令行需要进入到项目里运行。</p> \n<pre><code><span class=\"hljs-selector-tag\">cd <span class=\"hljs-selector-tag\">zhihuuser <span class=\"hljs-selector-tag\">scrapy <span class=\"hljs-selector-tag\">genspider <span class=\"hljs-selector-tag\">zhihu <span class=\"hljs-selector-tag\">www<span class=\"hljs-selector-class\">.zhihu<span class=\"hljs-selector-class\">.com </span></span></span></span></span></span></span></span></code></pre> \n<h2 id=\"-robotstxt_obey\">禁止ROBOTSTXT_OBEY</h2> \n<p>接下来你需要打开<code>settings.py</code>文件，将<code>ROBOTSTXT_OBEY</code>修改为 False。</p> \n<pre><code class=\"lang-python\"><span class=\"hljs-attr\">ROBOTSTXT_OBEY = <span class=\"hljs-literal\">False </span></span></code></pre> \n<p>它默认为True，就是要遵守<code>robots.txt</code>&nbsp;的规则，那么<code>robots.txt</code>是个什么东西呢？</p> \n<p>通俗来说，<code>robots.txt</code>是遵循 Robot 协议的一个文件，它保存在网站的服务器中，它的作用是，告诉搜索引擎爬虫，本网站哪些目录下的网页 不希望 你进行爬取收录。在Scrapy启动后，会在第一时间访问网站的<code>robots.txt</code>&nbsp;文件，然后决定该网站的爬取范围。</p> \n<p>当然，我们并不是在做搜索引擎，而且在某些情况下我们想要获取的内容恰恰是被<code>robots.txt</code>&nbsp;所禁止访问的。所以，某些时候，我们就要将此配置项设置为 False ，拒绝遵守 Robot协议 ！</p> \n<p>所以在这里设置为 False 。当然可能本次爬取不一定会被它限制，但是我们一般来说会首先选择禁止它。</p> \n<h2 id=\"-\">尝试最初的爬取</h2> \n<p>接下来我们什么代码也不修改，执行爬取，运行如下命令：</p> \n<pre><code><span class=\"hljs-attribute\">scrapy crawl zhihu </span></code></pre> \n<p>你会发现爬取结果会出现这样的一个错误：</p> \n<pre><code><span class=\"hljs-number\">500 Internal Server <span class=\"hljs-built_in\">Error </span></span></code></pre> \n<p>访问知乎得到的状态码是500，这说明爬取并没有成功，其实这是因为我们没有加入请求头，知乎识别<code>User-Agent</code>发现不是浏览器，就返回错误的响应了。</p> \n<p>所以接下来的一步我们需要加入请求 headers 信息，你可以在 Request 的参数里加，也可以在 spider 里面的<code>custom_settings</code>里面加，当然最简单的方法莫过于在全局 settings 里面加了。</p> \n<p>我们打开<code>settings.py</code>文件，取消<code>DEFAULT_REQUEST_HEADERS</code>的注释，加入如下的内容：</p> \n<pre><code class=\"lang-python\">DEFAULT_REQUEST_HEADERS = {\n    <span class=\"hljs-string\">\'User-Agent\': <span class=\"hljs-string\">\'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\' } </span></span></code></pre> \n<p>这个是为你的请求添加请求头，如果你没有设置 headers 的话，它就会使用这个请求头请求，添加了<code>User-Agent</code>信息，所以这样我们的爬虫就可以伪装浏览器了。</p> \n<p>接下来重新运行爬虫。</p> \n<pre><code><span class=\"hljs-attribute\">scrapy crawl zhihu </span></code></pre> \n<p>这时你就会发现得到的返回状态码就正常了。</p> \n<p>解决了这个问题，我们接下来就可以分析页面逻辑来正式实现爬虫了。</p> \n<h2 id=\"-\">爬取流程</h2> \n<p>接下来我们需要先探寻获取用户详细信息和获取关注列表的接口。</p> \n<p>回到网页，打开浏览器的控制台，切换到Network监听模式。</p> \n<p>我们首先要做的是寻找一个大V，以轮子哥为例吧，它的个人信息页面网址是：<a href=\"https://www.zhihu.com/people/excited-vczh\" target=\"_blank\">https://www.zhihu.com/people/excited-vczh</a></p> \n<p>首先打开轮子哥的首页</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/e3acda56-256d-4ad1-8881-eaa116220774.jpeg\" alt=\"\"></p> \n<p>我们可以看到这里就是他的一些基本信息，我们需要抓取的就是这些，比如名字、签名、职业、关注数、赞同数等等。</p> \n<p>接下来我们需要探索一下关注列表接口在哪里，我们点击关注选项卡，然后下拉，点击翻页，我们会在下面的请求中发现出现了 followees 开头的 Ajax 请求。这个就是获取关注列表的接口。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/0cf8696e-7ba9-46a5-b9d6-ebcd827752a4.jpeg\" alt=\"\"></p> \n<p>我们观察一下这个请求结构</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/d874cd2b-200f-4865-a906-05eaaddb7e06.jpeg\" alt=\"\"></p> \n<p>首先它是一个Get类型的请求，请求的URL是<a href=\"https://www.zhihu.com/api/v4/members/excited-vczh/followees\" target=\"_blank\">https://www.zhihu.com/api/v4/members/excited-vczh/followees</a>，后面跟了三个参数，一个是include，一个是offset，一个是limit。</p> \n<p>观察后可以发现，include 是一些获取关注的人的基本信息的查询参数，包括回答数、文章数等等。</p> \n<p>offset 是偏移量，我们现在分析的是第3 页的关注列表内容，offset 当前为40。</p> \n<p>limit 为每一页的数量，这里是20，所以结合上面的 offset 可以推断，当 offset 为0 时，获取到的是第一页关注列表，当offset 为20 时，获取到的是第二页关注列表，依次类推。</p> \n<p>然后接下来看下返回结果：</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/9bbddabd-3b6d-4bc9-88f9-562da617fd07.jpeg\" alt=\"\"></p> \n<p>可以看到有 data 和 paging 两个字段，data 就是数据，包含20个内容，这些就是用户的基本信息，也就是关注列表的用户信息。</p> \n<p>paging里面又有几个字段，<code>is_end</code>表示当前翻页是否结束，next 是下一页的链接，所以在判读分页的时候，我们可以先利用<code>is_end</code>判断翻页是否结束，然后再获取 next 链接，请求下一页。</p> \n<p>这样我们的关注列表就可以通过接口获取到了。</p> \n<p>接下来我们再看下用户详情接口在哪里，我们将鼠标放到关注列表任意一个头像上面，观察下网络请求，可以发现又会出现一个 Ajax 请求。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/a3728861-3aa1-4227-8f81-2bb6b48f15df.jpeg\" alt=\"\"></p> \n<p>可以看到这次的请求链接为<a href=\"https://www.zhihu.com/api/v4/members/lu-jun-ya-1\" target=\"_blank\">https://www.zhihu.com/api/v4/members/lu-jun-ya-1</a><br>后面又一个参数include，include 是一些查询参数，与刚才的接口类似，不过这次参数非常全，几乎可以把所有详情获取下来，另外接口的最后是加了用户的用户名，这个其实是<code>url_token</code>，上面的那个接口其实也是，在返回数据中是可以获得的。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/e1931b8f-3d4d-4ff2-bd50-922cdf9a6d1f.jpeg\" alt=\"\"></p> \n<p>所以综上所述：</p> \n<ul> \n <li> <p>要获取用户的关注列表，我们需要请求类似&nbsp;<a href=\"https://www.zhihu.com/api/v4/members/%7Buser%7D/followees?include=%7Binclude%7D&amp;offset=%7Boffset%7D&amp;limit=%7Blimit%7D\" target=\"_blank\">https://www.zhihu.com/api/v4/members/{user}/followees?include={include}&amp;offset={offset}&amp;limit={limit}</a>&nbsp;这样的接口，其中user就是该用户的<code>url_token</code>，include 是固定的查询参数，offset 是分页偏移量，limit是一页取多少个。</p> </li> \n <li> <p>要获取用户的详细信息，我们需要请求类似&nbsp;<a href=\"https://www.zhihu.com/api/v4/members/%7Buser%7D?include=%7Binclude%7D\" target=\"_blank\">https://www.zhihu.com/api/v4/members/{user}?include={include}</a>&nbsp;这样的接口，其中user就是该用户的<code>url_token</code>，include是查询参数。</p> </li> \n</ul> \n<p>理清了如上接口逻辑后，我们就可以开始构造请求了。</p> \n<h2 id=\"-\">生成第一步请求</h2> \n<p>接下来我们要做的第一步当然是请求轮子哥的基本信息，然后获取轮子哥的关注列表了，我们首先构造一个格式化的url，将一些可变参数提取出来，然后需要重写<code>start_requests</code>方法，生成第一步的请求，接下来我们还需要根据获取到到关注列表做进一步的分析。</p> \n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import json <span class=\"hljs-keyword\">from scrapy <span class=\"hljs-keyword\">import Spider, Request <span class=\"hljs-keyword\">from zhihuuser.items <span class=\"hljs-keyword\">import UserItem <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">ZhihuSpider<span class=\"hljs-params\">(Spider): name = <span class=\"hljs-string\">\"zhihu\" allowed_domains = [<span class=\"hljs-string\">\"www.zhihu.com\"] user_url = <span class=\"hljs-string\">\'https://www.zhihu.com/api/v4/members/{user}?include={include}\' follows_url = <span class=\"hljs-string\">\'https://www.zhihu.com/api/v4/members/{user}/followees?include={include}&amp;offset={offset}&amp;limit={limit}\' start_user = <span class=\"hljs-string\">\'excited-vczh\' user_query = <span class=\"hljs-string\">\'locations,employments,gender,educations,business,voteup_count,thanked_Count,follower_count,following_count,cover_url,following_topic_count,following_question_count,following_favlists_count,following_columns_count,answer_count,articles_count,pins_count,question_count,commercial_question_count,favorite_count,favorited_count,logs_count,marked_answers_count,marked_answers_text,message_thread_token,account_status,is_active,is_force_renamed,is_bind_sina,sina_weibo_url,sina_weibo_name,show_sina_weibo,is_blocking,is_blocked,is_following,is_followed,mutual_followees_count,vote_to_count,vote_from_count,thank_to_count,thank_from_count,thanked_count,description,hosted_live_count,participated_live_count,allow_message,industry_category,org_name,org_homepage,badge[?(type=best_answerer)].topics\' follows_query = <span class=\"hljs-string\">\'data[*].answer_count,articles_count,gender,follower_count,is_followed,is_following,badge[?(type=best_answerer)].topics\' <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">start_requests<span class=\"hljs-params\">(self): <span class=\"hljs-keyword\">yield Request(self.user_url.format(user=self.start_user, include=self.user_query), self.parse_user) <span class=\"hljs-keyword\">yield Request(self.follows_url.format(user=self.start_user, include=self.follows_query, limit=<span class=\"hljs-number\">20, offset=<span class=\"hljs-number\">0), self.parse_follows) </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> \n<p>然后我们实现一下两个解析方法<code>parse_user</code>和<code>parse_follows</code>。</p> \n<pre><code class=\"lang-python\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">parse_user<span class=\"hljs-params\">(self, response): print(response.text) <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">parse_follows<span class=\"hljs-params\">(self, response): print(response.text) </span></span></span></span></span></span></span></span></code></pre> \n<p>最简单的实现他们的结果输出即可，然后运行观察结果。</p> \n<pre><code><span class=\"hljs-attribute\">scrapy crawl zhihu </span></code></pre> \n<p>这时你会发现出现了</p> \n<pre><code><span class=\"hljs-number\">401 HTTP status code <span class=\"hljs-keyword\">is <span class=\"hljs-keyword\">not handled <span class=\"hljs-keyword\">or <span class=\"hljs-keyword\">not allowed </span></span></span></span></span></code></pre> \n<p>访问被禁止了，这时我们观察下浏览器请求，发现它相比之前的请求多了一个 OAuth 请求头。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/c16bad78-945e-4f02-8ce8-506e1157a457.jpeg\" alt=\"\"></p> \n<h2 id=\"oauth\">OAuth</h2> \n<p>它是Open Authorization的缩写。</p> \n<p><code>OAUTH_token:OAUTH</code>进行到最后一步得到的一个“令牌”，通过此“令牌”请求，就可以去拥有资源的网站抓取任意有权限可以被抓取的资源。</p> \n<p>在这里我知乎并没有登陆，这里的OAuth值是</p> \n<pre><code><span class=\"hljs-attribute\">oauth c3cef7c66a1843f8b3a9e6a1e3160e20 </span></code></pre> \n<p>经过我长久的观察，这个一直不会改变，所以可以长久使用，我们将它配置到DEFAULT_REQUEST_HEADERS里，这样它就变成了：</p> \n<pre><code class=\"lang-python\">DEFAULT_REQUEST_HEADERS = {\n    <span class=\"hljs-string\">\'User-Agent\': <span class=\"hljs-string\">\'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\', <span class=\"hljs-string\">\'authorization\': <span class=\"hljs-string\">\'oauth c3cef7c66a1843f8b3a9e6a1e3160e20\', } </span></span></span></span></code></pre> \n<p>接下来如果我们重新运行爬虫，就可以发现可以正常爬取了。</p> \n<h2 id=\"parse_user\">parse_user</h2> \n<p>接下来我们处理一下用户基本信息，首先我们查看一下接口信息会返回一些什么数据。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/94d26c37-137d-4968-a337-bb940b1d847e.jpeg\" alt=\"\"></p> \n<p>可以看到返回的结果非常全，在这里我们直接声明一个Item全保存下就好了。</p> \n<p>在 items 里新声明一个 UserItem</p> \n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from scrapy <span class=\"hljs-keyword\">import Item, Field <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">UserItem<span class=\"hljs-params\">(Item): <span class=\"hljs-comment\"># define the fields for your item here like: id = Field() name = Field() avatar_url = Field() headline = Field() description = Field() url = Field() url_token = Field() gender = Field() cover_url = Field() type = Field() badge = Field() answer_count = Field() articles_count = Field() commercial_question_count = Field() favorite_count = Field() favorited_count = Field() follower_count = Field() following_columns_count = Field() following_count = Field() pins_count = Field() question_count = Field() thank_from_count = Field() thank_to_count = Field() thanked_count = Field() vote_from_count = Field() vote_to_count = Field() voteup_count = Field() following_favlists_count = Field() following_question_count = Field() following_topic_count = Field() marked_answers_count = Field() mutual_followees_count = Field() hosted_live_count = Field() participated_live_count = Field() locations = Field() educations = Field() employments = Field() </span></span></span></span></span></span></span></code></pre> \n<p>所以在解析方法里面我们解析得到的 response 内容，然后转为 json 对象，然后依次判断字段是否存在，赋值就好了。</p> \n<pre><code class=\"lang-python\">result = json.loads(response.text)\nitem = UserItem()\n<span class=\"hljs-keyword\">for field <span class=\"hljs-keyword\">in item.fields: <span class=\"hljs-keyword\">if field <span class=\"hljs-keyword\">in result.keys(): item[field] = result.<span class=\"hljs-keyword\">get(field) <span class=\"hljs-keyword\">yield item </span></span></span></span></span></span></code></pre> \n<p>得到 item 后通过 yield 返回就好了。</p> \n<p>这样保存用户基本信息就完成了。</p> \n<p>接下来我们还需要在这里获取这个用户的关注列表，所以我们需要再重新发起一个获取关注列表的 request</p> \n<p>在<code>parse_user</code>后面再添加如下代码：</p> \n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">yield Request( <span class=\"hljs-keyword\">self.follows_url.format(user=result.get(<span class=\"hljs-string\">\'url_token\'), <span class=\"hljs-keyword\">include=<span class=\"hljs-keyword\">self.follows_query, limit=<span class=\"hljs-number\">20, offset=<span class=\"hljs-number\">0), <span class=\"hljs-keyword\">self.parse_follows) </span></span></span></span></span></span></span></span></code></pre> \n<p>这样我们又生成了获取该用户关注列表的请求。</p> \n<h2 id=\"parse_follows\">parse_follows</h2> \n<p>接下来我们处理一下关注列表，首先也是解析response的文本，然后要做两件事：</p> \n<ul> \n <li> <p>通过关注列表的每一个用户，对每一个用户发起请求，获取其详细信息。</p> </li> \n <li> <p>处理分页，判断 paging 内容，获取下一页关注列表。</p> </li> \n</ul> \n<p>所以在这里将<code>parse_follows</code>改写如下：</p> \n<pre><code class=\"lang-python\">results = json.loads(response.text)\n\n<span class=\"hljs-keyword\">if <span class=\"hljs-string\">\'data\' <span class=\"hljs-keyword\">in results.keys(): <span class=\"hljs-keyword\">for result <span class=\"hljs-keyword\">in results.<span class=\"hljs-keyword\">get(<span class=\"hljs-string\">\'data\'): <span class=\"hljs-function\"><span class=\"hljs-keyword\">yield <span class=\"hljs-title\">Request(<span class=\"hljs-params\">self.user_url.format(user=result.<span class=\"hljs-keyword\">get(<span class=\"hljs-string\">\'url_token\'), include=self.user_query), self.parse_user) <span class=\"hljs-keyword\">if <span class=\"hljs-string\">\'paging\' <span class=\"hljs-keyword\">in results.keys() and results.<span class=\"hljs-keyword\">get(<span class=\"hljs-string\">\'paging\').<span class=\"hljs-keyword\">get(<span class=\"hljs-string\">\'is_end\') == False: next_page = results.<span class=\"hljs-keyword\">get(<span class=\"hljs-string\">\'paging\').<span class=\"hljs-keyword\">get(<span class=\"hljs-string\">\'next\') <span class=\"hljs-function\"><span class=\"hljs-keyword\">yield <span class=\"hljs-title\">Request(<span class=\"hljs-params\">next_page, self.parse_follows) </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> \n<p>这样，整体代码如下：</p> \n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*- <span class=\"hljs-keyword\">import json <span class=\"hljs-keyword\">from scrapy <span class=\"hljs-keyword\">import Spider, Request <span class=\"hljs-keyword\">from zhihuuser.items <span class=\"hljs-keyword\">import UserItem <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">ZhihuSpider<span class=\"hljs-params\">(Spider): name = <span class=\"hljs-string\">\"zhihu\" allowed_domains = [<span class=\"hljs-string\">\"www.zhihu.com\"] user_url = <span class=\"hljs-string\">\'https://www.zhihu.com/api/v4/members/{user}?include={include}\' follows_url = <span class=\"hljs-string\">\'https://www.zhihu.com/api/v4/members/{user}/followees?include={include}&amp;offset={offset}&amp;limit={limit}\' start_user = <span class=\"hljs-string\">\'excited-vczh\' user_query = <span class=\"hljs-string\">\'locations,employments,gender,educations,business,voteup_count,thanked_Count,follower_count,following_count,cover_url,following_topic_count,following_question_count,following_favlists_count,following_columns_count,answer_count,articles_count,pins_count,question_count,commercial_question_count,favorite_count,favorited_count,logs_count,marked_answers_count,marked_answers_text,message_thread_token,account_status,is_active,is_force_renamed,is_bind_sina,sina_weibo_url,sina_weibo_name,show_sina_weibo,is_blocking,is_blocked,is_following,is_followed,mutual_followees_count,vote_to_count,vote_from_count,thank_to_count,thank_from_count,thanked_count,description,hosted_live_count,participated_live_count,allow_message,industry_category,org_name,org_homepage,badge[?(type=best_answerer)].topics\' follows_query = <span class=\"hljs-string\">\'data[*].answer_count,articles_count,gender,follower_count,is_followed,is_following,badge[?(type=best_answerer)].topics\' <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">start_requests<span class=\"hljs-params\">(self): <span class=\"hljs-keyword\">yield Request(self.user_url.format(user=self.start_user, include=self.user_query), self.parse_user) <span class=\"hljs-keyword\">yield Request(self.follows_url.format(user=self.start_user, include=self.follows_query, limit=<span class=\"hljs-number\">20, offset=<span class=\"hljs-number\">0), self.parse_follows) <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">parse_user<span class=\"hljs-params\">(self, response): result = json.loads(response.text) item = UserItem() <span class=\"hljs-keyword\">for field <span class=\"hljs-keyword\">in item.fields: <span class=\"hljs-keyword\">if field <span class=\"hljs-keyword\">in result.keys(): item[field] = result.get(field) <span class=\"hljs-keyword\">yield item <span class=\"hljs-keyword\">yield Request( self.follows_url.format(user=result.get(<span class=\"hljs-string\">\'url_token\'), include=self.follows_query, limit=<span class=\"hljs-number\">20, offset=<span class=\"hljs-number\">0), self.parse_follows) <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">parse_follows<span class=\"hljs-params\">(self, response): results = json.loads(response.text) <span class=\"hljs-keyword\">if <span class=\"hljs-string\">\'data\' <span class=\"hljs-keyword\">in results.keys(): <span class=\"hljs-keyword\">for result <span class=\"hljs-keyword\">in results.get(<span class=\"hljs-string\">\'data\'): <span class=\"hljs-keyword\">yield Request(self.user_url.format(user=result.get(<span class=\"hljs-string\">\'url_token\'), include=self.user_query), self.parse_user) <span class=\"hljs-keyword\">if <span class=\"hljs-string\">\'paging\' <span class=\"hljs-keyword\">in results.keys() <span class=\"hljs-keyword\">and results.get(<span class=\"hljs-string\">\'paging\').get(<span class=\"hljs-string\">\'is_end\') == <span class=\"hljs-keyword\">False: next_page = results.get(<span class=\"hljs-string\">\'paging\').get(<span class=\"hljs-string\">\'next\') <span class=\"hljs-keyword\">yield Request(next_page, self.parse_follows) </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> \n<p>这样我们就完成了获取用户基本信息，然后递归获取关注列表进一步请求了。</p> \n<p>重新运行爬虫，可以发现当前已经可以实现循环递归爬取了。</p> \n<h2 id=\"followers\">followers</h2> \n<p>上面我们实现了通过获取关注列表实现爬取循环，那这里少不了的还有粉丝列表，经过分析后发现粉丝列表的 api 也类似，只不过把 followee 换成了 follower，其他的完全相同，所以我们按照同样的逻辑添加 followers 相关信息，</p> \n<p>最终spider代码如下：</p> \n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*- <span class=\"hljs-keyword\">import json <span class=\"hljs-keyword\">from scrapy <span class=\"hljs-keyword\">import Spider, Request <span class=\"hljs-keyword\">from zhihuuser.items <span class=\"hljs-keyword\">import UserItem <span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">ZhihuSpider<span class=\"hljs-params\">(Spider): name = <span class=\"hljs-string\">\"zhihu\" allowed_domains = [<span class=\"hljs-string\">\"www.zhihu.com\"] user_url = <span class=\"hljs-string\">\'https://www.zhihu.com/api/v4/members/{user}?include={include}\' follows_url = <span class=\"hljs-string\">\'https://www.zhihu.com/api/v4/members/{user}/followees?include={include}&amp;offset={offset}&amp;limit={limit}\' followers_url = <span class=\"hljs-string\">\'https://www.zhihu.com/api/v4/members/{user}/followers?include={include}&amp;offset={offset}&amp;limit={limit}\' start_user = <span class=\"hljs-string\">\'excited-vczh\' user_query = <span class=\"hljs-string\">\'locations,employments,gender,educations,business,voteup_count,thanked_Count,follower_count,following_count,cover_url,following_topic_count,following_question_count,following_favlists_count,following_columns_count,answer_count,articles_count,pins_count,question_count,commercial_question_count,favorite_count,favorited_count,logs_count,marked_answers_count,marked_answers_text,message_thread_token,account_status,is_active,is_force_renamed,is_bind_sina,sina_weibo_url,sina_weibo_name,show_sina_weibo,is_blocking,is_blocked,is_following,is_followed,mutual_followees_count,vote_to_count,vote_from_count,thank_to_count,thank_from_count,thanked_count,description,hosted_live_count,participated_live_count,allow_message,industry_category,org_name,org_homepage,badge[?(type=best_answerer)].topics\' follows_query = <span class=\"hljs-string\">\'data[*].answer_count,articles_count,gender,follower_count,is_followed,is_following,badge[?(type=best_answerer)].topics\' followers_query = <span class=\"hljs-string\">\'data[*].answer_count,articles_count,gender,follower_count,is_followed,is_following,badge[?(type=best_answerer)].topics\' <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">start_requests<span class=\"hljs-params\">(self): <span class=\"hljs-keyword\">yield Request(self.user_url.format(user=self.start_user, include=self.user_query), self.parse_user) <span class=\"hljs-keyword\">yield Request(self.follows_url.format(user=self.start_user, include=self.follows_query, limit=<span class=\"hljs-number\">20, offset=<span class=\"hljs-number\">0), self.parse_follows) <span class=\"hljs-keyword\">yield Request(self.followers_url.format(user=self.start_user, include=self.followers_query, limit=<span class=\"hljs-number\">20, offset=<span class=\"hljs-number\">0), self.parse_followers) <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">parse_user<span class=\"hljs-params\">(self, response): result = json.loads(response.text) item = UserItem() <span class=\"hljs-keyword\">for field <span class=\"hljs-keyword\">in item.fields: <span class=\"hljs-keyword\">if field <span class=\"hljs-keyword\">in result.keys(): item[field] = result.get(field) <span class=\"hljs-keyword\">yield item <span class=\"hljs-keyword\">yield Request( self.follows_url.format(user=result.get(<span class=\"hljs-string\">\'url_token\'), include=self.follows_query, limit=<span class=\"hljs-number\">20, offset=<span class=\"hljs-number\">0), self.parse_follows) <span class=\"hljs-keyword\">yield Request( self.followers_url.format(user=result.get(<span class=\"hljs-string\">\'url_token\'), include=self.followers_query, limit=<span class=\"hljs-number\">20, offset=<span class=\"hljs-number\">0), self.parse_followers) <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">parse_follows<span class=\"hljs-params\">(self, response): results = json.loads(response.text) <span class=\"hljs-keyword\">if <span class=\"hljs-string\">\'data\' <span class=\"hljs-keyword\">in results.keys(): <span class=\"hljs-keyword\">for result <span class=\"hljs-keyword\">in results.get(<span class=\"hljs-string\">\'data\'): <span class=\"hljs-keyword\">yield Request(self.user_url.format(user=result.get(<span class=\"hljs-string\">\'url_token\'), include=self.user_query), self.parse_user) <span class=\"hljs-keyword\">if <span class=\"hljs-string\">\'paging\' <span class=\"hljs-keyword\">in results.keys() <span class=\"hljs-keyword\">and results.get(<span class=\"hljs-string\">\'paging\').get(<span class=\"hljs-string\">\'is_end\') == <span class=\"hljs-keyword\">False: next_page = results.get(<span class=\"hljs-string\">\'paging\').get(<span class=\"hljs-string\">\'next\') <span class=\"hljs-keyword\">yield Request(next_page, self.parse_follows) <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">parse_followers<span class=\"hljs-params\">(self, response): results = json.loads(response.text) <span class=\"hljs-keyword\">if <span class=\"hljs-string\">\'data\' <span class=\"hljs-keyword\">in results.keys(): <span class=\"hljs-keyword\">for result <span class=\"hljs-keyword\">in results.get(<span class=\"hljs-string\">\'data\'): <span class=\"hljs-keyword\">yield Request(self.user_url.format(user=result.get(<span class=\"hljs-string\">\'url_token\'), include=self.user_query), self.parse_user) <span class=\"hljs-keyword\">if <span class=\"hljs-string\">\'paging\' <span class=\"hljs-keyword\">in results.keys() <span class=\"hljs-keyword\">and results.get(<span class=\"hljs-string\">\'paging\').get(<span class=\"hljs-string\">\'is_end\') == <span class=\"hljs-keyword\">False: next_page = results.get(<span class=\"hljs-string\">\'paging\').get(<span class=\"hljs-string\">\'next\') <span class=\"hljs-keyword\">yield Request(next_page, self.parse_followers) </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> \n<p>需要改变的位置有</p> \n<ul> \n <li> <p><code>start_requests</code>里面添加yield followers信息</p> </li> \n <li> <p><code>parse_user</code>里面里面添加yield followers信息</p> </li> \n <li> <p><code>parse_followers</code>做相应的的抓取详情请求和翻页</p> </li> \n</ul> \n<p>如此一来，spider 就完成了，这样我们就可以实现通过社交网络递归的爬取，把用户详情都爬下来。</p> \n<h2 id=\"-\">小结</h2> \n<p>通过以上的spider，我们实现了如上逻辑：</p> \n<ul> \n <li> <p><code>start_requests</code>方法，实现了第一个大V用户的详细信息请求还有他的粉丝和关注列表请求。</p> </li> \n <li> <p><code>parse_user</code>方法，实现了详细信息的提取和粉丝关注列表的获取。</p> </li> \n <li> <p><code>paese_follows</code>，实现了通过关注列表重新请求用户并进行翻页的功能。</p> </li> \n <li> <p><code>paese_followers</code>，实现了通过粉丝列表重新请求用户并进行翻页的功能。</p> </li> \n</ul> \n<h2 id=\"-pipeline\">加入pipeline</h2> \n<p>在这里数据库存储使用MongoDB，所以在这里我们需要借助于Item Pipeline，实现如下：</p> \n<pre><code class=\"lang-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class <span class=\"hljs-title\">MongoPipeline<span class=\"hljs-params\">(object): collection_name = <span class=\"hljs-string\">\'users\' <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">__init__<span class=\"hljs-params\">(self, mongo_uri, mongo_db): self.mongo_uri = mongo_uri self.mongo_db = mongo_db <span class=\"hljs-meta\"> @classmethod <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">from_crawler<span class=\"hljs-params\">(cls, crawler): <span class=\"hljs-keyword\">return cls( mongo_uri=crawler.settings.get(<span class=\"hljs-string\">\'MONGO_URI\'), mongo_db=crawler.settings.get(<span class=\"hljs-string\">\'MONGO_DATABASE\') ) <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">open_spider<span class=\"hljs-params\">(self, spider): self.client = pymongo.MongoClient(self.mongo_uri) self.db = self.client[self.mongo_db] <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">close_spider<span class=\"hljs-params\">(self, spider): self.client.close() <span class=\"hljs-function\"><span class=\"hljs-keyword\">def <span class=\"hljs-title\">process_item<span class=\"hljs-params\">(self, item, spider): self.db[self.collection_name].update({<span class=\"hljs-string\">\'url_token\': item[<span class=\"hljs-string\">\'url_token\']}, {<span class=\"hljs-string\">\'$set\': dict(item)}, <span class=\"hljs-keyword\">True) <span class=\"hljs-keyword\">return item </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> \n<p>比较重要的一点就在于<code>process_item</code>，在这里使用了 update 方法，第一个参数传入查询条件，这里使用的是<code>url_token</code>，第二个参数传入字典类型的对象，就是我们的 item，第三个参数传入True，这样就可以保证，如果查询数据存在的话就更新，不存在的话就插入。这样就可以保证去重了。</p> \n<p>另外记得开启一下Item Pileline</p> \n<pre><code>ITEM_PIPELINES = {\n    <span class=\"hljs-string\">\'zhihuuser.pipelines.MongoPipeline\': 300, } </span></code></pre> \n<p>然后重新运行爬虫</p> \n<pre><code><span class=\"hljs-attribute\">scrapy crawl zhihu </span></code></pre> \n<p>这样就可以发现正常的输出了，会一直不停地运行，用户也一个个被保存到数据库。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/911b7bd5-2df9-413d-ae00-1243c7d51fdb.jpeg\" alt=\"\"></p> \n<p>看下MongoDB，里面我们爬取的用户详情结果。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/7ef4bb4e-f164-4ce5-81f5-d5737e3320ea.jpeg\" alt=\"\"></p> \n<p>到现在为止，整个爬虫就基本完结了，我们主要通过递归的方式实现了这个逻辑。存储结果也通过适当的方法实现了去重。</p> \n<h2 id=\"-\">更高效率</h2> \n<p>当然我们现在运行的是单机爬虫，只在一台电脑上运行速度是有限的，所以后面我们要想提高抓取效率，需要用到分布式爬虫，在这里需要用到 Redis 来维护一个公共的爬取队列。</p> \n<p>更多的分布式爬虫的实现可以查看<a href=\"https://edu.hellobi.com/course/157\" target=\"_blank\">自己动手，丰衣足食！Python3网络爬虫实战案例</a></p> \n<h3><strong>相关推荐</strong></h3> \n<p><a href=\"https://www.qcloud.com/community/article/337567001488804157?fromSource=gwzcw.93781.93781.93781\" target=\"_blank\">Python操作Redis - 云爬虫初探</a><br><a href=\"https://www.qcloud.com/community/article/393853001489602947?fromSource=gwzcw.93782.93782.93782\" target=\"_blank\">腾讯云主机Python3环境安装PySpider爬虫框架过程</a><br><a href=\"https://www.qcloud.com/community/article/928598001491399938?fromSource=gwzcw.93783.93783.93783\" target=\"_blank\">腾讯云上PhantomJS用法示例</a></p> \n<hr> \n<p>&nbsp;</p> \n<p>此文已由作者授权腾讯云技术社区发布，转载请注明<a href=\"https://www.qcloud.com/community/article/196666?fromSource=gwzcw.93785.93785.93785\" target=\"_blank\">文章出处</a><br>原文链接：<a href=\"https://www.qcloud.com/community/article/196666\" target=\"_blank\">https://www.qcloud.com/community/article/196666</a><br>获取更多腾讯海量技术实践干货，欢迎大家前往<a href=\"https://www.qcloud.com/community?fromSource=gwzcw.93784.93784.93784\" target=\"_blank\">腾讯云技术社区</a></p>',NULL,'2017-04-24 16:01:39',0,0,NULL,'http://www.cnblogs.com/qcloud1001/p/6744070.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (52,'Web性能优化工具WebPageTest（三）——本地部署（Windows 7版本）','<p>这次先能够使用PC端的浏览器测试，首先需要下载官方的发布版本“<a href=\"https://github.com/WPO-Foundation/webpagetest/releases/tag/WebPageTest-3.0\" target=\"_blank\"><span style=\"color: #3366ff\"><span style=\"color: #3366ff\">WebPageTest 3.0</span></span></a>”。</p> \n<p><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/b69cea8a-e87e-43f2-bfbb-ddc0635ee647.png\" alt=\"\" width=\"300\"></p> \n<p>1. <strong>agent</strong>：浏览器代理软件</p> \n<p>2. <strong>mobile</strong>：移动端参数相关代码</p> \n<p>3. <strong>www</strong>：网站PHP代码</p> \n<p>也可以参考官方的<span style=\"color: #3366ff\"><a href=\"https://sites.google.com/a/webpagetest.org/docs/private-instances\" target=\"_blank\"><span style=\"color: #3366ff\">Private Instance</span></a></span>配置，不过文档挂在google域名下，所以你懂得。我做了简单的翻译《<span style=\"color: #3366ff\"><a href=\"https://github.com/pwstrick/WebPagetest-Docs/blob/master/Private-Instances/private-instances.md\" target=\"_blank\"><span style=\"color: #3366ff\">私有实例</span></a></span>》</p> \n<p>官方文档写的非常拗口，但是还是有一定的参考价值。</p> \n<p>&nbsp;</p> \n<h1>一、PHP配置与软件安装</h1> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">1）配置虚拟目录</span></strong></span></p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/e4dd7071-0247-46a6-b908-808dad50263e.png\" alt=\"\" width=\"345\"></p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/672b82e9-85c1-44d4-9018-ae98269c30ba.png\" alt=\"\" width=\"400\"></p> \n<p style=\"margin-left: 30px\">输入虚拟地址后，出现了熟悉的页面，不过现在Location和Browser的两个选项还没有，需要额外配置。</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/be2d3ca1-aa00-4d5a-9cf5-878ff27410ea.png\" alt=\"\" width=\"600\"></p> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">2）安装信息</span></strong></span></p> \n<p style=\"margin-left: 30px\">在浏览器中输入“<strong>mine.webpagetest.net/install/</strong>”查看还未安装的信息：</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/f25a1e00-9ff6-4386-aade-592a09848697.png\" alt=\"\" width=\"600\"></p> \n<p style=\"margin-left: 30px\">如果有疑惑还可以直接查看“<strong>install/index.php</strong>”的源码。</p> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">3）PHP修改</span></strong></span></p> \n<p>1. <strong>memory_limit</strong></p> \n<p style=\"margin-left: 30px\">修改“php.ini”文件中的“memory_limit”</p> \n<p>2. <strong>安装<span style=\"color: #3366ff\"><a href=\"http://pecl.php.net/package/APCu\" target=\"_blank\"><span style=\"color: #3366ff\">APC</span></a></span>（the Alternative PHP Cache）</strong></p> \n<p style=\"margin-left: 30px\">可选PHP缓存。将下载到的dll文件放到“<strong>PHP/ext</strong>”文件夹内。并在“php.ini”中添加扩展。</p> \n<div class=\"cnblogs_code\"> \n <pre>extension=php_apcu.dll</pre> \n</div> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/ba95c86d-9b8d-4e6a-9938-0b527ba7bb01.png\" alt=\"\" width=\"600\"></p> \n<p>3. <strong>安装<span style=\"color: #3366ff\"><a href=\"http://www.sqlite.org/download.html\" target=\"_blank\"><span style=\"color: #3366ff\">SQLite</span></a></span>（一款轻型的数据库）</strong></p> \n<p style=\"margin-left: 30px\">先到下载页面，将两个压缩包中的内容放到一个文件夹中，例如“<strong>C:\\sqlite</strong>”内：</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/064957dc-37e1-4fc0-a889-86447b9a5459.png\" alt=\"\" width=\"400\"></p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/ccc18e94-1b0f-43a5-827f-f86b6044687c.png\" alt=\"\" width=\"150\"></p> \n<p style=\"margin-left: 30px\">接着在环境变量中设置“<strong>Path</strong>”。</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/e9851eba-bcc7-449a-9095-6fad3b06a0c5.png\" alt=\"\" width=\"300\"></p> \n<p style=\"margin-left: 30px\">在“php.ini”中添加“<strong>php_sqlite3.dll</strong>”扩展。“<strong>ext</strong>”文件夹内默认有这个扩展，只是没有打开。</p> \n<div class=\"cnblogs_code\"> \n <pre>extension=php_sqlite3.dll</pre> \n</div> \n<p>&nbsp;</p> \n<h1>二、系统工具安装</h1> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">1）ffmpeg</span></strong></span></p> \n<p style=\"margin-left: 30px\">安装<span style=\"color: #3366ff\"><a href=\"http://ffmpeg.org/\" target=\"_blank\"><span style=\"color: #3366ff\">ffmpeg</span></a></span><span style=\"color: #000000; font-family: &quot;Microsoft YaHei&quot;; font-size: 14px\">（用于提取视频缩略图），这是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。</span></p> \n<p style=\"margin-left: 30px\"><span style=\"color: #000000; font-family: &quot;Microsoft YaHei&quot;; font-size: 14px\">功能包括视频采集功能、视频格式转换、视频抓图、给视频加水印等。windows版本的下载地址<span style=\"color: #3366ff\"><a href=\"https://ffmpeg.zeranoe.com/builds/\" target=\"_blank\"><span style=\"color: #3366ff\">点击这里</span></a></span>。</span></p> \n<p style=\"margin-left: 30px\"><span style=\"color: #000000; font-family: &quot;Microsoft YaHei&quot;; font-size: 14px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/80fc86be-c2e8-48af-86c4-93b5a0d1f85d.png\" alt=\"\" width=\"200\"></span></p> \n<p style=\"margin-left: 30px\">下载下来有这么几个文件夹，然后放到C盘内，再将放的位置在环境变量“<strong>Path</strong>”中设置一下。</p> \n<p style=\"margin-left: 30px\">刷新Install中的页面，仍旧不是绿色的勾，在Apache的错误日志中提示：\'ffmpeg\' 不是内部或外部命令，也不是可运行的程序或批处理文件。</p> \n<p style=\"margin-left: 30px\">于是我给“<strong>ffmpeg.exe</strong>”加很多用户组，但是还是不行，后面<span style=\"color: #ff0000\"><strong>重启了一下系统</strong></span>，显示可以使用了。</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/731015a6-148d-4db7-8b41-1dab41e6950d.png\" alt=\"\" width=\"600\"></p> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">2）imagemagick</span></strong></span></p> \n<p style=\"margin-left: 30px\">安装<span style=\"color: #3366ff\"><a href=\"https://www.imagemagick.org/script/binary-releases.php#windows\" target=\"_blank\"><span style=\"color: #3366ff\">imagemagick</span></a></span>，一个免费的创建、编辑、合成图片的软件。</p> \n<p style=\"margin-left: 30px\">它可以读取、转换、写入多种格式的图片。</p> \n<p style=\"margin-left: 30px\">图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转。</p> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">3）jpegtran</span></strong></span></p> \n<p style=\"margin-left: 30px\">安装<span style=\"color: #3366ff\"><a href=\"http://jpegclub.org/jpegtran/\" target=\"_blank\"><span style=\"color: #3366ff\">jpegtran</span></a></span>，这是一种JPEG图片压缩工具。将下载到的exe文件放到某个位置，再添加环境变量的“Path”路径中。</p> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">4）exiftool</span></strong></span></p> \n<p style=\"margin-left: 30px\">安装<span style=\"color: #3366ff\"><a href=\"http://www.sno.phy.queensu.ca/~phil/exiftool/\" target=\"_blank\"><span style=\"color: #3366ff\">exiftool</span></a></span>，这是一款跨平台的图片查看，制作和编辑的应用程序。与jpegtran一样，设置“Path”路径。</p> \n<p>&nbsp;</p> \n<h1>三、安装Python2.7</h1> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">1）安装Python2.7</span></strong></span></p> \n<p style=\"margin-left: 30px\">安装<span style=\"color: #3366ff\"><a href=\"https://www.python.org/downloads/\" target=\"_blank\"><span style=\"color: #3366ff\">Python2.7</span></a></span>，一个msi文件，直接双击即可，不过还是要配一下“<strong>Path</strong>”路径，每次配都要重启一下。</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/bcd406a0-e88f-4fce-9fd6-feb0ddcd78f7.png\" alt=\"\" width=\"600\"></p> \n<p style=\"margin-left: 30px\">需要安装python的两个模块，<strong>Pillow</strong>和<strong>SSIM</strong>。</p> \n<p style=\"margin-left: 30px\">首先将“<strong>C:\\Python27\\Scripts</strong>”放到环境变量中，这样就能使用“pip”命令了。</p> \n<p><span style=\"color: #ff99cc; font-size: 16px\"><strong>2）pillow</strong></span></p> \n<p style=\"margin-left: 30px\">从<span style=\"color: #3366ff\"><a href=\"https://github.com/WPO-Foundation/visualmetrics\" target=\"_blank\"><span style=\"color: #3366ff\">visualmetrics</span></a></span>中查看到，SSIM要安装的名字是“pyssim”。</p> \n<div class=\"cnblogs_code\"> \n <pre>pip <span style=\"color: #0000ff\">install</span> pillow</pre> \n</div> \n<p><span style=\"font-size: 16px\"><strong><span style=\"color: #ff99cc; font-family: &quot;Microsoft YaHei&quot;\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\">3）<span style=\"font-family: &quot;Microsoft YaHei&quot;\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\"><span style=\"font-family: &quot;Microsoft YaHei&quot;\">pyssim</span></span></span></span></span></span></span></span></strong></span></p> \n<p style=\"margin-left: 30px\"><span style=\"color: #000000; font-family: &quot;Microsoft YaHei&quot;; font-size: 14px\"><span style=\"color: #000000; font-family: &quot;Microsoft YaHei&quot;; font-size: 14px\"><span style=\"color: #000000; font-family: &quot;Microsoft YaHei&quot;; font-size: 14px\"><span style=\"color: #000000; font-family: &quot;Microsoft YaHei&quot;; font-size: 14px\">不过在安装pyssim的时候出现了不和谐的错误。</span></span></span></span></p> \n<div class=\"cnblogs_code\"> \n <pre>pip <span style=\"color: #0000ff\">install</span> pyssim</pre> \n</div> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/2b9f2f46-fdfe-4574-9229-aaf94bade71b.png\" alt=\"\" width=\"600\"></p> \n<p style=\"margin-left: 30px\">先安装“<span style=\"color: #3366ff\"><a href=\"https://www.microsoft.com/en-in/download/details.aspx?id=44266\" target=\"_blank\"><span style=\"color: #3366ff\">Microsoft Visual C++ Compiler for Python 2.7</span></a></span>”。</p> \n<p style=\"margin-left: 30px\">根据<span style=\"color: #3366ff\"><a href=\"http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c\" target=\"_blank\"><span style=\"color: #3366ff\">stackoverflow</span></a></span>的一篇文章的解答，修改了一下。但在安装scipy的时候，又出现了新的问题。</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/d223cd5e-23ea-45da-a2d6-0651ef607d99.png\" alt=\"\" width=\"600\"></p> \n<p style=\"margin-left: 30px\">在网上搜索找到了解决方案。在“<span style=\"color: #3366ff\"><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs\" target=\"_blank\"><span style=\"color: #3366ff\">Unofficial Windows Binaries for Python Extension Packages</span></a></span>”中找到对应的“whl”文件。</p> \n<p style=\"margin-left: 30px\">分别下载“<span style=\"color: #3366ff\"><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy\" target=\"_blank\"><span style=\"color: #3366ff\">numpy</span></a></span>”，“<span style=\"color: #3366ff\"><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=15336\" target=\"_blank\"><span style=\"color: #3366ff\">Microsoft Visual C++ 2008 X64</span></a></span>”和“<span style=\"color: #3366ff\"><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy\" target=\"_blank\"><span style=\"color: #3366ff\">scipy</span></a></span>”，将这两个“whl”文件放到某个目录中，“cmd”到这个目录中，执行install命令。</p> \n<div class=\"cnblogs_code\"> \n <pre>pip <span style=\"color: #0000ff\">install</span> numpy-<span style=\"color: #800080\">1.12</span>.<span style=\"color: #800080\">1</span>+mkl-cp27-cp27m-<span style=\"color: #000000\">win32.whl\npip </span><span style=\"color: #0000ff\">install</span> scipy-<span style=\"color: #800080\">0.19</span>.<span style=\"color: #800080\">0</span>-cp27-cp27m-win32.whl</pre> \n</div> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/89ada531-048f-453c-9720-482f7ce03110.png\" alt=\"\" width=\"300\"></p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/c21764df-a052-43c3-b3a1-2e2d3e25a610.png\" alt=\"\" width=\"600\"></p> \n<p style=\"margin-left: 30px\">至此，所有需要安装的软件和需要配置的地方都已完毕。</p> \n<p>&nbsp;</p> \n<h1>四、桌面测试代理</h1> \n<p>代理的相关软件和文件都在agent文件夹内，将此文件夹中的内容单独拿出来，例如“<strong>C:\\wpt-agent</strong>”内。</p> \n<p><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/c2f1290b-f364-45db-95ce-6c158f87e297.png\" alt=\"\" width=\"200\"></p> \n<p><span style=\"color: #ff99cc\"><strong><span style=\"font-size: 16px\">1）DummyNet</span></strong></span></p> \n<p style=\"margin-left: 30px\">安装DummyNet，DummyNet用于展示测试过程中的网络活动情况，在DummyNet文件夹内有32位和64位操作系统的安装包。</p> \n<div class=\"cnblogs_code\"> \n <pre>打开控制面板 ==》 网络和共享中心 ==》 更改适配器设置 ==》 右键本地连接 ==》 属性</pre> \n</div> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/1bd92870-4a94-4bb5-a9cf-cbbe9dc43421.png\" alt=\"\" width=\"600\"></p> \n<div class=\"cnblogs_code\"> \n <pre>Microsoft网络客户端==》安装==》服务==》添加==》从磁盘安装==》选择“C:\\wpt-agent\\dummynet\\64bit” ==》 确定安装</pre> \n</div> \n<p><span style=\"font-size: 16px; color: #ff99cc\"><strong>2）locations.ini</strong></span></p> \n<p style=\"margin-left: 30px\">配置地理位置locations.ini。</p> \n<p style=\"margin-left: 30px\">在“<strong>www/settings</strong>”中有个“<strong>locations.ini.sample</strong>”文件，这里面是示例，将后缀“sample”去除。</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">locations</span><span style=\"color: #800000; font-weight: bold\">]</span>\n1=<span style=\"color: #000000\">Test_loc\n</span><span style=\"color: #008000\">;</span><span style=\"color: #008000\"> 这些是Test Location下拉列表中列出的顶级位置</span><span style=\"color: #008000\">\n;</span><span style=\"color: #008000\"> 每一个都指向一个或多个浏览器配置</span>\n<span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">Test_loc</span><span style=\"color: #800000; font-weight: bold\">]</span>\n1=<span style=\"color: #000000\">IE\n</span>2=<span style=\"color: #000000\">Test\nlabel</span>=<span style=\"color: #000000\">Test Location\ngroup</span>=<span style=\"color: #000000\">Desktop\n\n</span><span style=\"color: #008000\">;</span><span style=\"color: #008000\"> browser就是测试代理wptdriver.ini中配置的浏览器</span>\n<span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">IE</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nbrowser</span>=<span style=\"color: #000000\">IE9\nconnectivity</span>=<span style=\"color: #000000\">LAN\nlabel</span>=\"Test Location - IE9\"\n\n<span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">Test</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nbrowser</span>=Chrome,<span style=\"color: #000000\">Firefox\nconnectivity</span>=<span style=\"color: #000000\">LAN\nlabel</span>=\"Test Location\"</pre> \n</div> \n<p><span style=\"font-size: 16px\"><strong><span style=\"color: #ff99cc\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/ba02cb66-aaf8-4f60-95bd-671b56c7c4b3.png\" alt=\"\" width=\"600\"></span></strong></span></p> \n<p><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/781cc924-2b89-4354-9543-ece55f549cc8.png\" alt=\"\" width=\"600\"></p> \n<p><span style=\"font-size: 16px\"><strong><span style=\"color: #ff99cc\">3）wptdriver.ini</span></strong></span></p> \n<p>配置wptdriver.ini文件，包括浏览器执行目录等信息。</p> \n<p>在原先的“<strong>agent</strong>”文件夹中有个“<strong>wptdriver.ini.sample</strong>”文件，同样去掉后缀。</p> \n<p><strong><span style=\"color: #008000\">1. 提示下载</span></strong></p> \n<p style=\"margin-left: 30px\">修改浏览器的路径，注释installer。点击aptdriver.exe，提示我下载flash</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/013e9821-ab32-43f4-923d-bf3c7e7e8051.png\" alt=\"\" width=\"400\"></p> \n<p style=\"margin-left: 30px\">注释掉“spftware”就不会出现这个错误提示了。</p> \n<p><strong><span style=\"color: #008000\">2. 浏览器闪退</span></strong></p> \n<p style=\"margin-left: 30px\">输入URL点击“START TEST”后跳出了这个提示，并且浏览器会闪退。</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/d4696ef9-4b9e-4ed4-954e-be6209d45d01.png\" alt=\"\" width=\"400\"></p> \n<p style=\"margin-left: 30px\">后面在“<strong>wptdriver.ini</strong>”中加了debug参数后就不会闪退了，但那提示还在。</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">WebPagetest</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\ndebug</span>=1</pre> \n</div> \n<p style=\"margin-left: 30px\">一切就绪后，wptdriver窗口内显示：</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/52f247df-b791-47b5-a5d4-948f3361c9e3.png\" alt=\"\" width=\"400\"></p> \n<p><strong><span style=\"color: #008000\">3. 代理连接</span></strong></p> \n<p style=\"margin-left: 30px\">接下来查看“install”页面，发现两个都没连接上。</p> \n<p style=\"margin-left: 30px\">将“wptdriver.ini”中的location改成“IE,Test”即可，有个类似的说明可以参考《<span style=\"color: #3366ff\"><a href=\"https://github.com/pwstrick/WebPagetest-Docs/blob/master/Private-Instances/private-instances.md#51-%E9%85%8D%E7%BD%AE\" target=\"_blank\"><span style=\"color: #3366ff\">WebPagetest参数</span></a></span>》，不过参数名字不同。</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">WebPagetest</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nlocation</span>=IE,Test</pre> \n</div> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/f4e1249a-c34e-4c64-835a-e21df16d21c5.png\" alt=\"\" width=\"600\"></p> \n<p><span style=\"color: #008000\"><strong>4. 空数据</strong></span></p> \n<p style=\"margin-left: 30px\">再次点击开始测试，进入到结果页面，出现下面的空数据。</p> \n<p style=\"margin-left: 30px\"><img style=\"display: block; margin-top: 0\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/3d6061d3-9a42-4730-88a3-74879bba9ee9.png\" alt=\"\" width=\"600\"></p> \n<p style=\"margin-left: 30px\">在官方论坛中也看到了<span style=\"color: #3366ff\"><a href=\"https://www.webpagetest.org/forums/showthread.php?tid=456\" target=\"_blank\"><span style=\"color: #3366ff\">这么一个问题</span></a></span>，已被作者解答，只需要在“<strong>settings/locations.ini</strong>”文件中新增连接属性即可</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">Test</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nbrowser</span>=Chrome,<span style=\"color: #000000\">Firefox\nconnectivity</span>=<span style=\"color: #000000\">LAN\nlabel</span>=\"Test Location\"</pre> \n</div> \n<p style=\"margin-left: 30px\">完整的“wptdriver.ini”文件如下：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">WebPagetest</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nurl</span>=<span style=\"color: #000000\">http://mine2.webpagetest.net/\nlocation</span>=<span style=\"color: #000000\">IE,Test\n</span><span style=\"color: #008000\">;</span><span style=\"color: #008000\">browser=chrome</span>\nTime Limit=120\n<span style=\"color: #008000\">;</span><span style=\"color: #008000\">防止浏览器闪退</span>\ndebug=1\n<span style=\"color: #008000\">;</span><span style=\"color: #008000\">key=TestKey123</span><span style=\"color: #008000\">\n;</span><span style=\"color: #008000\">Automatically install and update support software (Flash, Silverlight, etc)</span><span style=\"color: #008000\">\n;</span><span style=\"color: #008000\">software=http://mine.webpagetest.net/installers/software.dat</span>\n\n<span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">Chrome</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nexe</span>=\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\"<span style=\"color: #000000\">\noptions</span>=\'--load-extension=\"%WPTDIR%\\extension\" --user-data-dir=\"%PROFILE%\"<span style=\"color: #000000\"> --no-proxy-server\'\n</span><span style=\"color: #008000\">;</span><span style=\"color: #008000\">installer=http://mine.webpagetest.net/installers/browsers/chrome.dat</span>\n\n<span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">Firefox</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nexe</span>=\"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\"<span style=\"color: #000000\">\noptions</span>=\'-profile \"%PROFILE%\"<span style=\"color: #000000\"> -no-remote\'\n</span><span style=\"color: #008000\">;</span><span style=\"color: #008000\">installer=http://mine.webpagetest.net/installers/browsers/firefox.dat</span>\ntemplate=<span style=\"color: #000000\">firefox\n\n</span><span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">Safari</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nexe</span>=\"C:\\Program Files (x86)\\Safari\\Safari.exe\"\n\n<span style=\"color: #800000; font-weight: bold\">[</span><span style=\"color: #800000\">IE9</span><span style=\"color: #800000; font-weight: bold\">]</span><span style=\"color: #000000\">\nexe</span>=\"C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe\"</pre> \n</div> \n<p><span style=\"color: #ff99cc; font-size: 16px\"><strong>4）START TEST</strong></span></p> \n<p style=\"margin-left: 30px\">再次点击测试，将会获得熟悉的页面。</p> \n<p><img style=\"display: block; margin-top: 0; border: 1px solid #CCC\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/c4960ce7-bf29-472a-8ba6-61248f57c310.png\" alt=\"\" width=\"600\"></p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p><span style=\"color: #ff0000\">相关软件下载：</span></p> \n<p><a href=\"http://download.csdn.net/download/loneleaf1/9808719\" target=\"_blank\">http://download.csdn.net/download/loneleaf1/9808719</a></p> \n<p>&nbsp;</p> \n<p>参考资料：</p> \n<p><a href=\"http://www.cnblogs.com/oukunqing/p/5789985.html\" target=\"_blank\">Windows7如何安装Sqlite3</a></p> \n<p><a href=\"http://www.cnblogs.com/tyoyi/p/5587144.html\" target=\"_blank\">Windows下用PIP安装scipy出现no lapack/blas resources found</a></p> \n<p><a href=\"http://www.cnblogs.com/meitian/p/5954810.html\" target=\"_blank\">mac下webpagetest搭建</a></p> \n<p><a href=\"http://blog.csdn.net/yehuijun/article/details/6903358\" target=\"_blank\">部署安装WebPageTest 2.4私有实例</a></p> \n<p>&nbsp;</p>',NULL,'2017-04-24 16:02:13',0,0,NULL,'http://www.cnblogs.com/strick/p/6634637.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (53,'【Java基础】Java类的加载和对象创建流程的详细分析','<p><span style=\"font-family: \'courier new\', courier; background-color: #ffffff;\"><span style=\"font-size: 15px;\">相信我们在面试Java的时候总会有一些公司要做笔试题目的，而Java类的加载和对象创建流程的知识点也是常见的题目之一。接下来通过实例详细的分析一下。</span></span></p> \n<h2>实例问题</h2> \n<p>实例代码</p> \n<h3>Parent类</h3> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">package mytest.javaBase;\r\n\r\npublic class Parent {\r\n	int a = 10;\r\n	static int b = 11;\r\n	// 静态代码块\r\n	static {\r\n		System.out.println(\"Parent静态代码块：b=\" + b);\r\n		b++;\r\n	}\r\n	// 代码块\r\n	{\r\n		System.out.println(\"Parent代码块： a=\" + a);\r\n		System.out.println(\"Parent代码块： b=\" + b);\r\n		b++;\r\n		a++;\r\n	}\r\n\r\n	// 无参构造函数\r\n	Parent() {\r\n		System.out.println(\"Parent无参构造函数： a=\" + a);\r\n		System.out.println(\"Parent无参构造函数： b=\" + b);\r\n	}\r\n\r\n	// 有参构造函数\r\n	Parent(int a) {\r\n		System.out.println(\"Parent有参构造函数： a=\" + a);\r\n		System.out.println(\"Parent有参构造函数： b=\" + b);\r\n	}\r\n\r\n	// 方法\r\n	void function() {\r\n		System.out.println(\"Parent function run ……\");\r\n	}\r\n\r\n}</pre> \n</div> \n<h3>Child类</h3> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">package mytest.javaBase;\r\n\r\npublic class Child extends Parent {\r\n	int x = 10;\r\n	static int y = 11;\r\n	// 静态代码块\r\n	static {\r\n		System.out.println(\"Child静态代码块：y=\" + y);\r\n		y++;\r\n	}\r\n	// 代码块\r\n	{\r\n		System.out.println(\"Child代码块： x=\" + x);\r\n		System.out.println(\"Child代码块： y=\" + y);\r\n		y++;\r\n		x++;\r\n	}\r\n\r\n	// 构造函数\r\n	Child() {\r\n		System.out.println(\"Child构造函数： x=\" + x);\r\n		System.out.println(\"Child构造函数： y=\" + y);\r\n	}\r\n\r\n	// 方法\r\n	void function() {\r\n		System.out.println(\"Child function run ……\");\r\n	}\r\n\r\n}</pre> \n</div> \n<h3>Test测试类</h3> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">package mytest.javaBase;\r\n\r\npublic class Test {\r\n	public static void main(String[] args) {\r\n		Child demo = new Child();\r\n		demo.function();\r\n		System.out.println(\"…………………………………………………………………………………………………………………………\");\r\n		Child child = new Child();\r\n		child.function();\r\n	}\r\n}</pre> \n</div> \n<p>我们可以先不看运行结果，自己思考下，运行结果会是什么，之后再比较下和自己思考的结果是否一样。</p> \n<h3>运行结果</h3> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\"><span style=\"font-size: 15px;\">Parent静态代码块：b=11\r\nChild静态代码块：y=11\r\nParent代码块： a=10\r\nParent代码块： b=12\r\nParent无参构造函数： a=11\r\nParent无参构造函数： b=13\r\nChild代码块： x=10\r\nChild代码块： y=12\r\nChild构造函数： x=11\r\nChild构造函数： y=13\r\nChild function run ……\r\n…………………………………………………………………………………………………………………………\r\nParent代码块： a=10\r\nParent代码块： b=13\r\nParent无参构造函数： a=11\r\nParent无参构造函数： b=14\r\nChild代码块： x=10\r\nChild代码块： y=13\r\nChild构造函数： x=11\r\nChild构造函数： y=14\r\nChild function run ……</span>　</pre> \n</div> \n<h3>结果详细分析&nbsp;</h3> \n<p>我们运行Test类的main方法</p> \n<p><strong>1、</strong> &nbsp;启动JVM，开始分配内存空间；&nbsp;</p> \n<p><strong>2、</strong> &nbsp;开始加载Test.class文件，加载到方法区中，在加载的过程中静态的内容要进入静态区中；</p> \n<p><strong>3、</strong> &nbsp;<span class=\"Apple-tab-span\">在开始运行main方法，这时JVM就会把main调用到栈中运行，开始从方法的第一行往下运行；</span></p> \n<p><span class=\"Apple-tab-span\"><strong>4、</strong> &nbsp;在main方法中new Child()；这时JVM就会在方法区中查找有没有Child文件</span>，<span class=\"Apple-tab-span\">如果没有就加载Child.class文件</span>，并且Child继承Parent类，所以也要查找有没有Parent类，如果没有也要加载Parent.class文件<span class=\"Apple-tab-span\">。</span></p> \n<p><strong>5、</strong> &nbsp;Child.class和Parent.class中的所有的非静态内容会加载到非静态的区域中，而静态的内容会加载到静态区中<span style=\"color: #000000;\">。<span style=\"color: #ff00ff;\">在加载静态的过程中，先要加载静态的成员变量，然后再加载静态代码块，之后再加载静态的成员方法。</span></span></p> \n<p><span style=\"color: #ff0000;\">说明：类的加载只会执行一次。下次再创建对象时，可以直接在方法区中获取class信息。</span></p> \n<p><strong>6、</strong> &nbsp;开始给静态区中的所有静态的成员变量开始默认初始化。默认初始化完成之后，开始给所有的静态成员变量显示初始化。</p> \n<p><strong>7、</strong> &nbsp;所有静态成员变量显示初始化完成之后，开始执行静态的代码块。先执行父类的静态代码块，再执行子类的静态代码块。</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">//这时输出\r\nParent静态代码块：b=11\r\nChild静态代码块：y=11</pre> \n</div> \n<p><span style=\"color: #ff0000;\">说明：&gt;&gt;静态代码块是在类加载的时候执行的，类的加载只会执行一次所以静态代码块也只会执行一次；</span></p> \n<p><span style=\"color: #ff0000;\">&nbsp; &nbsp; &nbsp;&gt;&gt;非静态代码块和构造函数中的代码是在对象创建的时候执行的，因此对象创建(new)一次，它们就会执行一次。</span></p> \n<p><strong>8、</strong> &nbsp;这时Parent.class文件 和 Child.class文件加载完成。</p> \n<p><strong>9、</strong> &nbsp;开始在堆中创建Child对象。给Child对象分配内存空间，其实就是分配内存地址。</p> \n<p><strong>10、</strong>开始对类中的的非静态的成员变量开始默认初始化。</p> \n<p><strong>11、</strong>开始加载对应的构造方法，执行<strong>隐式三步</strong></p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #000000; font-size: 15px;\">①有个隐式的super(); \r\n\r\n②显示初始化(给所有的非静态的成员变量)\r\n\r\n③执行构造代码块\r\n\r\n之后才开始执行本类的构造方法中的代码</span></pre> \n</div> \n<p><span style=\"color: #000000;\">super()是调用父类的构造函数，此处即为Parent的构造函数，在Parent的构造函数中也有个隐式三步：首先super()，再执行Parent的显示初始化，然后执行Parent的非静态构造代码块，最后执行Parent的构造函数中的代码。</span></p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">//这时输出\r\nParent代码块： a=10\r\nParent代码块： b=12\r\nParent无参构造函数： a=11\r\nParent无参构造函数： b=13　</pre> \n</div> \n<p><span style=\"color: #ff0000;\">说明：虽然Parent没有明写extends，但是我们知道在Java中有个超类Object，它是所有类的父类，因此此处Parent类的super()是调用Object的构造函数</span></p> \n<p><span style=\"color: #000000;\">Parent的执行完之后，回来继续执行Child自己的隐式三步中的第二步：显示初始化，然后执行Child的非静态代码块的，最后执行Child的构造函数中的代码</span></p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">//这时输出\r\nChild代码块： x=10\r\nChild代码块： y=12\r\nChild构造函数： x=11\r\nChild构造函数： y=13</pre> \n</div> \n<p><strong>12、</strong>对象创建完成，把内存的地址赋值给demo使用。</p> \n<p><strong>13、</strong>执行demo.function()方法。</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">//这时输出\r\nChild function run ……\r\n</pre> \n</div> \n<p><strong>14、</strong>由于后面又创建(new)了一个新的Child对象，因此重复一下【9】之后的步骤，很容易明白它的输出结果为</p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">Parent代码块： a=10\r\nParent代码块： b=13\r\nParent无参构造函数： a=11\r\nParent无参构造函数： b=14\r\nChild代码块： x=10\r\nChild代码块： y=13\r\nChild构造函数： x=11\r\nChild构造函数： y=14\r\nChild function run ……</pre> \n</div> \n<p>&nbsp;简单的画个内存运行示例图</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/ce2cb540-13e7-4fb9-b008-98e6932406ad.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<h2>总结</h2> \n<p>我们知道，我们在创建(new)一个对象的时候，先要去JVM的方法区里获取该对象所对应的类的信息，如果方法区里没有该类的信息，则需要去将它加载进来，加载进来之后，有了该类的信息，我们才能创建一个对象。</p> \n<p>一般，Java类被编译后，会生成一个class文件，在运行的时候会将class文件加载到Java虚拟机JVM中，class文件由类装载器装载，在JVM中（准确的来说应该是在JVM的方法区里）将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等。</p> \n<h3>一、类的加载过程</h3> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\">首先，Jvm在执行时，遇到一个新的类时，会到内存中的方法区去找class的信息，如果找到就直接拿来用，如果没有找到，就会去将类文件加载到方法区。</span><span style=\"font-family: \'courier new\', courier; font-size: 15px;\">在类加载时，静态成员变量加载到方法区的静态区域，非静态成员变量加载到方法区的非静态区域。</span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>静态代码块是在类加载时自动执行的代码，非静态代码块是在创建对象时自动执行的代码，不创建对象不执行该类的非静态代码块。</strong> </span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><span style=\"color: #ff0000;\">顺序： 静态代码块--》非静态代码块--》类构造方法</span>。</span></p> \n<p><strong><span style=\"font-family: \'courier new\', courier;\">加载过程：</span></strong></p> \n<p><span style=\"font-family: \'courier new\', courier;\"><strong>1、</strong><span style=\"font-size: 15px;\">JVM会先去方法区中找有没有相应类的.class存在。如果有，就直接使用；如果没有，则把相关类的.clss加载到方法区。</span></span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>2、</strong>在.class加载到方法区时，先加载父类再加载子类；先加载静态内容，再加载非静态内容</span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>3、</strong>加载静态内容： </span></p> \n<ul> \n <li><span style=\"font-family: \'courier new\', courier; font-size: 15px;\">把.class中的所有静态内容加载到方法区下的静态区域内</span></li> \n <li><span style=\"font-family: \'courier new\', courier; font-size: 15px;\">静态内容加载完成之后，对所有的静态变量进行默认初始化 </span></li> \n <li><span style=\"font-family: \'courier new\', courier; font-size: 15px;\">所有的静态变量默认初始化完成之后，再进行显式初始化 </span></li> \n <li><span style=\"font-family: \'courier new\', courier; font-size: 15px;\">当静态区域下的所有静态变量显式初始化完后，执行静态代码块 </span></li> \n</ul> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>4、</strong>加载非静态内容：把.class中的所有非静态变量及非静态代码块加载到方法区下的非静态区域内。</span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>5、</strong>执行完之后，整个类的加载就完成了。</span></p> \n<p><span style=\"font-family: \'courier new\', courier; color: #ff0000; font-size: 15px;\">对于静态方法和非静态方法都是被动调用，即系统不会自动调用执行，所以用户没有调用时都不执行，主要区别在于静态方法可以直接用类名直接调用（实例化对象也可以），而非静态方法只能先实例化对象后才能调用。</span></p> \n<h3>二、对象的创建过程</h3> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>1、</strong>new一个对象时，在堆内存中开辟一块空间。</span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>2、</strong>给开辟的空间分配一个地址。</span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>3、</strong>把对象的所有非静态成员加载到所开辟的空间下。</span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>4、</strong>所有的非静态成员加载完成之后，对所有非静态成员变量进行默认初始化。</span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>5、</strong>所有非静态成员变量默认初始化完成之后，调用构造函数。</span></p> \n<p><span style=\"font-family: \'courier new\', courier; font-size: 15px;\"><strong>6、</strong>在构造函数入栈执行时，分为两部分：<span style=\"color: #ff0000;\">先执行构造函数中的隐式三步，再执行构造函数中书写的代码。</span></span></p> \n<table style=\"background-color: #b5b6b9; height: 149px; width: 507px;\" border=\"0\"> \n <tbody> \n  <tr> \n   <td> <pre><span style=\"font-size: 15px;\"><strong>隐式三步：</strong><br>\r\n   ①执行super()语句\r\n\r\n   ②显示初始化(</span>对开辟空间下的所有非静态成员变量进行<span style=\"font-size: 15px;\">) <br><br>   ③执行构造代码块</span></pre> </td> \n  </tr> \n </tbody> \n</table> \n<p><span style=\"font-size: 15px;\"><strong>7、</strong>在整个构造函数执行完并弹栈后，把空间分配的地址赋给引用对象。</span></p> \n<h3><span style=\"font-size: 15px;\">三、其他</span></h3> \n<h4><span style=\"font-family: \'courier new\', courier; color: #000000;\"><strong>super语句</strong>，可能出现以下三种情况:</span></h4> \n<p><span style=\"font-family: \'courier new\', courier; color: #000000;\"><span style=\"font-size: 15px;\"><strong>1）</strong>构造方法体的第一行是this语句，则不会执行隐式三步，而是调用this语句所对应的的构造方法，最终肯定会有第一行不是this语句的构造方法。</span>&nbsp;</span></p> \n<div class=\"cnblogs_Highlighter\"> \n <pre class=\"brush:java;gutter:true;\">package mytest.javaBase;\r\n\r\npublic class Student {\r\n\r\n	private String name;\r\n\r\n	private String age;\r\n\r\n	Student() {\r\n	};\r\n\r\n	Student(String name) {\r\n		this.name = name;\r\n\r\n	};\r\n\r\n	Student(String name, String age) {\r\n		// 不会执行隐式三步\r\n		this(name);\r\n		this.age = age;\r\n	};\r\n\r\n}</pre> \n</div> \n<p><span style=\"font-family: \'courier new\', courier; color: #000000; font-size: 15px;\"><strong>2）</strong>构造方法体的第一行是super语句，则调用相应的父类的构造方法，&nbsp;<br><strong>3）</strong>构造方法体的第一行既不是this语句也不是super语句，则隐式调用super()，即其父类的默认构造方法，这也是为什么一个父类通常要提供默认构造方法的原因；</span></p> \n<p>更多内容：<a href=\"http://www.cnblogs.com/study-everyday/\" target=\"_blank\">http://www.cnblogs.com/study-everyday/</a></p>',NULL,'2017-04-24 16:02:15',0,0,NULL,'http://www.cnblogs.com/study-everyday/p/6752715.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (54,'ABP入门系列（16）——通过webapi与系统进行交互','<p><strong><a href=\"http://www.jianshu.com/p/a6e9ace79345\">ABP入门系列目录——学习Abp框架之实操演练</a><br> <a href=\"https://github.com/yanshengjie/LearningMpaAbp\">源码路径：Github-LearningMpaAbp</a></strong></p> \n<hr> \n<h1 id=\"引言\">1. 引言</h1> \n<p>上一节我们讲解了<a href=\"http://www.jianshu.com/p/1e6efd9be629\">如何创建微信公众号模块</a>，这一节我们就继续跟进，来讲一讲公众号模块如何与系统进行交互。<br> 微信公众号模块作为一个独立的web模块部署，要想与现有的【任务清单】进行交互，我们要想明白以下几个问题：</p> \n<ol> \n <li>如何进行交互？<br> ABP模板项目中默认创建了webapi项目，其<strong>动态webapi技术</strong>允许我们直接访问appservice作为webapi而不用在webapi层编写额外的代码。所以，自然而然我们要通过webapi与系统进行交互。</li> \n <li>通过webapi与系统进行交互，如何确保安全？<br> 我们知道暴露的webapi如果不加以授权控制，就如同在大街上裸奔。所以在访问webapi时，我们需要通过身份认证来确保安全访问。</li> \n <li>都有哪几种身份认证方式？<br> 第一种就是大家熟知的cookie认证方式；<br> 第二种就是token认证方式：在访问webapi之前，先要向目标系统申请令牌（token)，申请到令牌后，再使用令牌访问webapi。Abp默认提供了这种方式；<br> 第三种是基于OAuth2.0的token认证方式：OAuth2.0是什么玩意？建议先看看<a href=\"http://www.jianshu.com/p/a57bda33e992\">OAuth2.0 知多少</a>以便我们后续内容的展开。OAuth2.0认证方式弥补了Abp自带token认证的短板，即无法进行token刷新。</li> \n</ol> \n<p>基于这一节，我完善了一个demo，大家可以直接访问<a href=\"http://shengjietest.azurewebsites.net/\" class=\"uri\">http://shengjietest.azurewebsites.net/</a>进行体验。</p> \n<p><img src=\"http://blog.open1111.com/static/blogImages/2017/04/24/4850290b-6b00-43ec-8268-5cec75d95649.png\" alt=\"demo\"></p> \n<p>下面我们就以【通过webapi请求用户列表】为例看一看三种认证方式的具体实现。</p> \n<h1 id=\"cookie认证方式\">2. Cookie认证方式</h1> \n<p>Cookie认证方式的原理就是：在访问webapi之前，通过登录目标系统建立连接，将cookie写入本地。下一次访问webapi的时候携带cookie信息就可以完成认证。</p> \n<h2 id=\"登录目标系统\">2.1. 登录目标系统</h2> \n<p>这一步简单，我们仅需提供用户名密码，Post一个登录请求即可。<br> 我们在微信模块中创建一个<code>WeixinController</code>：</p> \n<pre><code>public class WeixinController : Controller\n{\n    private readonly IAbpWebApiClient _abpWebApiClient;\n    private string baseUrl = \"http://shengjie.azurewebsites.net/\";\n    private string loginUrl = \"/account/login\";\n    private string webapiUrl = \"/api/services/app/User/GetUsers\";\n    private string abpTokenUrl = \"/api/Account/Authenticate\";\n    private string oAuthTokenUrl = \"/oauth/token\";\n    private string user = \"admin\";\n    private string pwd = \"123qwe\";\n\n    public WeixinController()\n    {\n        _abpWebApiClient = new AbpWebApiClient();\n    }\n}</code></pre> \n<p>其中<code>IAbpWebApiClient</code>是对<code>HttpClient</code>的封装，用于发送 HTTP 请求和接收HTTP 响应。</p> \n<p>下面添加<code>CookieBasedAuth</code>方法，来完成登录认证，代码如下：</p> \n<pre><code>public async Task CookieBasedAuth()\n{\n    Uri uri = new Uri(baseUrl + loginUrl);\n    var handler = new HttpClientHandler() { AutomaticDecompression = DecompressionMethods.None, UseCookies = true };\n\n    using (var client = new HttpClient(handler))\n    {\n        client.BaseAddress = uri;\n        client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n        var content = new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;()\n        {\n            {\"TenancyName\", \"Default\"},\n            {\"UsernameOrEmailAddress\", user},\n            {\"Password\", pwd }\n        });\n\n        //获取token保存到cookie，并设置token的过期日期                    \n        var result = await client.PostAsync(uri, content);\n\n        string loginResult = await result.Content.ReadAsStringAsync();\n\n        var getCookies = handler.CookieContainer.GetCookies(uri);\n\n        foreach (Cookie cookie in getCookies)\n        {\n            _abpWebApiClient.Cookies.Add(cookie);\n        }\n    }\n}</code></pre> \n<p>这段代码中有几个点需要注意：</p> \n<ol> \n <li>指定<code>HttpClientHandler</code>属性<code>UseCookie = true</code>，使用Cookie；</li> \n <li><code>client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));</code>用来指定接受的返回值；</li> \n <li>使用<code>FormUrlEncodedContent</code>进行传参；</li> \n <li>使用<code>var getCookies = handler.CookieContainer.GetCookies(uri);</code>获取返回的Cookie，并添加到<code>_abpWebApiClient.Cookies</code>的集合中，以便下次直接携带cookie信息访问webapi。</li> \n</ol> \n<h2 id=\"携带cookie访问webapi\">2.2. 携带cookie访问webapi</h2> \n<p>服务器返回的cookie信息在登录成功后已经填充到<code>_abpWebApiClient.Cookies</code>中，我们只需post一个请求到目标api即可。</p> \n<pre><code>public async Task&lt;PartialViewResult&gt; SendRequestBasedCookie()\n{\n    await CookieBasedAuth();\n    return await GetUserList(baseUrl + webapiUrl);\n}\n\nprivate async Task&lt;PartialViewResult&gt; GetUserList(string url)\n{\n    try\n    {\n        var users = await _abpWebApiClient.PostAsync&lt;ListResultDto&lt;UserListDto&gt;&gt;(url);\n\n        return PartialView(\"_UserListPartial\", users.Items);\n    }\n    catch (Exception e)\n    {\n        ViewBag.ErrorMessage = e.Message;\n    }\n\n    return null;\n}\n</code></pre> \n<h1 id=\"token认证方式\">3. Token认证方式</h1> \n<p>Abp默认提供的token认证方式，很简单，我们仅需要post一个请求到<code>/api/Account/Authenticate</code>即可请求到token。然后使用token即可请求目标webapi。<br> 但这其中有一个问题就是，如果token过期，就必须使用用户名密码重写申请token，体验不好。</p> \n<h2 id=\"请求token\">3.1. 请求token</h2> \n<pre><code>public async Task&lt;string&gt; GetAbpToken()\n{\n    var tokenResult = await _abpWebApiClient.PostAsync&lt;string&gt;(baseUrl + abpTokenUrl, new\n    {\n        TenancyName = \"Default\",\n        UsernameOrEmailAddress = user,\n        Password = pwd\n    });\n    this.Response.SetCookie(new HttpCookie(\"access_token\", tokenResult));\n    return tokenResult;\n}</code></pre> \n<p>这段代码中我们将请求到token直接写入到cookie中。以便我们下次直接从cookie中取回token直接访问webapi。</p> \n<h2 id=\"使用token访问webapi\">3.2. 使用token访问webapi</h2> \n<p>从cookie中取回token，在请求头中添加<code>Authorization = Bearer token</code>，即可。</p> \n<pre><code>public async Task&lt;PartialViewResult&gt; SendRequest()\n{\n    var token = Request.Cookies[\"access_token\"]?.Value;\n    //将token添加到请求头\n    _abpWebApiClient.RequestHeaders.Add(new NameValue(\"Authorization\", \"Bearer \" + token));\n\n    return await GetUserList(baseUrl + webapiUrl);\n}</code></pre> \n<p>这里面需要注意的是，abp中配置<code>app.UseOAuthBearerAuthentication(AccountController.OAuthBearerOptions);</code>使用的是<code>Bearer token</code>，所以我们在请求weiapi时，要在请求头中假如<code>Authorization</code>信息时，使用<code>Bearer token</code>的格式传输token信息（<strong>Bearer后有一个空格！</strong>）。</p> \n<h1 id=\"oauth2.0-token认证方式\">4. OAuth2.0 Token认证方式</h1> \n<p>OAuth2.0提供了token刷新机制，当服务器颁发的token过期后，我们可以直接通过<code>refresh_token</code>来申请token即可，不需要用户再录入用户凭证申请token。</p> \n<h2 id=\"abp集成oauth2.0\">4.1. Abp集成OAuth2.0</h2> \n<p>在WebApi项目中的Api路径下创建<code>Providers</code>文件夹，添加<code>SimpleAuthorizationServerProvider</code>和<code>SimpleRefreshTokenProvider</code>类。<br> 其中<code>SimpleAuthorizationServerProvider</code>用来验证客户端的用户名和密码来颁发token；<code>SimpleRefreshTokenProvider</code>用来刷新token。</p> \n<pre><code>public class SimpleAuthorizationServerProvider : OAuthAuthorizationServerProvider, ITransientDependency\n{\n    private readonly LogInManager _logInManager;\n\n    public SimpleAuthorizationServerProvider(LogInManager logInManager)\n        {\n            _logInManager = logInManager;\n        }\n\n    public override Task ValidateClientAuthentication(OAuthValidateClientAuthenticationContext context)\n        {\n            string clientId;\n            string clientSecret;\n            if (!context.TryGetBasicCredentials(out clientId, out clientSecret))\n            {\n                context.TryGetFormCredentials(out clientId, out clientSecret);\n            }\n            var isValidClient = string.CompareOrdinal(clientId, \"app\") == 0 &amp;&amp;\n                                string.CompareOrdinal(clientSecret, \"app\") == 0;\n            if (isValidClient)\n            {\n                context.OwinContext.Set(\"as:client_id\", clientId);\n                context.Validated(clientId);\n            }\n            else\n            {\n                context.SetError(\"invalid client\");\n            }\n\n            return Task.FromResult&lt;object&gt;(null);\n        }\n\n    public override async Task GrantResourceOwnerCredentials(OAuthGrantResourceOwnerCredentialsContext context)\n        {\n            var tenantId = context.Request.Query[\"tenantId\"];\n            var result = await GetLoginResultAsync(context, context.UserName, context.Password, tenantId);\n            if (result.Result == AbpLoginResultType.Success)\n            {\n                //var claimsIdentity = result.Identity;                \n                var claimsIdentity = new ClaimsIdentity(result.Identity);\n                claimsIdentity.AddClaim(new Claim(ClaimTypes.Name, context.UserName));\n                var ticket = new AuthenticationTicket(claimsIdentity, new AuthenticationProperties());\n                context.Validated(ticket);\n            }\n        }\n\n    public override  Task GrantRefreshToken(OAuthGrantRefreshTokenContext context)\n        {\n            var originalClient = context.OwinContext.Get&lt;string&gt;(\"as:client_id\");\n            var currentClient = context.ClientId;\n\n            // enforce client binding of refresh token\n            if (originalClient != currentClient)\n            {\n                context.Rejected();\n                return Task.FromResult&lt;object&gt;(null);\n            }\n\n            // chance to change authentication ticket for refresh token requests\n            var newId = new ClaimsIdentity(context.Ticket.Identity);\n            newId.AddClaim(new Claim(\"newClaim\", \"refreshToken\"));\n\n            var newTicket = new AuthenticationTicket(newId, context.Ticket.Properties);\n            context.Validated(newTicket);\n\n            return Task.FromResult&lt;object&gt;(null);\n        }\n\n    private async Task&lt;AbpLoginResult&lt;Tenant, User&gt;&gt; GetLoginResultAsync(OAuthGrantResourceOwnerCredentialsContext context,\n        string usernameOrEmailAddress, string password, string tenancyName)\n        {\n            var loginResult = await _logInManager.LoginAsync(usernameOrEmailAddress, password, tenancyName);\n\n            switch (loginResult.Result)\n            {\n                case AbpLoginResultType.Success:\n                    return loginResult;\n                default:\n                    CreateExceptionForFailedLoginAttempt(context, loginResult.Result, usernameOrEmailAddress, tenancyName);\n                    //throw CreateExceptionForFailedLoginAttempt(context,loginResult.Result, usernameOrEmailAddress, tenancyName);\n                    return loginResult;\n            }\n        }\n\n    private void CreateExceptionForFailedLoginAttempt(OAuthGrantResourceOwnerCredentialsContext context, \n        AbpLoginResultType result, string usernameOrEmailAddress, string tenancyName)\n        {\n            switch (result)\n            {\n                case AbpLoginResultType.Success:\n                    throw new ApplicationException(\"Don\'t call this method with a success result!\");\n                case AbpLoginResultType.InvalidUserNameOrEmailAddress:\n                case AbpLoginResultType.InvalidPassword:\n                    context.SetError(L(\"LoginFailed\"), L(\"InvalidUserNameOrPassword\"));\n                    break;\n                //    return new UserFriendlyException((\"LoginFailed\"), (\"InvalidUserNameOrPassword\"));\n                case AbpLoginResultType.InvalidTenancyName:\n                    context.SetError(L(\"LoginFailed\"), L(\"ThereIsNoTenantDefinedWithName\", tenancyName));\n                    break;\n                //    return new UserFriendlyException((\"LoginFailed\"), string.Format(\"ThereIsNoTenantDefinedWithName{0}\", tenancyName));\n                case AbpLoginResultType.TenantIsNotActive:\n                    context.SetError(L(\"LoginFailed\"), L(\"TenantIsNotActive\", tenancyName));\n                    break;\n                //    return new UserFriendlyException((\"LoginFailed\"), string.Format(\"TenantIsNotActive {0}\", tenancyName));\n                case AbpLoginResultType.UserIsNotActive:\n                    context.SetError(L(\"LoginFailed\"), L(\"UserIsNotActiveAndCanNotLogin\", usernameOrEmailAddress));\n                    break;\n                //    return new UserFriendlyException((\"LoginFailed\"), string.Format(\"UserIsNotActiveAndCanNotLogin {0}\", usernameOrEmailAddress));\n                case AbpLoginResultType.UserEmailIsNotConfirmed:\n                    context.SetError(L(\"LoginFailed\"), L(\"UserEmailIsNotConfirmedAndCanNotLogin\"));\n                    break;\n                    //    return new UserFriendlyException((\"LoginFailed\"), (\"UserEmailIsNotConfirmedAndCanNotLogin\"));\n                    //default: //Can not fall to default actually. But other result types can be added in the future and we may forget to handle it\n                    //    //Logger.Warn(\"Unhandled login fail reason: \" + result);\n                    //    return new UserFriendlyException((\"LoginFailed\"));\n            }\n        }\n\n    private static string L(string name, params object[] args)\n        {\n            //return new LocalizedString(name);\n            return IocManager.Instance.Resolve&lt;ILocalizationService&gt;().L(name, args);\n        }\n}</code></pre> \n<pre><code>public class SimpleRefreshTokenProvider : IAuthenticationTokenProvider, ITransientDependency\n{\n    private static ConcurrentDictionary&lt;string, AuthenticationTicket&gt; _refreshTokens = new ConcurrentDictionary&lt;string, AuthenticationTicket&gt;();\n\n    public Task CreateAsync(AuthenticationTokenCreateContext context)\n        {\n            var guid = Guid.NewGuid().ToString(\"N\");\n\n            // maybe only create a handle the first time, then re-use for same client\n            // copy properties and set the desired lifetime of refresh token\n            var refreshTokenProperties = new AuthenticationProperties(context.Ticket.Properties.Dictionary)\n            {\n                IssuedUtc = context.Ticket.Properties.IssuedUtc,\n                ExpiresUtc = DateTime.UtcNow.AddYears(1)\n            };\n            var refreshTokenTicket = new AuthenticationTicket(context.Ticket.Identity, refreshTokenProperties);\n\n            //_refreshTokens.TryAdd(guid, context.Ticket);\n            _refreshTokens.TryAdd(guid, refreshTokenTicket);\n\n            // consider storing only the hash of the handle\n            context.SetToken(guid);\n\n            return Task.FromResult&lt;object&gt;(null);\n        }\n\n    public Task ReceiveAsync(AuthenticationTokenReceiveContext context)\n        {\n            AuthenticationTicket ticket;\n            if (_refreshTokens.TryRemove(context.Token, out ticket))\n            {\n                context.SetTicket(ticket);\n            }\n\n            return Task.FromResult&lt;object&gt;(null);\n        }\n\n    public void Create(AuthenticationTokenCreateContext context)\n        {\n            throw new NotImplementedException();\n        }\n\n    public void Receive(AuthenticationTokenReceiveContext context)\n        {\n            throw new NotImplementedException();\n        }\n}</code></pre> \n<p>以上两段代码我就不做过多解释，请自行走读。</p> \n<p>紧接着我们在Api目录下创建<code>OAuthOptions</code>类用来配置OAuth认证。</p> \n<pre><code>public class OAuthOptions\n{\n    /// &lt;summary&gt;\n    /// Gets or sets the server options.\n    /// &lt;/summary&gt;\n    /// &lt;value&gt;The server options.&lt;/value&gt;\n    private static OAuthAuthorizationServerOptions _serverOptions;\n\n    /// &lt;summary&gt;\n    /// Creates the server options.\n    /// &lt;/summary&gt;\n    /// &lt;returns&gt;OAuthAuthorizationServerOptions.&lt;/returns&gt;\n    public static OAuthAuthorizationServerOptions CreateServerOptions()\n    {\n        if (_serverOptions == null)\n        {\n            var provider = IocManager.Instance.Resolve&lt;SimpleAuthorizationServerProvider&gt;();\n            var refreshTokenProvider = IocManager.Instance.Resolve&lt;SimpleRefreshTokenProvider&gt;();\n            _serverOptions = new OAuthAuthorizationServerOptions\n            {\n                TokenEndpointPath = new PathString(\"/oauth/token\"),\n                Provider = provider,\n                RefreshTokenProvider = refreshTokenProvider,\n                AccessTokenExpireTimeSpan = TimeSpan.FromSeconds(30),\n                AllowInsecureHttp = true\n            };\n        }\n        return _serverOptions;\n    }\n}</code></pre> \n<p>从中我们可以看出，主要配置了以下几个属性：</p> \n<ul> \n <li>TokenEndpointPath ：用来指定请求token的路由；</li> \n <li>Provider：用来指定创建token的Provider；</li> \n <li>RefreshTokenProvider：用来指定刷新token的Provider；</li> \n <li>AccessTokenExpireTimeSpan ：用来指定token过期时间，这里我们指定了30s，是为了demo 如何刷新token。</li> \n <li>AllowInsecureHttp：用来指定是否允许http连接。</li> \n</ul> \n<p>创建上面三个类之后，我们需要回到Web项目的<code>Startup</code>类中，配置使用集成的OAuth2.0，代码如下：</p> \n<pre><code>public void Configuration(IAppBuilder app)\n{\n    //第一步：配置跨域访问\n    app.UseCors(CorsOptions.AllowAll);\n\n    app.UseOAuthBearerAuthentication(AccountController.OAuthBearerOptions);\n\n    //第二步：使用OAuth密码认证模式\n    app.UseOAuthAuthorizationServer(OAuthOptions.CreateServerOptions());\n\n    //第三步：使用Abp\n    app.UseAbp();\n    \n    //省略其他代码\n}</code></pre> \n<p>其中配置跨越访问时，我们需要安装<code>Microsoft.AspNet.Cors</code>Nuget包。</p> \n<p>至此，Abp集成OAuth的工作完成了。</p> \n<h2 id=\"申请oauth-token\">4.2. 申请OAuth token</h2> \n<p>我们在Abp集成OAuth配置的申请token的路由是<code>/oauth/token</code>，所以我们将用户凭证post到这个路由即可申请token：</p> \n<pre><code>public async Task&lt;string&gt; GetOAuth2Token()\n{\n    Uri uri = new Uri(baseUrl + oAuthTokenUrl);\n    var handler = new HttpClientHandler() { AutomaticDecompression = DecompressionMethods.None };\n\n    using (var client = new HttpClient(handler))\n    {\n        client.BaseAddress = uri;\n        client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n        var content = new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;()\n        {\n            {\"grant_type\", \"password\"},\n            {\"username\", user },\n            {\"password\", pwd },\n            {\"client_id\", \"app\" },\n            {\"client_secret\", \"app\"},\n        });\n\n        //获取token保存到cookie，并设置token的过期日期                    \n        var result = await client.PostAsync(uri, content);\n        string tokenResult = await result.Content.ReadAsStringAsync();\n\n        var tokenObj = (JObject)JsonConvert.DeserializeObject(tokenResult);\n        string token = tokenObj[\"access_token\"].ToString();\n        string refreshToken = tokenObj[\"refresh_token\"].ToString();\n        long expires = Convert.ToInt64(tokenObj[\"expires_in\"]);\n\n        this.Response.SetCookie(new HttpCookie(\"access_token\", token));\n        this.Response.SetCookie(new HttpCookie(\"refresh_token\", refreshToken));\n        this.Response.Cookies[\"access_token\"].Expires = Clock.Now.AddSeconds(expires);\n\n        return tokenResult;\n    }\n}</code></pre> \n<p>在这段代码中我们指定的<code>grant_type = password</code>，这说明我们使用的是OAuth提供的<strong>密码认证模式</strong>。其中<code>{\"client_id\", \"app\" }, {\"client_secret\", \"app\"}</code>（搞过微信公众号开发的应该对这个很熟悉）用来指定客户端的身份和密钥，这边我们直接写死。<br> 通过OAuth的请求的token主要包含四部分：</p> \n<ul> \n <li>token：令牌</li> \n <li>refreshtoken：刷新令牌</li> \n <li>expires_in：token有效期</li> \n <li>token_type：令牌类型，我们这里是Bearer</li> \n</ul> \n<p>为了演示方便，我们直接把token信息直接写入到cookie中，实际项目中建议写入数据库。</p> \n<h2 id=\"刷新token\">4.3. 刷新token</h2> \n<p>如果我们的token过期了怎么办，咱们可以用<code>refresh_token</code>来重新获取token。</p> \n<pre><code>public async Task&lt;string&gt; GetOAuth2TokenByRefreshToken(string refreshToken)\n{\n    Uri uri = new Uri(baseUrl + oAuthTokenUrl);\n    var handler = new HttpClientHandler() { AutomaticDecompression = DecompressionMethods.None, UseCookies = true };\n\n    using (var client = new HttpClient(handler))\n    {\n        client.BaseAddress = uri;\n        client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n        var content = new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;()\n        {\n            {\"grant_type\", \"refresh_token\"},\n            {\"refresh_token\", refreshToken},\n            {\"client_id\", \"app\" },\n            {\"client_secret\", \"app\"},\n        });\n\n        //获取token保存到cookie，并设置token的过期日期                    \n        var result = await client.PostAsync(uri, content);\n\n        string tokenResult = await result.Content.ReadAsStringAsync();\n\n        var tokenObj = (JObject)JsonConvert.DeserializeObject(tokenResult);\n        string token = tokenObj[\"access_token\"].ToString();\n        string newRefreshToken = tokenObj[\"refresh_token\"].ToString();\n        long expires = Convert.ToInt64(tokenObj[\"expires_in\"]);\n\n        this.Response.SetCookie(new HttpCookie(\"access_token\", token));\n        this.Response.SetCookie(new HttpCookie(\"refresh_token\", newRefreshToken));\n        this.Response.Cookies[\"access_token\"].Expires = Clock.Now.AddSeconds(expires);\n\n        return tokenResult;\n    }\n}</code></pre> \n<p>这段代码较直接使用用户名密码申请token的差别主要在参数上，<code>{\"grant_type\", \"refresh_token\"},{\"refresh_token\", refreshToken}</code>。</p> \n<h2 id=\"使用token访问webapi-1\">4.4. 使用token访问webapi</h2> \n<p>有了token，访问webapi就很简单了。</p> \n<pre><code>public async Task&lt;ActionResult&gt; SendRequestWithOAuth2Token()\n{\n    var token = Request.Cookies[\"access_token\"]?.Value;\n    if (token == null)\n    {\n        //throw new Exception(\"token已过期\");\n        string refreshToken = Request.Cookies[\"refresh_token\"].Value;\n        var tokenResult = await GetOAuth2TokenByRefreshToken(refreshToken);\n        var tokenObj = (JObject)JsonConvert.DeserializeObject(tokenResult);\n        token = tokenObj[\"access_token\"].ToString();\n    }\n\n    _abpWebApiClient.RequestHeaders.Add(new NameValue(\"Authorization\", \"Bearer \" + token));\n\n    return await GetUserList(baseUrl + webapiUrl);\n}</code></pre> \n<p>这段代码中，我们首先从cookie中取回<code>access_token</code>，若<code>access_token</code>为空说明token过期，我们就从cookie中取回<code>refresh_token</code>重新申请token。然后构造一个<code>Authorization</code>将token信息添加到请求头即可访问目标webapi。</p> \n<h1 id=\"总结\">5. 总结</h1> \n<p>本文介绍了三种不同的认证方式进行访问webapi，并举例说明。文章不可能面面俱到，省略了部分代码，请直接参考源码。若有纰漏之处也欢迎大家留言指正。</p> \n<blockquote> \n <p>本文主要参考自以下文章：<br> <em><a href=\"http://m.blog.csdn.net/article/details?id=51649434\">使用OAuth打造webapi认证服务供自己的客户端使用</a><br> <a href=\"http://www.cnblogs.com/loyldg/p/using-oauth2-in-abp.html\">ABP中使用OAuth2(Resource Owner Password Credentials Grant模式)</a><br> <a href=\"http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/\">Token Based Authentication using ASP.NET Web API 2, Owin, and Identity</a></em></p> \n</blockquote>',NULL,'2017-04-24 16:02:17',0,0,NULL,'http://www.cnblogs.com/sheng-jie/p/6755187.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (55,'Nodejs进阶：express+session实现简易身份认证','<blockquote> \n <p>本文摘录自《Nodejs学习笔记》，更多章节及更新，请访问 <a href=\"https://github.com/chyingp/nodejs-learning-guide\">github主页地址</a>。欢迎加群交流，群号 <a href=\"http://shang.qq.com/wpa/qunwpa?idkey=7e4f670e1cd9278f30003965a1cc068a4f30d8c73aa071c8da189f4842dbbee6\" target=\"_blank\">197339705</a>。</p> \n</blockquote> \n<h2 id=\"文档概览\">文档概览</h2> \n<p>本文基于express、express-session实现了简易的登录/登出功能，完整的代码示例可以在<a href=\"https://github.com/chyingp/nodejs-learning-guide/tree/master/examples/2016.12.06-session\">这里</a>找到。</p> \n<h2 id=\"环境初始化\">环境初始化</h2> \n<p>首先，初始化项目</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span class=\"kw\">express</span> -e</code></pre>\n</div> \n<p>然后，安装依赖。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span class=\"kw\">npm</span> install</code></pre>\n</div> \n<p>接着，安装session相关的包。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span class=\"kw\">npm</span> install --save express-session session-file-store</code></pre>\n</div> \n<h2 id=\"session相关配置\">session相关配置</h2> \n<p>配置如下，并不复杂，可以见代码注释，或者参考<a href=\"https://github.com/expressjs/session#options\">官方文档</a>。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> express <span class=\"op\">=</span> <span class=\"at\">require</span>(<span class=\"st\">\'express\'</span>)<span class=\"op\">;</span>\n<span class=\"kw\">var</span> app <span class=\"op\">=</span> <span class=\"at\">express</span>()<span class=\"op\">;</span>\n<span class=\"kw\">var</span> session <span class=\"op\">=</span> <span class=\"at\">require</span>(<span class=\"st\">\'express-session\'</span>)<span class=\"op\">;</span>\n<span class=\"kw\">var</span> FileStore <span class=\"op\">=</span> <span class=\"at\">require</span>(<span class=\"st\">\'session-file-store\'</span>)(session)<span class=\"op\">;</span>\n\n<span class=\"kw\">var</span> identityKey <span class=\"op\">=</span> <span class=\"st\">\'skey\'</span><span class=\"op\">;</span>\n\n<span class=\"va\">app</span>.<span class=\"at\">use</span>(<span class=\"at\">session</span>(<span class=\"op\">{</span>\n    <span class=\"dt\">name</span><span class=\"op\">:</span> identityKey<span class=\"op\">,</span>\n    <span class=\"dt\">secret</span><span class=\"op\">:</span> <span class=\"st\">\'chyingp\'</span><span class=\"op\">,</span>  <span class=\"co\">// 用来对session id相关的cookie进行签名</span>\n    <span class=\"dt\">store</span><span class=\"op\">:</span> <span class=\"kw\">new</span> <span class=\"at\">FileStore</span>()<span class=\"op\">,</span>  <span class=\"co\">// 本地存储session（文本文件，也可以选择其他store，比如redis的）</span>\n    <span class=\"dt\">saveUninitialized</span><span class=\"op\">:</span> <span class=\"kw\">false</span><span class=\"op\">,</span>  <span class=\"co\">// 是否自动保存未初始化的会话，建议false</span>\n    <span class=\"dt\">resave</span><span class=\"op\">:</span> <span class=\"kw\">false</span><span class=\"op\">,</span>  <span class=\"co\">// 是否每次都重新保存会话，建议false</span>\n    <span class=\"dt\">cookie</span><span class=\"op\">:</span> <span class=\"op\">{</span>\n        <span class=\"dt\">maxAge</span><span class=\"op\">:</span> <span class=\"dv\">10</span> <span class=\"op\">*</span> <span class=\"dv\">1000</span>  <span class=\"co\">// 有效期，单位是毫秒</span>\n    <span class=\"op\">}</span>\n<span class=\"op\">}</span>))<span class=\"op\">;</span></code></pre>\n</div> \n<h2 id=\"实现登录登出接口\">实现登录/登出接口</h2> \n<h3 id=\"创建测试账户数据\">创建测试账户数据</h3> \n<p>首先，在本地创建个文件，来保存可用于登录的账户信息，避免创建链接数据库的繁琐。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><span class=\"co\">// users.js</span>\n<span class=\"va\">module</span>.<span class=\"at\">exports</span> <span class=\"op\">=</span> <span class=\"op\">{</span>\n    <span class=\"dt\">items</span><span class=\"op\">:</span> [\n        <span class=\"op\">{</span><span class=\"dt\">name</span><span class=\"op\">:</span> <span class=\"st\">\'chyingp\'</span><span class=\"op\">,</span> <span class=\"dt\">password</span><span class=\"op\">:</span> <span class=\"st\">\'123456\'</span><span class=\"op\">}</span>\n    ]\n<span class=\"op\">};</span></code></pre>\n</div> \n<h3 id=\"登录登出接口实现\">登录、登出接口实现</h3> \n<p>实现登录、登出接口，其中：</p> \n<ul> \n <li>登录：如果用户存在，则通过<code>req.regenerate</code>创建session，保存到本地，并通过<code>Set-Cookie</code>将session id保存到用户侧；</li> \n <li>登出：销毁session，并清除cookie；</li> \n</ul> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> users <span class=\"op\">=</span> <span class=\"at\">require</span>(<span class=\"st\">\'./users\'</span>).<span class=\"at\">items</span><span class=\"op\">;</span>\n\n<span class=\"kw\">var</span> findUser <span class=\"op\">=</span> <span class=\"kw\">function</span>(name<span class=\"op\">,</span> password)<span class=\"op\">{</span>\n    <span class=\"cf\">return</span> <span class=\"va\">users</span>.<span class=\"at\">find</span>(<span class=\"kw\">function</span>(item)<span class=\"op\">{</span>\n        <span class=\"cf\">return</span> <span class=\"va\">item</span>.<span class=\"at\">name</span> <span class=\"op\">===</span> name <span class=\"op\">&amp;&amp;</span> <span class=\"va\">item</span>.<span class=\"at\">password</span> <span class=\"op\">===</span> password<span class=\"op\">;</span>\n    <span class=\"op\">}</span>)<span class=\"op\">;</span>\n<span class=\"op\">};</span>\n\n<span class=\"co\">// 登录接口</span>\n<span class=\"va\">app</span>.<span class=\"at\">post</span>(<span class=\"st\">\'/login\'</span><span class=\"op\">,</span> <span class=\"kw\">function</span>(req<span class=\"op\">,</span> res<span class=\"op\">,</span> next)<span class=\"op\">{</span>\n    \n    <span class=\"kw\">var</span> sess <span class=\"op\">=</span> <span class=\"va\">req</span>.<span class=\"at\">session</span><span class=\"op\">;</span>\n    <span class=\"kw\">var</span> user <span class=\"op\">=</span> <span class=\"at\">findUser</span>(<span class=\"va\">req</span>.<span class=\"va\">body</span>.<span class=\"at\">name</span><span class=\"op\">,</span> <span class=\"va\">req</span>.<span class=\"va\">body</span>.<span class=\"at\">password</span>)<span class=\"op\">;</span>\n\n    <span class=\"cf\">if</span>(user)<span class=\"op\">{</span>\n        <span class=\"va\">req</span>.<span class=\"va\">session</span>.<span class=\"at\">regenerate</span>(<span class=\"kw\">function</span>(err) <span class=\"op\">{</span>\n            <span class=\"cf\">if</span>(err)<span class=\"op\">{</span>\n                <span class=\"cf\">return</span> <span class=\"va\">res</span>.<span class=\"at\">json</span>(<span class=\"op\">{</span><span class=\"dt\">ret_code</span><span class=\"op\">:</span> <span class=\"dv\">2</span><span class=\"op\">,</span> <span class=\"dt\">ret_msg</span><span class=\"op\">:</span> <span class=\"st\">\'登录失败\'</span><span class=\"op\">}</span>)<span class=\"op\">;</span>                \n            <span class=\"op\">}</span>\n            \n            <span class=\"va\">req</span>.<span class=\"va\">session</span>.<span class=\"at\">loginUser</span> <span class=\"op\">=</span> <span class=\"va\">user</span>.<span class=\"at\">name</span><span class=\"op\">;</span>\n            <span class=\"va\">res</span>.<span class=\"at\">json</span>(<span class=\"op\">{</span><span class=\"dt\">ret_code</span><span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dt\">ret_msg</span><span class=\"op\">:</span> <span class=\"st\">\'登录成功\'</span><span class=\"op\">}</span>)<span class=\"op\">;</span>                           \n        <span class=\"op\">}</span>)<span class=\"op\">;</span>\n    <span class=\"op\">}</span><span class=\"cf\">else</span><span class=\"op\">{</span>\n        <span class=\"va\">res</span>.<span class=\"at\">json</span>(<span class=\"op\">{</span><span class=\"dt\">ret_code</span><span class=\"op\">:</span> <span class=\"dv\">1</span><span class=\"op\">,</span> <span class=\"dt\">ret_msg</span><span class=\"op\">:</span> <span class=\"st\">\'账号或密码错误\'</span><span class=\"op\">}</span>)<span class=\"op\">;</span>\n    <span class=\"op\">}</span>   \n<span class=\"op\">}</span>)<span class=\"op\">;</span>\n\n<span class=\"co\">// 退出登录</span>\n<span class=\"va\">app</span>.<span class=\"at\">get</span>(<span class=\"st\">\'/logout\'</span><span class=\"op\">,</span> <span class=\"kw\">function</span>(req<span class=\"op\">,</span> res<span class=\"op\">,</span> next)<span class=\"op\">{</span>\n    <span class=\"co\">// 备注：这里用的 session-file-store 在destroy 方法里，并没有销毁cookie</span>\n    <span class=\"co\">// 所以客户端的 cookie 还是存在，导致的问题 --&gt; 退出登陆后，服务端检测到cookie</span>\n    <span class=\"co\">// 然后去查找对应的 session 文件，报错</span>\n    <span class=\"co\">// session-file-store 本身的bug </span>\n\n    <span class=\"va\">req</span>.<span class=\"va\">session</span>.<span class=\"at\">destroy</span>(<span class=\"kw\">function</span>(err) <span class=\"op\">{</span>\n        <span class=\"cf\">if</span>(err)<span class=\"op\">{</span>\n            <span class=\"va\">res</span>.<span class=\"at\">json</span>(<span class=\"op\">{</span><span class=\"dt\">ret_code</span><span class=\"op\">:</span> <span class=\"dv\">2</span><span class=\"op\">,</span> <span class=\"dt\">ret_msg</span><span class=\"op\">:</span> <span class=\"st\">\'退出登录失败\'</span><span class=\"op\">}</span>)<span class=\"op\">;</span>\n            <span class=\"cf\">return</span><span class=\"op\">;</span>\n        <span class=\"op\">}</span>\n        \n        <span class=\"co\">// req.session.loginUser = null;</span>\n        <span class=\"va\">res</span>.<span class=\"at\">clearCookie</span>(identityKey)<span class=\"op\">;</span>\n        <span class=\"va\">res</span>.<span class=\"at\">redirect</span>(<span class=\"st\">\'/\'</span>)<span class=\"op\">;</span>\n    <span class=\"op\">}</span>)<span class=\"op\">;</span>\n<span class=\"op\">}</span>)<span class=\"op\">;</span></code></pre>\n</div> \n<h3 id=\"登录态判断\">登录态判断</h3> \n<p>用户访问 <a href=\"http://127.0.0.1:3000\" class=\"uri\">http://127.0.0.1:3000</a> 时，判断用户是否登录，如果是，则调到用户详情界面（简陋无比）；如果没有登录，则跳到登录界面；</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><span class=\"va\">app</span>.<span class=\"at\">get</span>(<span class=\"st\">\'/\'</span><span class=\"op\">,</span> <span class=\"kw\">function</span>(req<span class=\"op\">,</span> res<span class=\"op\">,</span> next)<span class=\"op\">{</span>\n    <span class=\"kw\">var</span> sess <span class=\"op\">=</span> <span class=\"va\">req</span>.<span class=\"at\">session</span><span class=\"op\">;</span>\n    <span class=\"kw\">var</span> loginUser <span class=\"op\">=</span> <span class=\"va\">sess</span>.<span class=\"at\">loginUser</span><span class=\"op\">;</span>\n    <span class=\"kw\">var</span> isLogined <span class=\"op\">=</span> <span class=\"op\">!!</span>loginUser<span class=\"op\">;</span>\n\n    <span class=\"va\">res</span>.<span class=\"at\">render</span>(<span class=\"st\">\'index\'</span><span class=\"op\">,</span> <span class=\"op\">{</span>\n        <span class=\"dt\">isLogined</span><span class=\"op\">:</span> isLogined<span class=\"op\">,</span>\n        <span class=\"dt\">name</span><span class=\"op\">:</span> loginUser <span class=\"op\">||</span> <span class=\"st\">\'\'</span>\n    <span class=\"op\">}</span>)<span class=\"op\">;</span>\n<span class=\"op\">}</span>)<span class=\"op\">;</span></code></pre>\n</div> \n<h3 id=\"ui界面\">UI界面</h3> \n<p>最后，看下登录、登出UI相关的代码。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode html\"><code class=\"sourceCode html\"><span class=\"dt\">&lt;!DOCTYPE </span>html<span class=\"dt\">&gt;</span>\n<span class=\"kw\">&lt;html&gt;</span>\n<span class=\"kw\">&lt;head&gt;</span>\n    <span class=\"kw\">&lt;title&gt;</span>会话管理<span class=\"kw\">&lt;/title&gt;</span>\n<span class=\"kw\">&lt;/head&gt;</span>\n<span class=\"kw\">&lt;body&gt;</span>\n\n<span class=\"kw\">&lt;h1&gt;</span>会话管理<span class=\"kw\">&lt;/h1&gt;</span>\n\n<span class=\"er\">&lt;</span>% if(isLogined){ %&gt;\n    <span class=\"kw\">&lt;p&gt;</span>当前登录用户：<span class=\"er\">&lt;</span>%= name %&gt;，<span class=\"kw\">&lt;a</span><span class=\"ot\"> href=</span><span class=\"st\">\"/logout\"</span><span class=\"ot\"> id=</span><span class=\"st\">\"logout\"</span><span class=\"kw\">&gt;</span>退出登陆<span class=\"kw\">&lt;/a&gt;&lt;/p&gt;</span>\n<span class=\"er\">&lt;</span>% }else{ %&gt;\n    <span class=\"kw\">&lt;form</span><span class=\"ot\"> method=</span><span class=\"st\">\"POST\"</span><span class=\"ot\"> action=</span><span class=\"st\">\"/login\"</span><span class=\"kw\">&gt;</span>\n        <span class=\"kw\">&lt;input</span><span class=\"ot\"> type=</span><span class=\"st\">\"text\"</span><span class=\"ot\"> id=</span><span class=\"st\">\"name\"</span><span class=\"ot\"> name=</span><span class=\"st\">\"name\"</span><span class=\"ot\"> value=</span><span class=\"st\">\"chyingp\"</span> <span class=\"kw\">/&gt;</span>\n        <span class=\"kw\">&lt;input</span><span class=\"ot\"> type=</span><span class=\"st\">\"password\"</span><span class=\"ot\"> id=</span><span class=\"st\">\"password\"</span><span class=\"ot\"> name=</span><span class=\"st\">\"password\"</span><span class=\"ot\"> value=</span><span class=\"st\">\"123456\"</span> <span class=\"kw\">/&gt;</span>\n        <span class=\"kw\">&lt;input</span><span class=\"ot\"> type=</span><span class=\"st\">\"submit\"</span><span class=\"ot\"> value=</span><span class=\"st\">\"登录\"</span><span class=\"ot\"> id=</span><span class=\"st\">\"login\"</span> <span class=\"kw\">/&gt;</span>\n    <span class=\"kw\">&lt;/form&gt;</span>\n<span class=\"er\">&lt;</span>% } %&gt; \n\n<span class=\"kw\">&lt;script</span><span class=\"ot\"> type=</span><span class=\"st\">\"text/javascript\"</span><span class=\"ot\"> src=</span><span class=\"st\">\"/jquery-3.1.0.min.js\"</span><span class=\"kw\">&gt;&lt;/script&gt;</span>\n<span class=\"kw\">&lt;script</span><span class=\"ot\"> type=</span><span class=\"st\">\"text/javascript\"</span><span class=\"kw\">&gt;</span>\n    <span class=\"at\">$</span>(<span class=\"st\">\'#login\'</span>).<span class=\"at\">click</span>(<span class=\"kw\">function</span>(evt)<span class=\"op\">{</span>\n        <span class=\"va\">evt</span>.<span class=\"at\">preventDefault</span>()<span class=\"op\">;</span>\n\n        <span class=\"va\">$</span>.<span class=\"at\">ajax</span>(<span class=\"op\">{</span>\n            <span class=\"dt\">url</span><span class=\"op\">:</span> <span class=\"st\">\'/login\'</span><span class=\"op\">,</span>\n            <span class=\"dt\">type</span><span class=\"op\">:</span> <span class=\"st\">\'POST\'</span><span class=\"op\">,</span>\n            <span class=\"dt\">data</span><span class=\"op\">:</span> <span class=\"op\">{</span>\n                <span class=\"dt\">name</span><span class=\"op\">:</span> <span class=\"at\">$</span>(<span class=\"st\">\'#name\'</span>).<span class=\"at\">val</span>()<span class=\"op\">,</span>\n                <span class=\"dt\">password</span><span class=\"op\">:</span> <span class=\"at\">$</span>(<span class=\"st\">\'#password\'</span>).<span class=\"at\">val</span>()\n            <span class=\"op\">},</span>\n            <span class=\"dt\">success</span><span class=\"op\">:</span> <span class=\"kw\">function</span>(data)<span class=\"op\">{</span>\n                <span class=\"cf\">if</span>(<span class=\"va\">data</span>.<span class=\"at\">ret_code</span> <span class=\"op\">===</span> <span class=\"dv\">0</span>)<span class=\"op\">{</span>\n                    <span class=\"va\">location</span>.<span class=\"at\">reload</span>()<span class=\"op\">;</span>\n                <span class=\"op\">}</span>   \n            <span class=\"op\">}</span>\n        <span class=\"op\">}</span>)<span class=\"op\">;</span>\n    <span class=\"op\">}</span>)<span class=\"op\">;</span>\n<span class=\"op\">&lt;</span><span class=\"ss\">/script&gt;</span>\n\n<span class=\"ss\">&lt;/body</span><span class=\"op\">&gt;</span>\n<span class=\"op\">&lt;</span><span class=\"ss\">/html&gt;</span></code></pre>\n</div> \n<h2 id=\"相关链接\">相关链接</h2> \n<p><a href=\"https://github.com/expressjs/session\" class=\"uri\">https://github.com/expressjs/session</a></p>',NULL,'2017-04-24 16:02:19',0,0,NULL,'http://www.cnblogs.com/chyingp/p/nodejs-learning-express-session.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (56,'上周热点回顾（4.17-4.23）','<p>热点随笔：</p> \n<p>·&nbsp;<a href=\"http://www.cnblogs.com/powertoolsteam/archive/2017/04/18/net_core_c_sharp.html\" target=\"_blank\">是什么让C＃成为最值得学习的编程语言</a>（<a href=\"http://www.cnblogs.com/powertoolsteam/\" target=\"_blank\">葡萄城控件技术团队</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/aspwebchh/archive/2017/04/19/6731657.html\" target=\"_blank\">变身超人程序员</a>（<a href=\"http://www.cnblogs.com/aspwebchh/\" target=\"_blank\">陈宏鸿</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/preacher/archive/2017/04/21/6743031.html\" target=\"_blank\">这短短几行代码价值一万</a>（<a href=\"http://www.cnblogs.com/preacher/\" target=\"_blank\">小尧弟</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/aspwebchh/archive/2017/04/17/6721329.html\" target=\"_blank\">让程序的性能提升10倍</a>（<a href=\"http://www.cnblogs.com/aspwebchh/\" target=\"_blank\">陈宏鸿</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/nianming/archive/2017/04/18/6726199.html\" target=\"_blank\">学习vue 20天，我写了点东西</a>（<a href=\"http://www.cnblogs.com/nianming/\" target=\"_blank\">BobTian</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/liliangel/archive/2017/04/19/6732507.html\" target=\"_blank\">前端项目从0到1的感悟</a>（<a href=\"http://www.cnblogs.com/liliangel/\" target=\"_blank\">liliangel</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/08shiyan/archive/2017/04/19/6733651.html\" target=\"_blank\">.NET插件技术-应用程序热升级</a>（<a href=\"http://www.cnblogs.com/08shiyan/\" target=\"_blank\">把爱延续</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/qishuang/archive/2017/04/17/6721989.html\" target=\"_blank\">调取百度地图接口，实现取自己的实时位置，然后可以在百度地图上添加信息标注</a>（<a href=\"http://www.cnblogs.com/qishuang/\" target=\"_blank\">QISHUANG</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/davenkin/archive/2017/04/18/microservices-and-domain-events.html\" target=\"_blank\">在微服务中使用领域事件</a>（<a href=\"http://www.cnblogs.com/davenkin/\" target=\"_blank\">无知者云</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/intsmaze/archive/2017/04/19/6733968.html\" target=\"_blank\">MapReduce中map并行度优化及源码分析</a>（<a href=\"http://www.cnblogs.com/intsmaze/\" target=\"_blank\">intsmaze</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/qcloud1001/archive/2017/04/17/6709850.html\" target=\"_blank\">40行代码的人脸识别实践</a>（<a href=\"http://www.cnblogs.com/qcloud1001/\" target=\"_blank\">腾讯云技术社区</a>）<br>·&nbsp;<a href=\"http://www.cnblogs.com/linezero/archive/2017/04/18/jiebanetcore.html\" target=\"_blank\">.NET Core中文分词组件jieba.NET Core</a>（<a href=\"http://www.cnblogs.com/linezero/\" target=\"_blank\">LineZero</a>）</p> \n<p>热点新闻：</p> \n<p>·&nbsp;<a href=\"http://news.cnblogs.com/n/567477/\" target=\"_blank\">给你介绍一个假的苹果网站，能肉眼看出来算我输</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567522/\" target=\"_blank\">苹果回应微信关闭打赏：所有开发者一视同仁</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567265/\" target=\"_blank\">中国第一！顺丰又买下一架飞机：总数量无敌</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567502/\" target=\"_blank\">小米6发布：iPhone 7P双摄方案，标配6GB内存，起售价2499元</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567272/\" target=\"_blank\">特斯拉CEO亲笔信致谢腾讯安全科恩实验室：我们尤为感激</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567666/\" target=\"_blank\">全世界最酷的软件！谷歌地球重磅更新</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567524/\" target=\"_blank\">Intel慌了！Ryzen影响力爆发：推翻现有市场格局</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567400/\" target=\"_blank\">Visual Studio 2017更新，侧重于提高稳定性</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567335/\" target=\"_blank\">中国芯崛起：中兴新支点操作系统支持龙芯3A3000</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567308/\" target=\"_blank\">平壤的高层其实是面空心墙？我们去Google Map上探了个究竟</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567590/\" target=\"_blank\">榨汁机都骗人！这家融资1.2亿美元的公司成为硅谷大笑话</a><br>·&nbsp;<a href=\"http://news.cnblogs.com/n/567616/\" target=\"_blank\">宇宙级快递！中国首艘货运飞船天舟一号发射成功</a></p>',NULL,'2017-04-24 16:02:20',0,0,NULL,'http://www.cnblogs.com/cmt/p/6755107.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (57,'JavaScript巧学巧用','<h2 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.4em; border-bottom: 1px solid #eeeeee;\">关于</h2><ul style=\"margin: 1.2em 0px; padding-left: 2em;\" class=\" list-paddingleft-2\"><li><p>微信公众号：前端呼啦圈（Love-FED）</p></li><li><p>我的博客：<a href=\"http://www.cnblogs.com/luozhihao\">劳卜的博客</a></p></li><li><p>知乎专栏：<a href=\"https://zhuanlan.zhihu.com/font-end\">前端呼啦圈</a></p></li></ul><h2 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.4em; border-bottom: 1px solid #eeeeee;\">前言</h2><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">由于工作和生活上的一些变化，最近写文章的频率有点下降了，实在不好意思，不过相信不久就会慢慢恢复过来，感谢大家一直以来的关注和支持。</p><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">本文主要给大家分享一下在编写JavaScript代码的时候存在的一些方法和技巧，虽然有时候条条大路都通向罗马，但是也许总会有那么一条最短的路径可走。希望通过以下几点JavaScript技巧让大家的代码“化繁为简，化简为精”。</p><h2 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.4em; border-bottom: 1px solid #eeeeee;\">巧学巧用</h2><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">1. new Set()</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">可能有人知道ES6中提供了新的数据结构 Set，但是能够灵活运用的人或许不多。利用Set数据结构我们能够轻松的去重一个数组，比如：</p><pre>let&nbsp;arr&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;2,&nbsp;3];let&nbsp;set&nbsp;=&nbsp;new&nbsp;Set(arr);let&nbsp;newArr&nbsp;=&nbsp;Array.from(set);&nbsp;//&nbsp;Array.from方法可以将&nbsp;Set&nbsp;结构转为数组。console.log(newArr);&nbsp;//&nbsp;[1,&nbsp;2,&nbsp;3]</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">2. Object.assign()</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">Object.assign()也是ES6中提供的对象的扩展方法，不过其只能拷贝一层，比如：</p><pre>let&nbsp;obj1&nbsp;=&nbsp;{a:&nbsp;1};let&nbsp;obj2&nbsp;=&nbsp;{b:&nbsp;2};let&nbsp;obj3&nbsp;=&nbsp;Object.assign({},&nbsp;obj1,&nbsp;obj2);console.log(obj3);&nbsp;//&nbsp;{a:&nbsp;1,&nbsp;b:&nbsp;2}</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">3. map()</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">map方法用于遍历数组，有返回值，可以对数组的每一项进行操作并生成一个新的数组，有些时候可以代替for和forEach循环，简化代码，比如：</p><pre>let&nbsp;arr3&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5];let&nbsp;newArr3&nbsp;=&nbsp;arr3.map((e,&nbsp;i)&nbsp;=&gt;&nbsp;e&nbsp;*&nbsp;10);&nbsp;//&nbsp;给数组每一项乘以10console.log(newArr3);&nbsp;//&nbsp;[10,&nbsp;20,&nbsp;30,&nbsp;40,&nbsp;50]</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">4. filter()</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">filter方法同样用于遍历数组，顾名思义，就是过滤数组，在每一项元素后面触发一个回调函数，通过判断，保留或移除当前项，最后返回一个新的数组，比如：</p><pre>let&nbsp;arr4&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5];let&nbsp;newArr4&nbsp;=&nbsp;arr4.filter((e,&nbsp;i)&nbsp;=&gt;&nbsp;e&nbsp;%&nbsp;2&nbsp;===&nbsp;0);&nbsp;//&nbsp;取模，过滤余数不为0的数console.log(newArr4);&nbsp;//&nbsp;[2，4]</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">5. some()</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">some方法用于遍历数组，在每一项元素后面触发一个回调函数，只要一个满足条件就返回true，否则返回false，类似于 || 比较，比如：</p><pre>let&nbsp;arr5&nbsp;=&nbsp;[{result:&nbsp;true},&nbsp;{result:&nbsp;false}];let&nbsp;newArr5&nbsp;=&nbsp;arr5.some((e,&nbsp;i)&nbsp;=&gt;&nbsp;e.result);&nbsp;//&nbsp;只要一个为true，即为trueconsole.log(newArr5);&nbsp;//&nbsp;true</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">6.every()</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">every方法用于遍历数组，在每一项元素后面触发一个回调函数，只要一个不满足条件就返回false，否则返回true，类似于 &amp;&amp; 比较，比如：</p><pre>let&nbsp;arr6&nbsp;=&nbsp;[{result:&nbsp;true},&nbsp;{result:&nbsp;false}];let&nbsp;newArr6&nbsp;=&nbsp;arr6.every((e,&nbsp;i)&nbsp;=&gt;&nbsp;e.result);&nbsp;//&nbsp;只要一个为false，即为falseconsole.log(newArr6);&nbsp;//&nbsp;false</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">7. ~~运算符</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">~符号用在JavaScript中有按位取反的作用，~~即是取反两次，而位运算的操作值要求是整数，其结果也是整数，所以经过位运算的都会自动变成整数，可以巧妙的去掉小数部分，类似于parseInt，比如：</p><pre>let&nbsp;a&nbsp;=&nbsp;1.23;let&nbsp;b&nbsp;=&nbsp;-1.23;console.log(~~a);&nbsp;//&nbsp;1console.log(~~b);&nbsp;//&nbsp;-1</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">8. ||运算符</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">巧妙的使用 || 运算符我们可以给变量设置默认值，比如：</p><pre>let&nbsp;c&nbsp;=&nbsp;1;let&nbsp;d&nbsp;=&nbsp;c&nbsp;||&nbsp;2;&nbsp;//&nbsp;如果c的值为true则取存在的值，否则为2console.log(d);&nbsp;//&nbsp;1</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">9. …运算符</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">…运算符是ES6中用于解构数组的方法，可以用于快速获取数组的参数，比如：</p><pre>let&nbsp;[num1,&nbsp;...nums]&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3];console.log(num1);&nbsp;//&nbsp;1console.log(nums);&nbsp;//&nbsp;[2,&nbsp;3]</pre><p></p><h3 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.3em;\">10. 三元运算符</h3><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">该运算符应该大家都比较熟悉，在默写情况下可以简化if else的写法，比如：</p><pre>let&nbsp;e&nbsp;=&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;&#39;&#39;;if&nbsp;(e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;&#39;man&#39;;\n}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;&#39;woman&#39;;\n}//&nbsp;等同于e&nbsp;?&nbsp;f&nbsp;=&nbsp;&#39;man&#39;&nbsp;:&nbsp;f&nbsp;=&nbsp;&#39;woman&#39;;</pre><p></p><h2 style=\"margin: 1.3em 0px 1em; padding: 0px; font-weight: bold; font-size: 1.4em; border-bottom: 1px solid #eeeeee;\">结语</h2><p style=\"font-size: 14px; margin: 0px 0px 1.2em !important;\">本文只列出了JavaScript语法中比较常见的10点提升编码效率的方法进行了简单地阐述，当然每一个知识点都可以进行相应的展开与探究，希望大家在巧学的同时达到巧用的效果。</p><p>​</p>','关于微信公众号：前端呼啦圈（Love-FED）我的博客：劳卜的博客知乎专栏：前端呼啦圈前言由于工作和生活上的一些变化，最近写文章的频率有点下降了，实在不好意思，不过相信不久就会慢慢恢复过来，感谢大家一直以来的关注和支持。本文主要给大家分享一下在编写JavaScript代码的时候存在的一些方法和技巧，虽然有时候','2017-04-24 04:02:21',1,2,'JavaScript','http://www.cnblogs.com/luozhihao/p/6752778.html',1,'2017-04-24 16:05:56');
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (58,'数据可视化之MarkPoint','<p><img title=\"1\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" border=\"0\" alt=\"1\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/3e7efe8e-561d-4786-ba5f-0090d4ffb51f.jpeg\" width=\"640\" height=\"335\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MarkPoint是什么效果？如上图，一闪一闪亮晶晶的效果，这是在Echarts中对应的效果。我最早看到的是腾讯的一个Flash的版本，显示当前QQ在线人数的全国分布效果，感觉效果很炫，当时也在想，怎么用JS，HTML5来做出类似的效果，但说实话，没什么思路，甚至怀疑JS是否做不出来这种逼真的效果来。终于看到Echarts中提供了这个功能。下面就扒开她绚丽的衣着，一起走进MarkPoint的世界。 </p>\n<h2><strong>数据</strong></h2> \n<p><img title=\"2\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" border=\"0\" alt=\"2\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/5db3e4fd-e2a2-44b0-906f-8b2cf0c27cb3.jpeg\" width=\"588\" height=\"480\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先还是先看看数据上的逻辑。上图是一个数据格式，placeList包括每一个关键点的名称和坐标位置，而在风格中主要有name，可以设置为强中弱三种，分别对应MarkPoint图中白蓝绿三种效果，类型是中国地图，而具体的风格在存储在markPoint字段中。我们在看看markPoint字段里面是什么内容。 </p>\n<p><img title=\"3\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" border=\"0\" alt=\"3\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/71ed0081-d0c2-4036-8eed-5125bd768d1a.jpeg\" width=\"422\" height=\"480\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如上就是markPoint里面的主要内容，这里，每一个点是一个钻石（diamond）的样式，符号大小，还有一个effect的属性，这就是它的动画风格，而data则用来加载placeList的信息。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 综上所述，对于使用者而言，指定好要显示markPoint的位置，也就是placeList，然后在赋予它们的具体效果，中国范围，强弱类型以及具体的形状（钻石，矩形或圆形等），这样就可以得到MarkPoint这样的闪烁效果。 </p>\n<h2><strong>原理</strong></h2> \n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其实说原理有点夸大其词。通过数据层面，可以看出来每一个点都是独立的，如果你放大后，基本可以判断出来各自完成自己的动画效果，并一致循环下去。如果缩小后，你会发现所有的markPoint并不是同步的，频率各不相同，显得杂乱无章。（推荐TED的视频：The First Secret of Great Design - Tony Fadell - TED Talks）。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这样，这个问题就分解成了两个部分： </p>\n<ul> \n <li> <p>如何模拟每一个点的闪烁效果</p> </li>\n <li> <p>如何管理大规模的点的闪烁周期</p></li>\n</ul> \n<h5></h5> \n<h4><strong>闪烁效果的实现</strong></h4> \n<p><img title=\"4\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"4\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/0a1aee0f-5f4a-43b6-b5de-bc53a88f5d8e.jpeg\" width=\"263\" height=\"113\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如上，是同一个markPoint在不同帧下的效果，大家可以想想一下这样一个从小到大然后再到小的过程，则完成了闪烁的效果，如果你足够细心会发现里面有一个blur的平滑效果，这样会让闪烁有一个平滑的效果，类似字体的抗锯齿，看起来有一种朦胧的感觉。当然，blur这个效果是怎么实现的？其实在之前风向图和热点图中都采用了这个技术，就是和上一帧的图片进行一个半透明的叠加。然后在配合一个动画特效（animation effect），闪烁的效果就完成了。 </p>\n<h4><strong>多点闪烁动画的实现</strong></h4> \n<p><img title=\"5\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"5\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/6f3be54c-e3a1-4792-9e62-15a4331fd019.jpeg\" width=\"635\" height=\"338\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如上是在某一帧的截图。俗话说的好，一花独放不是春，所以如何控制这么多的点，风格各不相同的markPoint，而且频率各不相同，这就涉及到动画类和随机数之间的内容，同时在框架上能够贯穿整个渲染周期。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们看一下在Echarts上的流程，先是初始化的流程： </p>\n<p><img title=\"6\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"6\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/b3261eca-e962-46c7-a4bf-e722140064f8.jpeg\" width=\"640\" height=\"353\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如同，MarkPoint的数据初始化主要是Map类读取数据，然后在Base中调用getLargeMarkPointShape来创建这些点。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在Base中，调用animationEffect指定单个MarkPoint的闪烁风格，这里需要额外说明一下，虽然在数据中动画风格只是简单的show:true.但实际上，最终是采用的config.js中默认的动画风格，比如周期，是否循环，跳动等，如下图所示： </p>\n<p><img title=\"7\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"7\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/9599362c-2adc-4f57-b4a0-2a12b2d904f8.jpeg\" width=\"626\" height=\"218\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 而在ecEffect中，调用largePoint来随机设置，实现各自不同的动画周期。从而完成整改初始化的过程。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 初始化结束后，则进入到了渲染阶段。渲染是采用的zrender框架，而markPoint则是由Animation来驱动，每一帧都会调用update，在onframe中来设置每一个点当前的状态，比如大小，根据时间周期下，线性插值计算出它应该的大小（下面会详细说明），最后调用Symbol::buildPath实现所有markPoint的闪烁效果。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这就是初始化准备和渲染周期的大致一个过程，下面对主要功能模块进行介绍 </p>\n<h2><strong>实现代码</strong></h2> \n<p><img title=\"8\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"8\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/b2a2cc91-7203-4a48-9b6f-c3fe4d841327.jpeg\" width=\"485\" height=\"153\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如上，只是指定了blur为true，则实现了平滑效果，简单不？其实这用了一个双缓存的技术，在zrender中有一个Layer对象，每一帧都会叠加上一帧的效果，并保存。具体的实现可以参阅zrender的Layer类，比较简单。 </p>\n<p>闪烁动画有点复杂，首先，怎么控制一个markPoint从大到小的这样一个线性变换的过程，动画类是如何控制的，另外对于不同的markPoint，有这么多点，同一帧下每个点对应的风格也不尽相同，这又是如何控制的。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先，这要介绍一下zrender中的Animation类，一个非常好用强大的类，先看看使用代码，如下： </p>\n<p><img title=\"9\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"9\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/1d870abe-29d8-49ac-a28a-ca3dffac82c5.jpeg\" width=\"552\" height=\"173\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先，这是一个when.js风格的使用方式，该动画主要用来控制effectShape的‘style’属性，即每一帧来对style属性进行更新。那更新什么内容呢？这就是clip对象了。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里有四个when，再加上最上面的随机的初始大小，也就是说一个周期有5个控制点，其中clip1 = 100，而clip2 = 0,，这里对应的是该控制点对应markPoint的size的百分比。也就是在这个周期中，按照如下的插值算法来控制该点的size。不知道说清楚了没有，可以自己调试一下代码看看。 </p>\n<p><img title=\"10\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"10\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/c12d7887-17d6-44fb-862d-106553028dcb.jpeg\" width=\"152\" height=\"44\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这是在一帧下插值计算当前size的百分比，这里采用的线性插值，还有其他多种算法可以选择，这里是size，所以用的最简单的线性插值，你也可以实现轨迹，或者加速度等不同的公式来实现对应的效果。 </p>\n<p><img title=\"11\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"11\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/950bab76-ad04-4f66-824d-ee6c6c4c089c.jpeg\" width=\"640\" height=\"379\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 插值计算完了，付给对应的style中randomMap+i属性上。这里，一共常见了20个Animation类，这样就会有20个动画效果，来实现频率各自不同的闪烁效果。最后会调用zrender的refresh，最终来到Symbol的渲染阶段。这里，每一个点根据自己的索引选择对应的缩放比例percent，然后进入下面的绘制阶段。 </p>\n<p><img title=\"12\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"12\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/1a4baa91-11e7-4976-b92f-75d4bc521d2d.jpeg\" width=\"561\" height=\"480\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外，在对每一个点的渲染函数中，进行了进一步的优化，代码如下，根据大小进行了简化。 </p>\n<p><img title=\"13\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; display: block; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"13\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/b6f236ef-984b-4bf2-8240-4e79777ea5d6.jpeg\" width=\"595\" height=\"480\"> </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ok，到此，我想到的关于MarkPoint的内容都已经完毕，另外这个类涉及到一个大规模点渲染，等有机会对这方面详细研究后在和大家分享。</p>',NULL,'2017-04-24 16:02:36',0,0,NULL,'http://www.cnblogs.com/fuckgiser/p/6424174.html',0,NULL);
insert  into `t_article`(`id`,`title`,`content`,`summary`,`crawlerDate`,`clickHit`,`typeId`,`tags`,`orUrl`,`state`,`releaseDate`) values (59,'[.NET] 《C# 高效编程》（一） - C# 语言习惯','<h1 style=\"text-align: center;\">C# 语言习惯</h1> \n<h2>目录</h2> \n<ul> \n <li>一、使用属性而不是可访问的数据成员</li> \n <li>二、使用运行时常量（readonly）而不是编译时常量（const）</li> \n <li>三、推荐使用 is 或 as 操作符而不是强制类型转换</li> \n <li>四、使用 Conditional 特性而不是 #if 条件编译</li> \n <li>五、为类型提供 ToString() 方法</li> \n <li>六、理解几个等同性判断之间的关系</li> \n <li>七、理解 GetHashCode() 的陷阱</li> \n <li>八、推荐使用查询语法而不是循环</li> \n <li>九、避免在 API 中使用转换操作符</li> \n <li>十、使用可选参数减少方法重载的数量</li> \n <li>十一、理解短小方法的优势</li> \n</ul> \n<p>&nbsp;</p> \n<h2>一、使用属性而不是可访问的数据成员</h2> \n<p>&nbsp;</p> \n<h2>二、使用运行时常量（readonly）而不是编译时常量（const）</h2> \n<p>　　1. C# 有两种类型的常量：编译时常量和运行时常量。</p> \n<p>　　2.尽量使用运行时常量，而不是编译时常量。</p> \n<div class=\"cnblogs_code\"> \n <pre>        <span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;summary&gt;</span>\r\n        <span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> 编译时常量\r\n        </span><span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> Num = <span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">;\r\n\r\n        </span><span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;summary&gt;</span>\r\n        <span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> 运行时常量\r\n        </span><span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">readonly</span> <span style=\"color: #0000ff;\">int</span> Year = <span style=\"color: #800080;\">2017</span>;</pre> \n</div> \n<p>　　3.编译时常量只能用于数字和字符串，运行时常量也是一种常量，因为在构造函数执行后它不能被再次修改。</p> \n<p>　　4.const 比 readonly 效率高，但灵活性低。</p> \n<p>&nbsp;</p> \n<h2>三、推荐使用 is 或 as 操作符而不是强制类型转换</h2> \n<p>　　1.as 比强转更加高效、安全。</p> \n<p>　　2.as 操作符不能配合值类型使用，因为值类型永远不可能为 null。</p> \n<p>&nbsp;</p> \n<h2>四、使用 Conditional 特性而不是 #if 条件编译</h2> \n<div class=\"cnblogs_code\"> \n <pre>        <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Test()\r\n        {\r\n            </span><span style=\"color: #0000ff;\">string</span> msg = <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\r\n\r\n            </span><span style=\"color: #0000ff;\">#if</span> DEBUG<span style=\"color: #000000;\">\r\n            msg </span>= <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Hi</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n            </span><span style=\"color: #0000ff;\">#endif</span><span style=\"color: #000000;\">\r\n\r\n            Console.WriteLine(msg);\r\n        }</span></pre> \n</div> \n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/ede8a493-96dc-4886-b02e-66e7041ebc84.png\" alt=\"\"></p> \n<p>　　假如你是将这块代码在 Release 版本中执行的话，就会输出空行。出现 Bug 的原因是我们把程序中的主要逻辑代码和条件编译代码混在一块了。这会让我们很难察觉不同版本间的差异，导致错误的行为发生。</p> \n<p>&nbsp;</p> \n<h2>五、为类型提供 ToString() 方法</h2> \n<p>　　1.应该为类型提供一个合适的 ToString() 版本，否则使用者会根据类的一些属性来自行构造并用于显示。</p> \n<p>　　2.object 默认提供的 ToString() 方法会返回类型的完整名称，意义不大。如：System.Drawing.Rect。</p> \n<p>　　3.重写所有类型的 ToString()，可以简单明了的显示对象的摘要信息。</p> \n<p>&nbsp;</p> \n<h2>六、理解几个等同性判断之间的关系</h2> \n<p>　　1.系统提供 4 种函数判断两个对象是否“相等”。</p> \n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://blog.open1111.com/static/blogImages/2017/04/24/21448582-d33f-4f8a-aaee-c7f1e71df006.png\" alt=\"\"></p> \n<p>　　2.对于前两种方法，我们永远不要重新定义，我们通常要重写 Equals 方法。</p> \n<p>　　3.重写 Equals 的类型也要实现&nbsp;IEquatable&lt;T&gt;，如果是结构体的话需要实现&nbsp;IStructuralEquatable。</p> \n<p>　　4.引用同一个 DataRow，会认为相等，如果想比较内容的话，而不是引用地址，那么就应该重写 Equals() 实例方法。</p> \n<p>　　5.Equals() 实例方法的重写原则：对于所有的值类型，都应该重写 Equals() 方法，对于引用类型，如果不能满足需要时才去重写该方法。重写该方法的同时也需要重写&nbsp;GetHashCode() 方法。</p> \n<p>　　6.operator == ()：只要创建的是值类型，都必须重新定义 operator == ()，因为系统默认是通过反射来比较两个值是否相等，效率过低。</p> \n<p>&nbsp;</p> \n<h2>七、理解 GetHashCode() 的陷阱</h2> \n<p>　　1.对于我们实现的大多数类型来说，避免实现&nbsp;GetHashCode()。</p> \n<p>　　2.GetHashCode() 的重载版本必须遵循以下三条原则：</p> \n<p>　　（1）如果两个对象相等（由 operator == 定义），那么它们必须生成相同的散列码。</p> \n<p>　　（2）对于任何一个对象 A，A.GetHashCode() 必须保持不变。</p> \n<p>　　（3）对于所有的输入，散列函数应该在所有整数中按照随机分布生成散列码。</p> \n<p>&nbsp;</p> \n<h2>八、推荐使用查询语法而不是循环</h2> \n<p>　　示例：</p> \n<div class=\"cnblogs_code\"> \n <pre>            <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">1.使用循环</span>\r\n            <span style=\"color: #0000ff;\">var</span> foo = <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">int</span>[<span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">];\r\n\r\n            </span><span style=\"color: #0000ff;\">for</span> (<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">100</span>; i++<span style=\"color: #000000;\">)\r\n            {\r\n                foo[i] </span>= i *<span style=\"color: #000000;\"> i;\r\n            }\r\n\r\n            </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">使用查询语法</span>\r\n            <span style=\"color: #0000ff;\">var</span> foo2 = (<span style=\"color: #0000ff;\">from</span> n <span style=\"color: #0000ff;\">in</span> Enumerable.Range(<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">100</span>) <span style=\"color: #0000ff;\">select</span> n * n).ToArray();</pre> \n</div> \n<p>　　1.有些方法语法没有对应的查询语法，如 Take、TaskWhile、Skip、SkipWhile、Min、Max 等，就需要使用方法语法。</p> \n<p>&nbsp;</p> \n<h2>九、避免在 API 中使用转换操作符</h2> \n<p>&nbsp;</p> \n<h2>十、使用可选参数减少方法重载的数量</h2> \n<p>　　1.对于程序集的第一次发布，可以随意使用可选参数和命名参数。而在进行后续发布时，必须为额外的参数创建重载。这样才能保证现在的程序仍能正常运行。此外，在任何的后续发布中，都要避免修改参数的名称，因为参数名称已经成为公有接口的一部分。</p> \n<p>&nbsp;</p> \n<h2>十一、理解短小方法的优势</h2> \n<p>　　1.我们最好尽可能地编写出最清晰的代码，将优化工作交给 JIT 完成。一个常见的错误优化是，我们将大量的逻辑放在一个函数中，以为这样可以减少额外的方法调用开销。</p> \n<div class=\"cnblogs_code\"> \n <pre>        <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span> Test(<span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> isTrue)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span> sb = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> StringBuilder();\r\n\r\n            </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (isTrue)\r\n            {\r\n                sb.AppendLine(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">A</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                sb.AppendLine(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">B</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                sb.AppendLine(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            }\r\n            </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">\r\n            {\r\n                sb.AppendLine(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">E</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                sb.AppendLine(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">F</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                sb.AppendLine(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">G</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            }\r\n\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> sb.ToString();\r\n        }</span></pre> \n</div> \n<p>　　在第一次调用 Test 方法时， if-else 的两个分支都被 JIT 编译，而实际上只需要编译其中一个，修改后：</p> \n<div class=\"cnblogs_code\"> \n <pre>        <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span> Test2(<span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> isTrue)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span> sb = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> StringBuilder();\r\n\r\n            </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (isTrue)\r\n            {\r\n                </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Method1();\r\n            }\r\n            </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">\r\n            {\r\n                </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Method2();\r\n            }\r\n        }</span></pre> \n</div> \n<p>　　现在进行了方法拆分，这两个方法就可以根据需要进行 JIT 编译，而不必第一次进行全部编译。</p> \n<p>　　2.可以将 if-else 分支中有超过几十条的语句，或者某个分支专门用来处理程序发生的错误，或者 switch 语句中的每个 case 中的代码进行选择性的提取。</p> \n<p>　　3.短小精悍的方法（一般包含较少的局部变量）会让 JIT 更容易地进行寄存器选择工作，即选择哪些局部变量放在寄存器中，而不是栈上。</p> \n<p>　　4.尽量编写短小精悍的方法。</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<hr> \n<p>&nbsp;【博主】反骨仔</p> \n<p>【原文】<a id=\"Editor_Edit_hlEntryLink\" title=\"view: [.NET] 《C# 高效编程》（一） - C# 语言习惯\" href=\"http://www.cnblogs.com/liqingwen/p/6754401.html\" target=\"_blank\">http://www.cnblogs.com/liqingwen/p/6754401.html</a>&nbsp;</p> \n<p><span style=\"font-size: 12px;\">【参考】《C# 高效编程》</span></p>',NULL,'2017-04-24 16:02:39',0,0,NULL,'http://www.cnblogs.com/liqingwen/p/6754401.html',0,NULL);

/*Table structure for table `t_link` */

DROP TABLE IF EXISTS `t_link`;

CREATE TABLE `t_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `sortNo` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Data for the table `t_link` */

insert  into `t_link`(`id`,`name`,`url`,`sortNo`) values (1,'Java知识分享网','http://www.java1234.com/',1);
insert  into `t_link`(`id`,`name`,`url`,`sortNo`) values (2,'百度云搜索引擎','http://pan.open1111.com/',2);
insert  into `t_link`(`id`,`name`,`url`,`sortNo`) values (6,'Java开源CMS系统','http://www.open1111.com/',3);
insert  into `t_link`(`id`,`name`,`url`,`sortNo`) values (7,'Jar包下载网','http://jar.open1111.com/',4);
insert  into `t_link`(`id`,`name`,`url`,`sortNo`) values (8,'Java开源博客系统','http://blog.java1234.com/index.html',5);

/*Table structure for table `t_manager` */

DROP TABLE IF EXISTS `t_manager`;

CREATE TABLE `t_manager` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userName` varchar(50) DEFAULT NULL,
  `password` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `t_manager` */

insert  into `t_manager`(`id`,`userName`,`password`) values (1,'open1111','70f57208b804bd90d51fdac84afe6472');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
